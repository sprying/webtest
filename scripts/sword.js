try {
    document.domain = "tax.cn"
} catch (e) {
}
var $SwordWebRunmode = (function () {
    return{runmode: typeof(jsR) == "object" ? "dev" : "pro", isDev: function () {
        return this.runmode == "dev"
    }, isPro: function () {
        return this.runmode == "pro"
    }}
})();
if ($SwordWebRunmode.isDev()) {
    jsR.addWidget({name: "SwordFrameTabLayout1", prefixPath: "gt_extend/js/", jsPath: ["SwordFrameTabLayout1.js"]});
    jsR.addWidget({name: "SwordPopUpWindow", prefixPath: "gt_extend/js/", jsPath: ["SwordPopUpWindow.js"]});
    jsR.addWidget({name: "SwordWorkflow", prefixPath: "workflow/component/", jsPath: ["SwordWorkflow.js"]})
}
var swordCfg = {plugin: {load_plugin: true, plugins: {SwordGrid: ["gt_extend/js/SwordGrid_extend.js"], SwordForm: ["gt_extend/js/SwordForm_extend.js"], SwordTree: ["gt_extend/js/SwordTree_extend.js"], SwordSelect: ["gt_extend/js/SwordSelect_extend.js"], SwordToolBar: ["swordweb/biz/plugins/SwordToolBar/adapter.js", "gt_extend/js/SwordToolbar_extend.js"], Base: ["gt_extend/js/onafter.js", "gt3_public/jsDelegate.js", "swordweb/kz.js"], SwordClientCache: ["gt_extend/js/cacheTree.js", "gt_extend/js/cacheSelect.js"], SwordValidator: ["swordweb/biz/plugins/SwordValidator/SwordValidator.js"]}, css: {}}, style: {sys_style: "gt3new", widget_style: {}}, frametab: {maxTabNum: 10}, swordForm: {align: "left"}, swordGrid: {dragWidth: true, headerHeight: 25}, swordCalendar: {handInput: "true", beginYear: new Date().getFullYear() - 10, endYear: new Date().getFullYear() + 10}, swordPopUpBox: {flag: true, number: 0, topMask: false}, SwordLocal: (typeof(SwordLocalization) == "string") ? SwordLocalization : undefined || "zh-cn", shields: {backspace: true, f5: false, contextMenu: false}, SwordClientCache: true, SwordClientTiming: false, onBefore: ["pullTreeBefore()", "selectBefore()", "_OverWritePostReq()", "addKzSubmitDiv()"], onAfter: ["pageAfter()"]};
if ($SwordWebRunmode.isDev()) {
    jsR.initConfig(swordCfg)
}
function maskDialog() {
    this.hide = function () {
        var a = $("div_Mask");
        if (a) {
            this.delayHide(a)
        }
    };
    this.delayHide = function (a) {
        a.setStyle("display", "none")
    };
    this.show = function () {
        document.writeln('<div id="div_Mask" style=" width:100%;position:absolute; z-index:99999; top:0; left:0; background:white; height:' + document.documentElement.clientHeight + 'px;"><div style="z-index:99999;font-size:12px;color:#FFFFFF;background:#FF0000;position:absolute;top:0px;right:0px;padding:2px 10px 2px 10px;">加载中，请稍候..........</div></div>');
        document.close();
        return this
    }
}
var MaskDialog = new maskDialog().show();
window.onerror = function (a, c, b) {
    var f = new Element("div");
    f.id = "SwordErrorDiv";
    f.innerHTML = "<b>An error was thrown and caught.</b><p>";
    f.innerHTML += "Error: " + a + "<br>";
    f.innerHTML += "Line: " + b + "<br>";
    f.innerHTML += "URL: " + c + "<br>";
    f.setStyle("display", "none");
    $(document.body).grab(f);
    return false
};
var importCss = "";
$SwordLoader = (function () {
    function isServer() {
        if (document.getElementsByTagName("script")[0]["edit"] == "true") {
            return false
        } else {
            return !document.domain == ""
        }
    }

    function isIE() {
        return(navigator.userAgent.toLowerCase().indexOf("msie") != -1)
    }

    function writeLocalJs(type, source) {
        var oHead = document.getElementsByTagName("HEAD").item(0);
        var oScript = document.createElement("script");
        oScript.language = "javascript";
        oScript.type = "text/javascript";
        oScript.defer = true;
        oScript[type] = source;
        oHead.appendChild(oScript);
        return oScript
    }

    function importJs(path) {
        if (this.server) {
            this.writeServerJs(path)
        } else {
            this.writeLocalJs("src", path)
        }
    }

    function writeServerJs(path) {
        var xReq = null;
        if (window.XMLHttpRequest) {
            xReq = new XMLHttpRequest()
        } else {
            if (window.ActiveXObject) {
                xReq = new ActiveXObject("MsXml2.XmlHttp")
            }
        }
        xReq.open("get", path, false);
        xReq.setRequestHeader("Content-Type", "text/plain;charset=gb2312");
        xReq.send(null);
        if (xReq.readyState == 4) {
            if (xReq.status == 200) {
                if (this.isIE) {
                    execScript(xReq.responseText)
                } else {
                    window.eval(xReq.responseText)
                }
            }
        }
    }

    function ChargeAndGetRootPath() {
        var Srcs = document.getElementsByTagName("script");
        var idx = 0;
        if (Srcs[0].id == "SwordLocalization") {
            idx = 1
        }
        var imObj = document.getElementsByTagName("script")[idx];
        var imObjSrc = imObj.src;
        if (imObjSrc.lastIndexOf("Sword.js") < 0 || imObjSrc.lastIndexOf("swordweb/core/jsimport/Sword.js") < 0) {
            if (imObjSrc.lastIndexOf("Sword_opt.js") < 0 || imObjSrc.lastIndexOf("swordweb/core/jsimport/Sword_opt.js") < 0) {
                alert("Error,启动SwordWeb框架失败,Sword.js的script节点必须放在页面引用的第一个script节点上!");
                return null
            } else {
                if (imObj.outerHTML.indexOf("importCss") > 0) {
                    importCss = false
                } else {
                    importCss = true
                }
                return imObjSrc.replace("swordweb/core/jsimport/Sword_opt.js", "")
            }
        } else {
            if (imObj.outerHTML.indexOf("importCss") > 0) {
                importCss = false
            } else {
                importCss = true
            }
            return imObjSrc.replace("swordweb/core/jsimport/Sword.js", "")
        }
    }

    function writeCSS(path) {
        var oHead = document.getElementsByTagName("HEAD").item(0);
        var link = document.createElement("link");
        link.href = path;
        link.type = "text/css";
        link.rel = "stylesheet";
        oHead.appendChild(link)
    }

    return{server: isServer(), writeLocalJs: writeLocalJs, writeServerJs: writeServerJs, importJs: importJs, writeCSS: writeCSS, isIE: isIE(), rootPath: ChargeAndGetRootPath()}
})();
if (typeof(swordCfg) != "object") {
    $SwordLoader.importJs($SwordLoader.rootPath + "swordweb/core/jsimport/JsReady-dev.js");
    $SwordLoader.importJs($SwordLoader.rootPath + "swordweb/config.js")
} else {
    if (importCss != false) {
        $SwordLoader.writeCSS($SwordLoader.rootPath + "swordweb/styles/" + swordCfg.style.sys_style + "/SwordCss/sword_min.css")
    }
}
var jsR = (function () {
    return{isIE: $SwordLoader.isIE, rootPath: $SwordLoader.rootPath, config: swordCfg, server: function () {
        return $SwordLoader.server
    }, doIm: function () {
    }}
})();
var $SwordShielding = (function () {
    function shielding() {
        if ($SwordLoader.isIE) {
            document.onkeydown = function () {
                return SwordShielding(event, $(event.srcElement))
            }
        } else {
            document.onkeypress = function (e) {
                return SwordShielding(e, $(e.target))
            }
        }
    }

    function SwordShielding(e, el) {
        var s = swordCfg.shields;
        var f5 = true;
        var bp = true;
        var cm = true;
        if (s.f5) {
            f5 = shieldingF5(e)
        }
        if (s.backspace) {
            bp = shieldingBackSpace(e, el)
        }
        if (s.contextMenu) {
            cm = shieldingRightClick(e)
        }
        return f5 && bp && cm
    }

    function shieldingF5(e) {
        with (e) {
            if (keyCode == 116 || (ctrlKey && keyCode == 82)) {
                e.keyCode = 0;
                e.cancelBubble = true;
                return false
            }
        }
        return true
    }

    function shieldingBackSpace(e, el) {
        var type = el.type;
        var code = e.keyCode;
        if (code != 8) {
            return true
        }
        if (el.getAttribute("readonly")) {
            return false
        }
        return(code != 8 || type == "button" || (type == "text" && !["calendar", "select"].contains(el.get("widget"))) || (type == "password") || (type == "textarea") || (type == "submit"))
    }

    function shieldingRightClick(e) {
        if (window.Event) {
            if (e.which == 2 || e.which == 3) {
                return false
            }
        } else {
            if (e.button == 2 || e.button == 3) {
                e.cancelBubble = true;
                e.returnValue = false;
                return false
            }
        }
        return true
    }

    return{shielding: shielding}
})();
$SwordShielding.shielding();
var MooTools = {version: "1.2.1", build: "0d4845aab3d9a4fdee2f0d4a6dd59210e4b697cf"};
var Native = function (n) {
    n = n || {};
    var a = n.name;
    var l = n.legacy;
    var b = n.protect;
    var c = n.implement;
    var k = n.generics;
    var h = n.initialize;
    var j = n.afterImplement || function () {
    };
    var f = h || l;
    k = k !== false;
    f.constructor = Native;
    f.$family = {name: "native"};
    if (l && h) {
        f.prototype = l.prototype
    }
    f.prototype.constructor = f;
    if (a) {
        var g = a.toLowerCase();
        f.prototype.$family = {name: g};
        Native.typize(f, g)
    }
    var m = function (q, o, r, p) {
        if (!b || p || !q.prototype[o]) {
            q.prototype[o] = r
        }
        if (k) {
            Native.genericize(q, o, b)
        }
        j.call(q, o, r);
        return q
    };
    f.alias = function (q, o, r) {
        if (typeof q == "string") {
            if ((q = this.prototype[q])) {
                return m(this, o, q, r)
            }
        }
        for (var p in q) {
            this.alias(p, q[p], o)
        }
        return this
    };
    f.implement = function (q, o, s) {
        if (typeof q == "string") {
            return m(this, q, o, s)
        }
        for (var r in q) {
            m(this, r, q[r], o)
        }
        return this
    };
    if (c) {
        f.implement(c)
    }
    return f
};
Native.genericize = function (b, c, a) {
    if ((!a || !b[c]) && typeof b.prototype[c] == "function") {
        b[c] = function () {
            var f = Array.prototype.slice.call(arguments);
            return b.prototype[c].apply(f.shift(), f)
        }
    }
};
Native.implement = function (f, c) {
    for (var b = 0, a = f.length; b < a; b++) {
        f[b].implement(c)
    }
};
Native.typize = function (a, b) {
    if (!a.type) {
        a.type = function (c) {
            return($type(c) === b)
        }
    }
};
(function () {
    var a = {Array: Array, Date: Date, Function: Function, Number: Number, RegExp: RegExp, String: String};
    for (var k in a) {
        new Native({name: k, initialize: a[k], protect: true})
    }
    var f = {"boolean": Boolean, "native": Native, object: Object};
    for (var c in f) {
        Native.typize(f[c], c)
    }
    var j = {Array: ["concat", "indexOf", "join", "lastIndexOf", "pop", "push", "reverse", "shift", "slice", "sort", "splice", "toString", "unshift", "valueOf"], String: ["charAt", "charCodeAt", "concat", "indexOf", "lastIndexOf", "match", "replace", "search", "slice", "split", "substr", "substring", "toLowerCase", "toUpperCase", "valueOf"]};
    for (var h in j) {
        for (var b = j[h].length; b--;) {
            Native.genericize(window[h], j[h][b], true)
        }
    }
})();
var Hash = new Native({name: "Hash", initialize: function (a) {
    if ($type(a) == "hash") {
        a = $unlink(a.getClean())
    }
    for (var b in a) {
        this[b] = a[b]
    }
    return this
}});
Hash.implement({forEach: function (b, c) {
    for (var a in this) {
        if (this.hasOwnProperty(a)) {
            b.call(c, this[a], a, this)
        }
    }
}, getClean: function () {
    var b = {};
    for (var a in this) {
        if (this.hasOwnProperty(a)) {
            b[a] = this[a]
        }
    }
    return b
}, getLength: function () {
    var b = 0;
    for (var a in this) {
        if (this.hasOwnProperty(a)) {
            b++
        }
    }
    return b
}});
Hash.alias("forEach", "each");
Array.implement({forEach: function (c, f) {
    for (var b = 0, a = this.length; b < a; b++) {
        c.call(f, this[b], b, this)
    }
}});
Array.alias("forEach", "each");
function $A(c) {
    if (c.item) {
        var f = [];
        for (var b = 0, a = c.length; b < a; b++) {
            f[b] = c[b]
        }
        return f
    }
    return Array.prototype.slice.call(c)
}
function $arguments(a) {
    return function () {
        return arguments[a]
    }
}
function $chk(a) {
    return !!(a || a === 0)
}
function $clear(a) {
    clearTimeout(a);
    clearInterval(a);
    return null
}
function $defined(a) {
    return(a != undefined)
}
function $each(c, b, f) {
    var a = $type(c);
    ((a == "arguments" || a == "collection" || a == "array") ? Array : Hash).each(c, b, f)
}
function $empty() {
}
function $extend(c, a) {
    for (var b in (a || {})) {
        c[b] = a[b]
    }
    return c
}
function $H(a) {
    return new Hash(a)
}
function $lambda(a) {
    return(typeof a == "function") ? a : function () {
        return a
    }
}
function $merge() {
    var g = {};
    for (var f = 0, a = arguments.length; f < a; f++) {
        var b = arguments[f];
        if ($type(b) != "object") {
            continue
        }
        for (var c in b) {
            var j = b[c], h = g[c];
            g[c] = (h && $type(j) == "object" && $type(h) == "object") ? $merge(h, j) : $unlink(j)
        }
    }
    return g
}
function $pick() {
    for (var b = 0, a = arguments.length; b < a; b++) {
        if (arguments[b] != undefined) {
            return arguments[b]
        }
    }
    return null
}
function $random(b, a) {
    return Math.floor(Math.random() * (a - b + 1) + b)
}
function $splat(b) {
    var a = $type(b);
    return(a) ? ((a != "array" && a != "arguments") ? [b] : b) : []
}
var $time = Date.now || function () {
    return +new Date
};
function $try() {
    for (var b = 0, a = arguments.length; b < a; b++) {
        try {
            return arguments[b]()
        } catch (c) {
        }
    }
    return null
}
function $type(a) {
    if (a == undefined) {
        return false
    }
    if (a.$family) {
        return(a.$family.name == "number" && !isFinite(a)) ? false : a.$family.name
    }
    if (a.nodeName) {
        switch (a.nodeType) {
            case 1:
                return"element";
            case 3:
                return(/\S/).test(a.nodeValue) ? "textnode" : "whitespace"
        }
    } else {
        if (typeof a.length == "number") {
            if (a.callee) {
                return"arguments"
            } else {
                if (a.item) {
                    return"collection"
                }
            }
        }
    }
    return typeof a
}
function $unlink(c) {
    var b;
    switch ($type(c)) {
        case"object":
            b = {};
            for (var g in c) {
                b[g] = $unlink(c[g])
            }
            break;
        case"hash":
            b = new Hash(c);
            break;
        case"array":
            b = [];
            for (var f = 0, a = c.length; f < a; f++) {
                b[f] = $unlink(c[f])
            }
            break;
        default:
            return c
    }
    return b
}
var Browser = $merge({Engine: {name: "unknown", version: 0}, Platform: {name: (window.orientation != undefined) ? "ipod" : (navigator.platform.match(/mac|win|linux/i) || ["other"])[0].toLowerCase()}, Features: {xpath: !!(document.evaluate), air: !!(window.runtime), query: !!(document.querySelector)}, Plugins: {}, Engines: {presto: function () {
    return(!window.opera) ? false : ((arguments.callee.caller) ? 960 : ((document.getElementsByClassName) ? 950 : 925))
}, trident: function () {
    return(!window.ActiveXObject) ? false : ((window.XMLHttpRequest) ? ((navigator.appVersion.match(/9./i) == "9.") ? 7 : ((document.querySelectorAll) ? 6 : 5)) : 4)
}, webkit: function () {
    return(navigator.taintEnabled) ? false : ((Browser.Features.xpath) ? ((Browser.Features.query) ? 525 : 420) : 419)
}, gecko: function () {
    return(!document.getBoxObjectFor && window.mozInnerScreenX == null) ? false : ((document.getElementsByClassName) ? 19 : 18)
}}}, Browser || {});
Browser.Platform[Browser.Platform.name] = true;
Browser.detect = function () {
    for (var b in this.Engines) {
        var a = this.Engines[b]();
        if (a) {
            this.Engine = {name: b, version: a};
            this.Engine[b] = this.Engine[b + a] = true;
            break
        }
    }
    return{name: b, version: a}
};
Browser.detect();
Browser.Request = function () {
    return $try(function () {
        return new XMLHttpRequest()
    }, function () {
        return new ActiveXObject("MSXML2.XMLHTTP")
    }, function () {
        return new ActiveXObject("Microsoft.XMLHTTP")
    })
};
Browser.Features.xhr = !!(Browser.Request());
Browser.Plugins.Flash = (function () {
    var a = ($try(function () {
        return navigator.plugins["Shockwave Flash"].description
    }, function () {
        return new ActiveXObject("ShockwaveFlash.ShockwaveFlash").GetVariable("$version")
    }) || "0 r0").match(/\d+/g);
    return{version: parseInt(a[0] || 0 + "." + a[1], 10) || 0, build: parseInt(a[2], 10) || 0}
})();
function $exec(b) {
    if (!b) {
        return b
    }
    if (window.execScript) {
        window.execScript(b)
    } else {
        var a = document.createElement("script");
        a.setAttribute("type", "text/javascript");
        a[(Browser.Engine.webkit && Browser.Engine.version < 420) ? "innerText" : "text"] = b;
        document.head.appendChild(a);
        document.head.removeChild(a)
    }
    return b
}
Native.UID = 1;
var $uid = (Browser.Engine.trident) ? function (a) {
    return(a.uid || (a.uid = [Native.UID++]))[0]
} : function (a) {
    return a.uid || (a.uid = Native.UID++)
};
var Window = new Native({name: "Window", legacy: (Browser.Engine.trident) ? null : window.Window, initialize: function (a) {
    $uid(a);
    if (!a.Element) {
        a.Element = $empty;
        if (Browser.Engine.webkit) {
            a.document.createElement("iframe")
        }
        a.Element.prototype = (Browser.Engine.webkit) ? window["[[DOMElement.prototype]]"] : {}
    }
    a.document.window = a;
    return $extend(a, Window.Prototype)
}, afterImplement: function (b, a) {
    window[b] = Window.Prototype[b] = a
}});
Window.Prototype = {$family: {name: "window"}};
new Window(window);
var Document = new Native({name: "Document", legacy: (Browser.Engine.trident) ? null : window.Document, initialize: function (a) {
    $uid(a);
    a.head = a.getElementsByTagName("head")[0];
    a.html = a.getElementsByTagName("html")[0];
    if (Browser.Engine.trident && Browser.Engine.version <= 4) {
        $try(function () {
            a.execCommand("BackgroundImageCache", false, true)
        })
    }
    if (Browser.Engine.trident) {
        a.window.attachEvent("onunload", function () {
            a.window.detachEvent("onunload", arguments.callee);
            a.head = a.html = a.window = null
        })
    }
    return $extend(a, Document.Prototype)
}, afterImplement: function (b, a) {
    document[b] = Document.Prototype[b] = a
}});
Document.Prototype = {$family: {name: "document"}};
new Document(document);
Array.implement({every: function (c, f) {
    for (var b = 0, a = this.length; b < a; b++) {
        if (!c.call(f, this[b], b, this)) {
            return false
        }
    }
    return true
}, filter: function (f, g) {
    var c = [];
    for (var b = 0, a = this.length; b < a; b++) {
        if (f.call(g, this[b], b, this)) {
            c.push(this[b])
        }
    }
    return c
}, clean: function () {
    return this.filter($defined)
}, indexOf: function (c, f) {
    var a = this.length;
    for (var b = (f < 0) ? Math.max(0, a + f) : f || 0; b < a; b++) {
        if (this[b] === c) {
            return b
        }
    }
    return -1
}, map: function (f, g) {
    var c = [];
    for (var b = 0, a = this.length; b < a; b++) {
        c[b] = f.call(g, this[b], b, this)
    }
    return c
}, some: function (c, f) {
    for (var b = 0, a = this.length; b < a; b++) {
        if (c.call(f, this[b], b, this)) {
            return true
        }
    }
    return false
}, associate: function (c) {
    var f = {}, b = Math.min(this.length, c.length);
    for (var a = 0; a < b; a++) {
        f[c[a]] = this[a]
    }
    return f
}, link: function (c) {
    var a = {};
    for (var g = 0, b = this.length; g < b; g++) {
        for (var f in c) {
            if (c[f](this[g])) {
                a[f] = this[g];
                delete c[f];
                break
            }
        }
    }
    return a
}, contains: function (a, b) {
    return this.indexOf(a, b) != -1
}, extend: function (c) {
    for (var b = 0, a = c.length; b < a; b++) {
        this.push(c[b])
    }
    return this
}, getLast: function () {
    return(this.length) ? this[this.length - 1] : null
}, getRandom: function () {
    return(this.length) ? this[$random(0, this.length - 1)] : null
}, include: function (a) {
    if (!this.contains(a)) {
        this.push(a)
    }
    return this
}, combine: function (c) {
    for (var b = 0, a = c.length; b < a; b++) {
        this.include(c[b])
    }
    return this
}, erase: function (b) {
    for (var a = this.length; a--; a) {
        if (this[a] === b) {
            this.splice(a, 1)
        }
    }
    return this
}, empty: function () {
    this.length = 0;
    return this
}, flatten: function () {
    var f = [];
    for (var b = 0, a = this.length; b < a; b++) {
        var c = $type(this[b]);
        if (!c) {
            continue
        }
        f = f.concat((c == "array" || c == "collection" || c == "arguments") ? Array.flatten(this[b]) : this[b])
    }
    return f
}, hexToRgb: function (b) {
    if (this.length != 3) {
        return null
    }
    var a = this.map(function (c) {
        if (c.length == 1) {
            c += c
        }
        return c.toInt(16)
    });
    return(b) ? a : "rgb(" + a + ")"
}, rgbToHex: function (f) {
    if (this.length < 3) {
        return null
    }
    if (this.length == 4 && this[3] == 0 && !f) {
        return"transparent"
    }
    var b = [];
    for (var a = 0; a < 3; a++) {
        var c = (this[a] - 0).toString(16);
        b.push((c.length == 1) ? "0" + c : c)
    }
    return(f) ? b : "#" + b.join("")
}});
Function.implement({extend: function (a) {
    for (var b in a) {
        this[b] = a[b]
    }
    return this
}, create: function (b) {
    var a = this;
    b = b || {};
    return function (f) {
        var c = b.arguments;
        c = (c != undefined) ? $splat(c) : Array.slice(arguments, (b.event) ? 1 : 0);
        if (b.event) {
            c = [f || window.event].extend(c)
        }
        var g = function () {
            return a.apply(b.bind || null, c)
        };
        if (b.delay) {
            return setTimeout(g, b.delay)
        }
        if (b.periodical) {
            return setInterval(g, b.periodical)
        }
        if (b.attempt) {
            return $try(g)
        }
        return g()
    }
}, run: function (a, b) {
    return this.apply(b, $splat(a))
}, pass: function (a, b) {
    return this.create({bind: b, arguments: a})
}, bindWithEvent: function (b, a) {
    return this.create({bind: b, arguments: a, event: true})
}, attempt: function (a, b) {
    return this.create({bind: b, arguments: a, attempt: true})()
}, delay: function (b, c, a) {
    return this.create({bind: c, arguments: a, delay: b})()
}, periodical: function (c, b, a) {
    return this.create({bind: b, arguments: a, periodical: c})()
}});
Function.prototype.bind = function (b, a) {
    return this.create({bind: b, arguments: a})
};
Number.implement({limit: function (b, a) {
    return Math.min(a, Math.max(b, this))
}, round: function (a) {
    a = Math.pow(10, a || 0);
    return Math.round(this * a) / a
}, times: function (b, c) {
    for (var a = 0; a < this; a++) {
        b.call(c, a, this)
    }
}, toFloat: function () {
    return parseFloat(this)
}, toInt: function (a) {
    return parseInt(this, a || 10)
}});
Number.alias("times", "each");
(function (b) {
    var a = {};
    b.each(function (c) {
        if (!Number[c]) {
            a[c] = function () {
                return Math[c].apply(null, [this].concat($A(arguments)))
            }
        }
    });
    Number.implement(a)
})(["abs", "acos", "asin", "atan", "atan2", "ceil", "cos", "exp", "floor", "log", "max", "min", "pow", "sin", "sqrt", "tan"]);
String.implement({test: function (a, b) {
    return((typeof a == "string") ? new RegExp(a, b) : a).test(this)
}, contains: function (a, b) {
    return(b) ? (b + this + b).indexOf(b + a + b) > -1 : this.indexOf(a) > -1
}, trim: function () {
    return this.replace(/^\s+|\s+$/g, "")
}, clean: function () {
    return this.replace(/\s+/g, " ").trim()
}, camelCase: function () {
    return this.replace(/-\D/g, function (a) {
        return a.charAt(1).toUpperCase()
    })
}, hyphenate: function () {
    return this.replace(/[A-Z]/g, function (a) {
        return("-" + a.charAt(0).toLowerCase())
    })
}, capitalize: function () {
    return this.replace(/\b[a-z]/g, function (a) {
        return a.toUpperCase()
    })
}, escapeRegExp: function () {
    return this.replace(/([-.*+?^${}()|[\]\/\\])/g, "\\$1")
}, toInt: function (a) {
    return parseInt(this, a || 10)
}, toFloat: function () {
    return parseFloat(this)
}, hexToRgb: function (b) {
    var a = this.match(/^#?(\w{1,2})(\w{1,2})(\w{1,2})$/);
    return(a) ? a.slice(1).hexToRgb(b) : null
}, rgbToHex: function (b) {
    var a = this.match(/\d{1,3}/g);
    return(a) ? a.rgbToHex(b) : null
}, stripScripts: function (b) {
    var a = "";
    var c = this.replace(/<script[^>]*>([\s\S]*?)<\/script>/gi, function () {
        a += arguments[1] + "\n";
        return""
    });
    if (b === true) {
        $exec(a)
    } else {
        if ($type(b) == "function") {
            b(a, c)
        }
    }
    return c
}, substitute: function (a, b) {
    return this.replace(b || (/\\?\{([^{}]+)\}/g), function (f, c) {
        if (f.charAt(0) == "\\") {
            return f.slice(1)
        }
        return(a[c] != undefined) ? a[c] : ""
    })
}});
Hash.implement({has: Object.prototype.hasOwnProperty, keyOf: function (b) {
    for (var a in this) {
        if (this.hasOwnProperty(a) && this[a] === b) {
            return a
        }
    }
    return null
}, hasValue: function (a) {
    return(Hash.keyOf(this, a) !== null)
}, extend: function (a) {
    Hash.each(a, function (c, b) {
        Hash.set(this, b, c)
    }, this);
    return this
}, combine: function (a) {
    Hash.each(a, function (c, b) {
        Hash.include(this, b, c)
    }, this);
    return this
}, erase: function (a) {
    if (this.hasOwnProperty(a)) {
        delete this[a]
    }
    return this
}, get: function (a) {
    return(this.hasOwnProperty(a)) ? this[a] : null
}, set: function (a, b) {
    if (!this[a] || this.hasOwnProperty(a)) {
        this[a] = b
    }
    return this
}, empty: function () {
    Hash.each(this, function (b, a) {
        delete this[a]
    }, this);
    return this
}, include: function (b, c) {
    var a = this[b];
    if (a == undefined) {
        this[b] = c
    }
    return this
}, map: function (b, c) {
    var a = new Hash;
    Hash.each(this, function (g, f) {
        a.set(f, b.call(c, g, f, this))
    }, this);
    return a
}, filter: function (b, c) {
    var a = new Hash;
    Hash.each(this, function (g, f) {
        if (b.call(c, g, f, this)) {
            a.set(f, g)
        }
    }, this);
    return a
}, every: function (b, c) {
    for (var a in this) {
        if (this.hasOwnProperty(a) && !b.call(c, this[a], a)) {
            return false
        }
    }
    return true
}, some: function (b, c) {
    for (var a in this) {
        if (this.hasOwnProperty(a) && b.call(c, this[a], a)) {
            return true
        }
    }
    return false
}, getKeys: function () {
    var a = [];
    Hash.each(this, function (c, b) {
        a.push(b)
    });
    return a
}, getValues: function () {
    var a = [];
    Hash.each(this, function (b) {
        a.push(b)
    });
    return a
}, toQueryString: function (a) {
    var b = [];
    Hash.each(this, function (h, g) {
        if (a) {
            g = a + "[" + g + "]"
        }
        var f;
        switch ($type(h)) {
            case"object":
                f = Hash.toQueryString(h, g);
                break;
            case"array":
                var c = {};
                h.each(function (k, j) {
                    c[j] = k
                });
                f = Hash.toQueryString(c, g);
                break;
            default:
                f = g + "=" + encodeURIComponent(h)
        }
        if (h != undefined) {
            b.push(f)
        }
    });
    return b.join("&")
}});
Hash.alias({keyOf: "indexOf", hasValue: "contains"});
var Event = new Native({name: "Event", initialize: function (a, h) {
    h = h || window;
    var n = h.document;
    a = a || h.event;
    if (a.$extended) {
        return a
    }
    this.$extended = true;
    var m = a.type;
    var j = a.target || a.srcElement;
    while (j && j.nodeType == 3) {
        j = j.parentNode
    }
    if (m.test(/key/)) {
        var b = a.which || a.keyCode;
        var p = Event.Keys.keyOf(b);
        if (m == "keydown") {
            var f = b - 111;
            if (f > 0 && f < 13) {
                p = "f" + f
            }
        }
        p = p || String.fromCharCode(b).toLowerCase()
    } else {
        if (m.match(/(click|mouse|menu)/i)) {
            n = (!n.compatMode || n.compatMode == "CSS1Compat") ? n.html : n.body;
            var l = {x: a.pageX || a.clientX + n.scrollLeft, y: a.pageY || a.clientY + n.scrollTop};
            var c = {x: (a.pageX) ? a.pageX - h.pageXOffset : a.clientX, y: (a.pageY) ? a.pageY - h.pageYOffset : a.clientY};
            if (m.match(/DOMMouseScroll|mousewheel/)) {
                var k = (a.wheelDelta) ? a.wheelDelta / 120 : -(a.detail || 0) / 3
            }
            var g = (a.which == 3) || (a.button == 2);
            var o = null;
            if (m.match(/over|out/)) {
                switch (m) {
                    case"mouseover":
                        o = a.relatedTarget || a.fromElement;
                        break;
                    case"mouseout":
                        o = a.relatedTarget || a.toElement
                }
                if (!(function () {
                    while (o && o.nodeType == 3) {
                        o = o.parentNode
                    }
                    return true
                }).create({attempt: Browser.Engine.gecko})()) {
                    o = false
                }
            }
        }
    }
    return $extend(this, {event: a, type: m, page: l, client: c, rightClick: g, wheel: k, relatedTarget: o, target: j, code: b, key: p, shift: a.shiftKey, control: a.ctrlKey, alt: a.altKey, meta: a.metaKey})
}});
Event.Keys = new Hash({enter: 13, up: 38, down: 40, left: 37, right: 39, esc: 27, space: 32, backspace: 8, tab: 9, "delete": 46});
Event.implement({stop: function () {
    return this.stopPropagation().preventDefault()
}, stopPropagation: function () {
    if (this.event.stopPropagation) {
        this.event.stopPropagation()
    } else {
        this.event.cancelBubble = true
    }
    return this
}, preventDefault: function () {
    if (this.event.preventDefault) {
        this.event.preventDefault()
    } else {
        this.event.returnValue = false
    }
    return this
}});
var Class = new Native({name: "Class", initialize: function (b) {
    b = b || {};
    var a = function () {
        for (var g in this) {
            if ($type(this[g]) != "function") {
                this[g] = $unlink(this[g])
            }
        }
        this.constructor = a;
        if (Class.prototyping) {
            return this
        }
        var f = (this.initialize) ? this.initialize.apply(this, arguments) : this;
        if (this.options && this.options.initialize) {
            this.options.initialize.call(this)
        }
        return f
    };
    for (var c in Class.Mutators) {
        if (!b[c]) {
            continue
        }
        b = Class.Mutators[c](b, b[c]);
        delete b[c]
    }
    $extend(a, this);
    a.constructor = Class;
    a.prototype = b;
    return a
}});
Class.Mutators = {Extends: function (c, a) {
    Class.prototyping = a.prototype;
    var b = new a;
    delete b.parent;
    b = Class.inherit(b, c);
    delete Class.prototyping;
    return b
}, Implements: function (a, b) {
    $splat(b).each(function (c) {
        Class.prototying = c;
        $extend(a, ($type(c) == "class") ? new c : c);
        delete Class.prototyping
    });
    return a
}};
Class.extend({inherit: function (b, g) {
    var a = arguments.callee.caller;
    for (var f in g) {
        var c = g[f];
        var j = b[f];
        var h = $type(c);
        if (j && h == "function") {
            if (c != j) {
                if (a) {
                    c.__parent = j;
                    b[f] = c
                } else {
                    Class.override(b, f, c)
                }
            }
        } else {
            if (h == "object") {
                b[f] = $merge(j, c)
            } else {
                b[f] = c
            }
        }
    }
    if (a) {
        b.parent = function () {
            return arguments.callee.caller.__parent.apply(this, arguments)
        }
    }
    return b
}, override: function (b, a, g) {
    var f = Class.prototyping;
    if (f && b[a] != f[a]) {
        f = null
    }
    var c = function () {
        var h = this.parent;
        this.parent = f ? f[a] : b[a];
        var j = g.apply(this, arguments);
        this.parent = h;
        return j
    };
    b[a] = c
}});
Class.implement({implement: function () {
    var a = this.prototype;
    $each(arguments, function (b) {
        Class.inherit(a, b)
    });
    return this
}});
var Chain = new Class({$chain: [], chain: function () {
    this.$chain.extend(Array.flatten(arguments));
    return this
}, callChain: function () {
    return(this.$chain.length) ? this.$chain.shift().apply(this, arguments) : false
}, clearChain: function () {
    this.$chain.empty();
    return this
}});
var Events = new Class({$events: {}, addEvent: function (c, b, a) {
    c = Events.removeOn(c);
    if (b != $empty) {
        this.$events[c] = this.$events[c] || [];
        this.$events[c].include(b);
        if (a) {
            b.internal = true
        }
    }
    return this
}, addEvents: function (a) {
    for (var b in a) {
        this.addEvent(b, a[b])
    }
    return this
}, fireEvent: function (c, b, a) {
    c = Events.removeOn(c);
    if (!this.$events || !this.$events[c]) {
        return this
    }
    this.$events[c].each(function (f) {
        f.create({bind: this, delay: a, "arguments": b})()
    }, this);
    return this
}, removeEvent: function (b, a) {
    b = Events.removeOn(b);
    if (!this.$events[b]) {
        return this
    }
    if (!a.internal) {
        this.$events[b].erase(a)
    }
    return this
}, removeEvents: function (c) {
    if ($type(c) == "object") {
        for (var f in c) {
            this.removeEvent(f, c[f])
        }
        return this
    }
    if (c) {
        c = Events.removeOn(c)
    }
    for (var f in this.$events) {
        if (c && c != f) {
            continue
        }
        var b = this.$events[f];
        for (var a = b.length; a--; a) {
            this.removeEvent(f, b[a])
        }
    }
    return this
}});
Events.removeOn = function (a) {
    return a.replace(/^on([A-Z])/, function (b, c) {
        return c.toLowerCase()
    })
};
var Options = new Class({setOptions: function () {
    this.options = $merge.run([this.options].extend(arguments));
    if (!this.addEvent) {
        return this
    }
    for (var a in this.options) {
        if ($type(this.options[a]) != "function" || !(/^on[A-Z]/).test(a)) {
            continue
        }
        this.addEvent(a, this.options[a]);
        delete this.options[a]
    }
    return this
}});
var Element = new Native({name: "Element", legacy: window.Element, initialize: function (a, b) {
    var c = Element.Constructors.get(a);
    if (c) {
        return c(b)
    }
    if (typeof a == "string") {
        return document.newElement(a, b)
    }
    return $(a).set(b)
}, afterImplement: function (a, b) {
    Element.Prototype[a] = b;
    if (Array[a]) {
        return
    }
    Elements.implement(a, function () {
        var c = [], k = true;
        for (var g = 0, f = this.length; g < f; g++) {
            var h = this[g][a].apply(this[g], arguments);
            c.push(h);
            if (k) {
                k = ($type(h) == "element")
            }
        }
        return(k) ? new Elements(c) : c
    })
}});
Element.Prototype = {$family: {name: "element"}};
Element.Constructors = new Hash;
var IFrame = new Native({name: "IFrame", generics: false, initialize: function () {
    var g = Array.link(arguments, {properties: Object.type, iframe: $defined});
    var c = g.properties || {};
    var b = $(g.iframe) || false;
    var f = c.onload || $empty;
    delete c.onload;
    c.id = c.name = $pick(c.id, c.name, b.id, b.name, "IFrame_" + $time());
    b = new Element(b || "iframe", c);
    var a = function () {
        var h = $try(function () {
            return b.contentWindow.location.host
        });
        if (h && h == window.location.host) {
            var j = new Window(b.contentWindow);
            new Document(b.contentWindow.document);
            $extend(j.Element.prototype, Element.Prototype)
        }
        f.call(b.contentWindow, b.contentWindow.document)
    };
    (window.frames[c.id]) ? a() : b.addListener("load", a);
    return b
}});
var Elements = new Native({initialize: function (h, b) {
    b = $extend({ddup: true, cash: true}, b);
    h = h || [];
    if (b.ddup || b.cash) {
        var j = {}, g = [];
        for (var c = 0, a = h.length; c < a; c++) {
            var f = $.element(h[c], !b.cash);
            if (b.ddup) {
                if (j[f.uid]) {
                    continue
                }
                j[f.uid] = true
            }
            g.push(f)
        }
        h = g
    }
    return(b.cash) ? $extend(h, this) : h
}});
Elements.implement({filter: function (a, b) {
    if (!a) {
        return this
    }
    return new Elements(Array.filter(this, (typeof a == "string") ? function (c) {
        return c.match(a)
    } : a, b))
}});
Document.implement({newElement: function (a, b) {
    if (Browser.Engine.trident && !Browser.Engine.trident7 && b) {
        ["name", "type", "checked"].each(function (c) {
            if (!b[c]) {
                return
            }
            a += " " + c + '="' + b[c] + '"';
            if (c != "checked") {
                delete b[c]
            }
        });
        a = "<" + a + ">"
    }
    return $.element(this.createElement(a)).set(b)
}, newTextNode: function (a) {
    return this.createTextNode(a)
}, getDocument: function () {
    return this
}, getWindow: function () {
    return this.window
}});
Window.implement({$: function (b, c) {
    if (b && b.$family && b.uid) {
        return b
    }
    var a = $type(b);
    return($[a]) ? $[a](b, c, this.document) : null
}, $$: function (a) {
    if (arguments.length == 1 && typeof a == "string") {
        return this.document.getElements(a)
    }
    var h = [];
    var c = Array.flatten(arguments);
    for (var f = 0, b = c.length; f < b; f++) {
        var g = c[f];
        switch ($type(g)) {
            case"element":
                h.push(g);
                break;
            case"string":
                h.extend(this.document.getElements(g, true))
        }
    }
    return new Elements(h)
}, getDocument: function () {
    return this.document
}, getWindow: function () {
    return this
}});
$.string = function (c, b, a) {
    c = a.getElementById(c);
    return(c) ? $.element(c, b) : null
};
$.element = function (a, f) {
    $uid(a);
    if (!f && !a.$family && !(/^object|embed$/i).test(a.tagName)) {
        var b = Element.Prototype;
        for (var c in b) {
            a[c] = b[c]
        }
    }
    return a
};
$.object = function (b, c, a) {
    if (b.toElement) {
        return $.element(b.toElement(a), c)
    }
    return null
};
$.textnode = $.whitespace = $.window = $.document = $arguments(0);
Native.implement([Element, Document], {getElement: function (a, b) {
    return $(this.getElements(a, true)[0] || null, b)
}, getElements: function (a, f) {
    a = a.split(",");
    var c = [];
    var b = (a.length > 1);
    a.each(function (g) {
        var h = this.getElementsByTagName(g.trim());
        (b) ? c.extend(h) : c = h
    }, this);
    return new Elements(c, {ddup: b, cash: !f})
}});
(function () {
    var k = {}, h = {};
    var l = {input: "checked", option: "selected", textarea: (Browser.Engine.webkit && Browser.Engine.version < 420) ? "innerHTML" : "value"};
    var c = function (o) {
        return(h[o] || (h[o] = {}))
    };
    var j = function (r, o) {
        if (!r) {
            return
        }
        var q = r.uid;
        if (Browser.Engine.trident) {
            if (r.clearAttributes) {
                var t = o && r.cloneNode(false);
                r.clearAttributes();
                if (t) {
                    r.mergeAttributes(t)
                }
            } else {
                if (r.removeEvents) {
                    r.removeEvents()
                }
            }
            if ((/object/i).test(r.tagName)) {
                for (var s in r) {
                    if (typeof r[s] == "function") {
                        r[s] = $empty
                    }
                }
                Element.dispose(r)
            }
        }
        if (!q) {
            return
        }
        k[q] = h[q] = null
    };
    var f = function () {
        Hash.each(k, j);
        if (Browser.Engine.trident) {
            $A(document.getElementsByTagName("object")).each(j)
        }
        if (window.CollectGarbage) {
            CollectGarbage()
        }
        k = h = null
    };
    var m = function (q, o, v, p, s, u) {
        var r = q[v || o];
        var t = [];
        while (r) {
            if (r.nodeType == 1 && (!p || Element.match(r, p))) {
                if (!s) {
                    return $(r, u)
                }
                t.push(r)
            }
            r = r[o]
        }
        return(s) ? new Elements(t, {ddup: false, cash: !u}) : null
    };
    var g = {html: "innerHTML", "class": "className", "for": "htmlFor", text: (Browser.Engine.trident || (Browser.Engine.webkit && Browser.Engine.version < 420)) ? "innerText" : "textContent"};
    var b = ["compact", "nowrap", "ismap", "declare", "noshade", "checked", "disabled", "readonly", "multiple", "selected", "noresize", "defer"];
    var n = ["value", "accessKey", "cellPadding", "cellSpacing", "colSpan", "frameBorder", "maxLength", "readOnly", "rowSpan", "tabIndex", "useMap"];
    Hash.extend(g, b.associate(b));
    Hash.extend(g, n.associate(n.map(String.toLowerCase)));
    var a = {before: function (p, o) {
        if (o.parentNode) {
            o.parentNode.insertBefore(p, o)
        }
    }, after: function (p, o) {
        if (!o.parentNode) {
            return
        }
        var q = o.nextSibling;
        (q) ? o.parentNode.insertBefore(p, q) : o.parentNode.appendChild(p)
    }, bottom: function (p, o) {
        o.appendChild(p)
    }, top: function (p, o) {
        var q = o.firstChild;
        (q) ? o.insertBefore(p, q) : o.appendChild(p)
    }};
    a.inside = a.bottom;
    Hash.each(a, function (o, p) {
        p = p.capitalize();
        Element.implement("inject" + p, function (q) {
            o(this, $(q, true));
            return this
        });
        Element.implement("grab" + p, function (q) {
            o($(q, true), this);
            return this
        })
    });
    Element.implement({set: function (s, q) {
        switch ($type(s)) {
            case"object":
                for (var r in s) {
                    this.set(r, s[r])
                }
                break;
            case"string":
                var o = Element.Properties.get(s);
                (o && o.set) ? o.set.apply(this, Array.slice(arguments, 1)) : this.setProperty(s, q)
        }
        return this
    }, get: function (p) {
        var o = Element.Properties.get(p);
        return(o && o.get) ? o.get.apply(this, Array.slice(arguments, 1)) : this.getProperty(p)
    }, erase: function (p) {
        var o = Element.Properties.get(p);
        (o && o.erase) ? o.erase.apply(this) : this.removeProperty(p);
        return this
    }, setProperty: function (p, q) {
        var o = g[p];
        if (q == undefined) {
            return this.removeProperty(p)
        }
        if (o && b[p]) {
            q = !!q
        }
        (o) ? this[o] = q : this.setAttribute(p, "" + q);
        return this
    }, setProperties: function (o) {
        for (var p in o) {
            this.setProperty(p, o[p])
        }
        return this
    }, getProperty: function (p) {
        var o = g[p];
        var q = (o) ? this[o] : this.getAttribute(p, 2);
        return(b[p]) ? !!q : (o) ? q : q || null
    }, getProperties: function () {
        var o = $A(arguments);
        return o.map(this.getProperty, this).associate(o)
    }, removeProperty: function (p) {
        var o = g[p];
        (o) ? this[o] = (o && b[p]) ? false : "" : this.removeAttribute(p);
        return this
    }, removeProperties: function () {
        Array.each(arguments, this.removeProperty, this);
        return this
    }, hasClass: function (o) {
        return this.className.contains(o, " ")
    }, addClass: function (o) {
        if (!this.hasClass(o)) {
            this.className = (this.className + " " + o).clean()
        }
        return this
    }, removeClass: function (o) {
        this.className = this.className.replace(new RegExp("(^|\\s)" + o + "(?:\\s|$)"), "$1");
        return this
    }, toggleClass: function (o) {
        return this.hasClass(o) ? this.removeClass(o) : this.addClass(o)
    }, adopt: function () {
        Array.flatten(arguments).each(function (o) {
            o = $(o, true);
            if (o) {
                this.appendChild(o)
            }
        }, this);
        return this
    }, appendText: function (p, o) {
        return this.grab(this.getDocument().newTextNode(p), o)
    }, grab: function (p, o) {
        a[o || "bottom"]($(p, true), this);
        return this
    }, inject: function (p, o) {
        a[o || "bottom"](this, $(p, true));
        return this
    }, replaces: function (o) {
        o = $(o, true);
        o.parentNode.replaceChild(this, o);
        return this
    }, wraps: function (p, o) {
        p = $(p, true);
        return this.replaces(p).grab(p, o)
    }, getPrevious: function (o, p) {
        return m(this, "previousSibling", null, o, false, p)
    }, getAllPrevious: function (o, p) {
        return m(this, "previousSibling", null, o, true, p)
    }, getNext: function (o, p) {
        return m(this, "nextSibling", null, o, false, p)
    }, getAllNext: function (o, p) {
        return m(this, "nextSibling", null, o, true, p)
    }, getFirst: function (o, p) {
        return m(this, "nextSibling", "firstChild", o, false, p)
    }, getLast: function (o, p) {
        return m(this, "previousSibling", "lastChild", o, false, p)
    }, getParent: function (o, p) {
        return m(this, "parentNode", null, o, false, p)
    }, getParents: function (o, p) {
        return m(this, "parentNode", null, o, true, p)
    }, getChildren: function (o, p) {
        return m(this, "nextSibling", "firstChild", o, true, p)
    }, getWindow: function () {
        return this.ownerDocument.window
    }, getDocument: function () {
        return this.ownerDocument
    }, getElementById: function (r, q) {
        var p = this.ownerDocument.getElementById(r);
        if (!p) {
            return null
        }
        for (var o = p.parentNode; o != this; o = o.parentNode) {
            if (!o) {
                return null
            }
        }
        return $.element(p, q)
    }, getSelected: function () {
        return new Elements($A(this.options).filter(function (o) {
            return o.selected
        }))
    }, getComputedStyle: function (p) {
        if (this.currentStyle) {
            return this.currentStyle[p.camelCase()]
        }
        var o = (this.getDocument().defaultView) ? this.getDocument().defaultView.getComputedStyle(this, null) : null;
        return(o) ? o.getPropertyValue([p.hyphenate()]) : null
    }, toQueryString: function () {
        var o = [];
        this.getElements("input, select, textarea", true).each(function (p) {
            if (!p.name || p.disabled) {
                return
            }
            var q = (p.tagName.toLowerCase() == "select") ? Element.getSelected(p).map(function (r) {
                return r.value
            }) : ((p.type == "radio" || p.type == "checkbox") && !p.checked) ? null : p.value;
            $splat(q).each(function (r) {
                if (typeof r != "undefined") {
                    o.push(p.name + "=" + encodeURIComponent(r))
                }
            })
        });
        return o.join("&")
    }, clone: function (r, o) {
        r = r !== false;
        var u = this.cloneNode(r);
        var q = function (y, x) {
            if (!o) {
                y.removeAttribute("id")
            }
            if (Browser.Engine.trident) {
                y.clearAttributes();
                y.mergeAttributes(x);
                y.removeAttribute("uid");
                if (y.options) {
                    var z = y.options, v = x.options;
                    for (var w = z.length; w--;) {
                        z[w].selected = v[w].selected
                    }
                }
            }
            var A = l[x.tagName.toLowerCase()];
            if (A && x[A]) {
                y[A] = x[A]
            }
        };
        if (r) {
            var s = u.getElementsByTagName("*"), t = this.getElementsByTagName("*");
            for (var p = s.length; p--;) {
                q(s[p], t[p])
            }
        }
        q(u, this);
        return $(u)
    }, destroy: function () {
        Element.empty(this);
        Element.dispose(this);
        j(this, true);
        return null
    }, empty: function () {
        $A(this.childNodes).each(function (q) {
            Element.destroy(q)
        });
        if (/iframe/i.test(this.tagName) && this.contentWindow) {
            try {
                var p = this.contentWindow.document;
                if (p) {
                    p.write("");
                    p.close()
                }
            } catch (o) {
            }
        }
        return this
    }, dispose: function () {
        return(this.parentNode) ? this.parentNode.removeChild(this) : this
    }, hasChild: function (o) {
        o = $(o, true);
        if (!o) {
            return false
        }
        if (Browser.Engine.webkit && Browser.Engine.version < 420) {
            return $A(this.getElementsByTagName(o.tagName)).contains(o)
        }
        return(this.contains) ? (this != o && this.contains(o)) : !!(this.compareDocumentPosition(o) & 16)
    }, match: function (o) {
        return(!o || (o == this) || (Element.get(this, "tag") == o))
    }});
    Native.implement([Element, Window, Document], {addListener: function (r, q) {
        if (r == "unload") {
            var o = q, p = this;
            q = function () {
                p.removeListener("unload", q);
                o()
            }
        } else {
            k[this.uid] = this
        }
        if (this.addEventListener) {
            this.addEventListener(r, q, false)
        } else {
            this.attachEvent("on" + r, q)
        }
        return this
    }, removeListener: function (p, o) {
        if (this.removeEventListener) {
            this.removeEventListener(p, o, false)
        } else {
            this.detachEvent("on" + p, o)
        }
        return this
    }, retrieve: function (p, o) {
        var r = c(this.uid), q = r[p];
        if (o != undefined && q == undefined) {
            q = r[p] = o
        }
        return $pick(q)
    }, store: function (p, o) {
        var q = c(this.uid);
        q[p] = o;
        return this
    }, eliminate: function (o) {
        var p = c(this.uid);
        delete p[o];
        return this
    }});
    window.addListener("unload", f)
})();
Element.Properties = new Hash;
Element.Properties.style = {set: function (a) {
    this.style.cssText = a
}, get: function () {
    return this.style.cssText
}, erase: function () {
    this.style.cssText = ""
}};
Element.Properties.tag = {get: function () {
    return this.tagName.toLowerCase()
}};
Element.Properties.html = (function () {
    var c = document.createElement("div");
    var a = {table: [1, "<table>", "</table>"], select: [1, "<select>", "</select>"], tbody: [2, "<table><tbody>", "</tbody></table>"], tr: [3, "<table><tbody><tr>", "</tr></tbody></table>"]};
    a.thead = a.tfoot = a.tbody;
    var b = {set: function () {
        var g = Array.flatten(arguments).join("");
        var h = Browser.Engine.trident && a[this.get("tag")];
        if (h) {
            var j = c;
            j.innerHTML = h[1] + g + h[2];
            for (var f = h[0]; f--;) {
                j = j.firstChild
            }
            this.empty().adopt(j.childNodes)
        } else {
            this.innerHTML = g
        }
    }};
    b.erase = b.set;
    return b
})();
if (Browser.Engine.webkit && Browser.Engine.version < 420) {
    Element.Properties.text = {get: function () {
        if (this.innerText) {
            return this.innerText
        }
        var a = this.ownerDocument.newElement("div", {html: this.innerHTML}).inject(this.ownerDocument.body);
        var b = a.innerText;
        a.destroy();
        return b
    }}
}
Element.Properties.events = {set: function (a) {
    this.addEvents(a)
}};
Native.implement([Element, Window, Document], {addEvent: function (g, j) {
    var k = this.retrieve("events", {});
    k[g] = k[g] || {keys: [], values: []};
    if (k[g].keys.contains(j)) {
        return this
    }
    k[g].keys.push(j);
    var h = g, a = Element.Events.get(g), c = j, l = this;
    if (a) {
        if (a.onAdd) {
            a.onAdd.call(this, j)
        }
        if (a.condition) {
            c = function (m) {
                if (a.condition.call(this, m)) {
                    return j.call(this, m)
                }
                return true
            }
        }
        h = a.base || h
    }
    var f = function () {
        return j.call(l)
    };
    var b = Element.NativeEvents[h];
    if (b) {
        if (b == 2) {
            f = function (m) {
                m = new Event(m, l.getWindow());
                if (c.call(l, m) === false) {
                    m.stop()
                }
            }
        }
        this.addListener(h, f)
    }
    k[g].values.push(f);
    return this
}, removeEvent: function (c, b) {
    var a = this.retrieve("events");
    if (!a || !a[c]) {
        return this
    }
    var h = a[c].keys.indexOf(b);
    if (h == -1) {
        return this
    }
    a[c].keys.splice(h, 1);
    var g = a[c].values.splice(h, 1)[0];
    var f = Element.Events.get(c);
    if (f) {
        if (f.onRemove) {
            f.onRemove.call(this, b)
        }
        c = f.base || c
    }
    return(Element.NativeEvents[c]) ? this.removeListener(c, g) : this
}, addEvents: function (a) {
    for (var b in a) {
        this.addEvent(b, a[b])
    }
    return this
}, removeEvents: function (a) {
    if ($type(a) == "object") {
        for (var c in a) {
            this.removeEvent(c, a[c])
        }
        return this
    }
    var b = this.retrieve("events");
    if (!b) {
        return this
    }
    if (!a) {
        for (var c in b) {
            this.removeEvents(c)
        }
        this.eliminate("events")
    } else {
        if (b[a]) {
            while (b[a].keys[0]) {
                this.removeEvent(a, b[a].keys[0])
            }
            b[a] = null
        }
    }
    return this
}, fireEvent: function (f, b, a) {
    var c = this.retrieve("events");
    if (!c || !c[f]) {
        return this
    }
    c[f].keys.each(function (g) {
        g.create({bind: this, delay: a, "arguments": b})()
    }, this);
    return this
}, cloneEvents: function (f, a) {
    f = $(f);
    var c = f.retrieve("events");
    if (!c) {
        return this
    }
    if (!a) {
        for (var b in c) {
            this.cloneEvents(f, b)
        }
    } else {
        if (c[a]) {
            c[a].keys.each(function (g) {
                this.addEvent(a, g)
            }, this)
        }
    }
    return this
}});
Element.NativeEvents = {click: 2, dblclick: 2, mouseup: 2, mousedown: 2, contextmenu: 2, mousewheel: 2, DOMMouseScroll: 2, mouseover: 2, mouseout: 2, mousemove: 2, selectstart: 2, selectend: 2, keydown: 2, keypress: 2, keyup: 2, focus: 2, blur: 2, change: 2, reset: 2, select: 2, submit: 2, load: 1, unload: 1, beforeunload: 2, resize: 1, move: 1, DOMContentLoaded: 1, readystatechange: 1, error: 1, abort: 1, scroll: 1};
(function () {
    var a = function (b) {
        var c = b.relatedTarget;
        if (c == undefined) {
            return true
        }
        if (c === false) {
            return false
        }
        return($type(this) != "document" && c != this && c.prefix != "xul" && !this.hasChild(c))
    };
    Element.Events = new Hash({mouseenter: {base: "mouseover", condition: a}, mouseleave: {base: "mouseout", condition: a}, mousewheel: {base: (Browser.Engine.gecko) ? "DOMMouseScroll" : "mousewheel"}})
})();
Element.Properties.styles = {set: function (a) {
    this.setStyles(a)
}};
Element.Properties.opacity = {set: function (a, b) {
    if (!b) {
        if (a == 0) {
            if (this.style.visibility != "hidden") {
                this.style.visibility = "hidden"
            }
        } else {
            if (this.style.visibility != "visible") {
                this.style.visibility = "visible"
            }
        }
    }
    if (!this.currentStyle || !this.currentStyle.hasLayout) {
        this.style.zoom = 1
    }
    if (Browser.Engine.trident) {
        this.style.filter = (a == 1) ? "" : "alpha(opacity=" + a * 100 + ")"
    }
    this.style.opacity = a;
    this.store("opacity", a)
}, get: function () {
    return this.retrieve("opacity", 1)
}};
Element.implement({setOpacity: function (a) {
    return this.set("opacity", a, true)
}, getOpacity: function () {
    return this.get("opacity")
}, setStyle: function (b, a) {
    switch (b) {
        case"opacity":
            return this.set("opacity", parseFloat(a));
        case"float":
            b = (Browser.Engine.trident) ? "styleFloat" : "cssFloat"
    }
    b = b.camelCase();
    if ($type(a) != "string") {
        var c = (Element.Styles.get(b) || "@").split(" ");
        a = $splat(a).map(function (g, f) {
            if (!c[f]) {
                return""
            }
            return($type(g) == "number") ? c[f].replace("@", Math.round(g)) : g
        }).join(" ")
    } else {
        if (a == String(Number(a))) {
            a = Math.round(a)
        }
    }
    this.style[b] = a;
    return this
}, getStyle: function (j) {
    switch (j) {
        case"opacity":
            return this.get("opacity");
        case"float":
            j = (Browser.Engine.trident) ? "styleFloat" : "cssFloat"
    }
    j = j.camelCase();
    var a = this.style[j];
    if (!$chk(a)) {
        a = [];
        for (var h in Element.ShortStyles) {
            if (j != h) {
                continue
            }
            for (var g in Element.ShortStyles[h]) {
                a.push(this.getStyle(g))
            }
            return a.join(" ")
        }
        a = this.getComputedStyle(j)
    }
    if (a) {
        a = String(a);
        var c = a.match(/rgba?\([\d\s,]+\)/);
        if (c) {
            a = a.replace(c[0], c[0].rgbToHex())
        }
    }
    if (Browser.Engine.presto || (Browser.Engine.trident && !$chk(parseInt(a)))) {
        if (j.test(/^(height|width)$/)) {
            var b = (j == "width") ? ["left", "right"] : ["top", "bottom"], f = 0;
            b.each(function (k) {
                f += this.getStyle("border-" + k + "-width").toInt() + this.getStyle("padding-" + k).toInt()
            }, this);
            return this["offset" + j.capitalize()] - f + "px"
        }
        if ((Browser.Engine.presto) && String(a).test("px")) {
            return a
        }
        if (j.test(/(border(.+)Width|margin|padding)/)) {
            return"0px"
        }
    }
    return a
}, setStyles: function (b) {
    for (var a in b) {
        this.setStyle(a, b[a])
    }
    return this
}, getStyles: function () {
    var a = {};
    Array.each(arguments, function (b) {
        a[b] = this.getStyle(b)
    }, this);
    return a
}});
Element.Styles = new Hash({left: "@px", top: "@px", bottom: "@px", right: "@px", width: "@px", height: "@px", maxWidth: "@px", maxHeight: "@px", minWidth: "@px", minHeight: "@px", backgroundColor: "rgb(@, @, @)", backgroundPosition: "@px @px", color: "rgb(@, @, @)", fontSize: "@px", letterSpacing: "@px", lineHeight: "@px", clip: "rect(@px @px @px @px)", margin: "@px @px @px @px", padding: "@px @px @px @px", border: "@px @ rgb(@, @, @) @px @ rgb(@, @, @) @px @ rgb(@, @, @)", borderWidth: "@px @px @px @px", borderStyle: "@ @ @ @", borderColor: "rgb(@, @, @) rgb(@, @, @) rgb(@, @, @) rgb(@, @, @)", zIndex: "@", zoom: "@", fontWeight: "@", textIndent: "@px", opacity: "@"});
Element.ShortStyles = {margin: {}, padding: {}, border: {}, borderWidth: {}, borderStyle: {}, borderColor: {}};
["Top", "Right", "Bottom", "Left"].each(function (j) {
    var h = Element.ShortStyles;
    var b = Element.Styles;
    ["margin", "padding"].each(function (k) {
        var l = k + j;
        h[k][l] = b[l] = "@px"
    });
    var g = "border" + j;
    h.border[g] = b[g] = "@px @ rgb(@, @, @)";
    var f = g + "Width", a = g + "Style", c = g + "Color";
    h[g] = {};
    h.borderWidth[f] = h[g][f] = b[f] = "@px";
    h.borderStyle[a] = h[g][a] = b[a] = "@";
    h.borderColor[c] = h[g][c] = b[c] = "rgb(@, @, @)"
});
(function () {
    Element.implement({scrollTo: function (k, l) {
        if (b(this)) {
            this.getWindow().scrollTo(k, l)
        } else {
            this.scrollLeft = k;
            this.scrollTop = l
        }
        return this
    }, getSize: function () {
        if (b(this)) {
            return this.getWindow().getSize()
        }
        return{x: this.offsetWidth, y: this.offsetHeight}
    }, getScrollSize: function () {
        if (b(this)) {
            return this.getWindow().getScrollSize()
        }
        return{x: this.scrollWidth, y: this.scrollHeight}
    }, getScroll: function () {
        if (b(this)) {
            return this.getWindow().getScroll()
        }
        return{x: this.scrollLeft, y: this.scrollTop}
    }, getScrolls: function () {
        var l = this, k = {x: 0, y: 0};
        while (l && !b(l)) {
            k.x += l.scrollLeft;
            k.y += l.scrollTop;
            l = l.parentNode
        }
        return k
    }, getOffsetParent: function () {
        var k = this;
        if (b(k)) {
            return null
        }
        if (!Browser.Engine.trident) {
            return k.offsetParent
        }
        while ((k = k.parentNode) && !b(k)) {
            if (f(k, "position") != "static") {
                return k
            }
        }
        return null
    }, getOffsets: function () {
        if (Browser.Engine.trident) {
            var o = this.getBoundingClientRect(), m = this.getDocument().documentElement;
            return{x: o.left + m.scrollLeft - m.clientLeft, y: o.top + m.scrollTop - m.clientTop}
        }
        var l = this, k = {x: 0, y: 0};
        if (b(this)) {
            return k
        }
        while (l && !b(l)) {
            k.x += l.offsetLeft;
            k.y += l.offsetTop;
            if (Browser.Engine.gecko) {
                if (!h(l)) {
                    k.x += c(l);
                    k.y += j(l)
                }
                var n = l.parentNode;
                if (n && f(n, "overflow") != "visible") {
                    k.x += c(n);
                    k.y += j(n)
                }
            } else {
                if (l != this && Browser.Engine.webkit) {
                    k.x += c(l);
                    k.y += j(l)
                }
            }
            l = l.offsetParent
        }
        if (Browser.Engine.gecko && !h(this)) {
            k.x -= c(this);
            k.y -= j(this)
        }
        return k
    }, getPosition: function (n) {
        if (b(this)) {
            return{x: 0, y: 0}
        }
        var o = this.getOffsets(), l = this.getScrolls();
        var k = {x: o.x - l.x, y: o.y - l.y};
        var m = (n && (n = $(n))) ? n.getPosition() : {x: 0, y: 0};
        return{x: k.x - m.x, y: k.y - m.y}
    }, getCoordinates: function (m) {
        if (b(this)) {
            return this.getWindow().getCoordinates()
        }
        var k = this.getPosition(m), l = this.getSize();
        var n = {left: k.x, top: k.y, width: l.x, height: l.y};
        n.right = n.left + n.width;
        n.bottom = n.top + n.height;
        return n
    }, computePosition: function (k) {
        return{left: k.x - g(this, "margin-left"), top: k.y - g(this, "margin-top")}
    }, position: function (k) {
        return this.setStyles(this.computePosition(k))
    }});
    Native.implement([Document, Window], {getSize: function () {
        var l = this.getWindow();
        if (Browser.Engine.presto || Browser.Engine.webkit) {
            return{x: l.innerWidth, y: l.innerHeight}
        }
        var k = a(this);
        return{x: k.clientWidth, y: k.clientHeight}
    }, getScroll: function () {
        var l = this.getWindow();
        var k = a(this);
        return{x: l.pageXOffset || k.scrollLeft, y: l.pageYOffset || k.scrollTop}
    }, getScrollSize: function () {
        var l = a(this);
        var k = this.getSize();
        return{x: Math.max(l.scrollWidth, k.x), y: Math.max(l.scrollHeight, k.y)}
    }, getPosition: function () {
        return{x: 0, y: 0}
    }, getCoordinates: function () {
        var k = this.getSize();
        return{top: 0, left: 0, bottom: k.y, right: k.x, height: k.y, width: k.x}
    }});
    var f = Element.getComputedStyle;

    function g(k, l) {
        return f(k, l).toInt() || 0
    }

    function h(k) {
        return f(k, "-moz-box-sizing") == "border-box"
    }

    function j(k) {
        return g(k, "border-top-width")
    }

    function c(k) {
        return g(k, "border-left-width")
    }

    function b(k) {
        return(/^(?:body|html)$/i).test(k.tagName)
    }

    function a(k) {
        var l = k.getDocument();
        return(!l.compatMode || l.compatMode == "CSS1Compat") ? l.html : l.body
    }
})();
Native.implement([Window, Document, Element], {getHeight: function () {
    return this.getSize().y
}, getWidth: function () {
    return this.getSize().x
}, getScrollTop: function () {
    return this.getScroll().y
}, getScrollLeft: function () {
    return this.getScroll().x
}, getScrollHeight: function () {
    return this.getScrollSize().y
}, getScrollWidth: function () {
    return this.getScrollSize().x
}, getTop: function () {
    return this.getPosition().y
}, getLeft: function () {
    return this.getPosition().x
}});
Native.implement([Document, Element], {getElements: function (k, j) {
    k = k.split(",");
    var c, g = {};
    for (var f = 0, b = k.length; f < b; f++) {
        var a = k[f], h = Selectors.Utils.search(this, a, g);
        if (f != 0 && h.item) {
            h = $A(h)
        }
        c = (f == 0) ? h : (c.item) ? $A(c).concat(h) : c.concat(h)
    }
    return new Elements(c, {ddup: (k.length > 1), cash: !j})
}});
Element.implement({match: function (b) {
    if (!b || (b == this)) {
        return true
    }
    var f = Selectors.Utils.parseTagAndID(b);
    var a = f[0], g = f[1];
    if (!Selectors.Filters.byID(this, g) || !Selectors.Filters.byTag(this, a)) {
        return false
    }
    var c = Selectors.Utils.parseSelector(b);
    return(c) ? Selectors.Utils.filter(this, c, {}) : true
}});
var Selectors = {Cache: {nth: {}, parsed: {}}};
Selectors.RegExps = {id: (/#([\w-]+)/), tag: (/^(\w+|\*)/), quick: (/^(\w+|\*)$/), splitter: (/\s*([+>~\s])\s*([a-zA-Z#.*:\[])/g), combined: (/\.([\w-]+)|\[(\w+)(?:([!*^$~|]?=)(["']?)([^\4]*?)\4)?\]|:([\w-]+)(?:\(["']?(.*?)?["']?\)|$)/g)};
Selectors.Utils = {chk: function (b, c) {
    if (!c) {
        return true
    }
    var a = $uid(b);
    if (!c[a]) {
        return c[a] = true
    }
    return false
}, parseNthArgument: function (k) {
    if (Selectors.Cache.nth[k]) {
        return Selectors.Cache.nth[k]
    }
    var g = k.match(/^([+-]?\d*)?([a-z]+)?([+-]?\d*)?$/);
    if (!g) {
        return false
    }
    var j = parseInt(g[1]);
    var f = (j || j === 0) ? j : 1;
    var h = g[2] || false;
    var c = parseInt(g[3]) || 0;
    if (f != 0) {
        c--;
        while (c < 1) {
            c += f
        }
        while (c >= f) {
            c -= f
        }
    } else {
        f = c;
        h = "index"
    }
    switch (h) {
        case"n":
            g = {a: f, b: c, special: "n"};
            break;
        case"odd":
            g = {a: 2, b: 0, special: "n"};
            break;
        case"even":
            g = {a: 2, b: 1, special: "n"};
            break;
        case"first":
            g = {a: 0, special: "index"};
            break;
        case"last":
            g = {special: "last-child"};
            break;
        case"only":
            g = {special: "only-child"};
            break;
        default:
            g = {a: (f - 1), special: "index"}
    }
    return Selectors.Cache.nth[k] = g
}, parseSelector: function (g) {
    if (Selectors.Cache.parsed[g]) {
        return Selectors.Cache.parsed[g]
    }
    var f, k = {classes: [], pseudos: [], attributes: []};
    while ((f = Selectors.RegExps.combined.exec(g))) {
        var l = f[1], j = f[2], h = f[3], b = f[5], c = f[6], n = f[7];
        if (l) {
            k.classes.push(l)
        } else {
            if (c) {
                var a = Selectors.Pseudo.get(c);
                if (a) {
                    k.pseudos.push({parser: a, argument: n})
                } else {
                    k.attributes.push({name: c, operator: "=", value: n})
                }
            } else {
                if (j) {
                    k.attributes.push({name: j, operator: h, value: b})
                }
            }
        }
    }
    if (!k.classes.length) {
        delete k.classes
    }
    if (!k.attributes.length) {
        delete k.attributes
    }
    if (!k.pseudos.length) {
        delete k.pseudos
    }
    if (!k.classes && !k.attributes && !k.pseudos) {
        k = null
    }
    return Selectors.Cache.parsed[g] = k
}, parseTagAndID: function (b) {
    var a = b.match(Selectors.RegExps.tag);
    var c = b.match(Selectors.RegExps.id);
    return[(a) ? a[1] : "*", (c) ? c[1] : false]
}, filter: function (h, c, g) {
    var f;
    if (c.classes) {
        for (f = c.classes.length; f--; f) {
            var j = c.classes[f];
            if (!Selectors.Filters.byClass(h, j)) {
                return false
            }
        }
    }
    if (c.attributes) {
        for (f = c.attributes.length; f--; f) {
            var b = c.attributes[f];
            if (!Selectors.Filters.byAttribute(h, b.name, b.operator, b.value)) {
                return false
            }
        }
    }
    if (c.pseudos) {
        for (f = c.pseudos.length; f--; f) {
            var a = c.pseudos[f];
            if (!Selectors.Filters.byPseudo(h, a.parser, a.argument, g)) {
                return false
            }
        }
    }
    return true
}, getByTagAndID: function (b, a, f) {
    if (f) {
        var c = (b.getElementById) ? b.getElementById(f, true) : Element.getElementById(b, f, true);
        return(c && Selectors.Filters.byTag(c, a)) ? [c] : []
    } else {
        return b.getElementsByTagName(a)
    }
}, search: function (q, p, v) {
    var b = [];
    var c = p.trim().replace(Selectors.RegExps.splitter,function (l, k, j) {
        b.push(k);
        return":)" + j
    }).split(":)");
    var r, g, C;
    for (var B = 0, x = c.length; B < x; B++) {
        var A = c[B];
        if (B == 0 && Selectors.RegExps.quick.test(A)) {
            r = q.getElementsByTagName(A);
            continue
        }
        var a = b[B - 1];
        var s = Selectors.Utils.parseTagAndID(A);
        var D = s[0], t = s[1];
        if (B == 0) {
            r = Selectors.Utils.getByTagAndID(q, D, t)
        } else {
            var f = {}, o = [];
            for (var z = 0, y = r.length; z < y; z++) {
                o = Selectors.Getters[a](o, r[z], D, t, f)
            }
            r = o
        }
        var h = Selectors.Utils.parseSelector(A);
        if (h) {
            g = [];
            for (var w = 0, u = r.length; w < u; w++) {
                C = r[w];
                if (Selectors.Utils.filter(C, h, v)) {
                    g.push(C)
                }
            }
            r = g
        }
    }
    return r
}};
Selectors.Getters = {" ": function (k, j, m, a, g) {
    var f = Selectors.Utils.getByTagAndID(j, m, a);
    for (var c = 0, b = f.length; c < b; c++) {
        var h = f[c];
        if (Selectors.Utils.chk(h, g)) {
            k.push(h)
        }
    }
    return k
}, ">": function (k, j, m, a, h) {
    var c = Selectors.Utils.getByTagAndID(j, m, a);
    for (var g = 0, f = c.length; g < f; g++) {
        var b = c[g];
        if (b.parentNode == j && Selectors.Utils.chk(b, h)) {
            k.push(b)
        }
    }
    return k
}, "+": function (c, b, a, g, f) {
    while ((b = b.nextSibling)) {
        if (b.nodeType == 1) {
            if (Selectors.Utils.chk(b, f) && Selectors.Filters.byTag(b, a) && Selectors.Filters.byID(b, g)) {
                c.push(b)
            }
            break
        }
    }
    return c
}, "~": function (c, b, a, g, f) {
    while ((b = b.nextSibling)) {
        if (b.nodeType == 1) {
            if (!Selectors.Utils.chk(b, f)) {
                break
            }
            if (Selectors.Filters.byTag(b, a) && Selectors.Filters.byID(b, g)) {
                c.push(b)
            }
        }
    }
    return c
}};
Selectors.Filters = {byTag: function (b, a) {
    return(a == "*" || (b.tagName && b.tagName.toLowerCase() == a))
}, byID: function (a, b) {
    return(!b || (a.id && a.id == b))
}, byClass: function (b, a) {
    return(b.className && b.className.contains(a, " "))
}, byPseudo: function (a, f, c, b) {
    return f.call(a, c, b)
}, byAttribute: function (c, f, b, g) {
    var a = Element.prototype.getProperty.call(c, f);
    if (!a) {
        return(b == "!=")
    }
    if (!b || g == undefined) {
        return true
    }
    switch (b) {
        case"=":
            return(a == g);
        case"*=":
            return(a.contains(g));
        case"^=":
            return(a.substr(0, g.length) == g);
        case"$=":
            return(a.substr(a.length - g.length) == g);
        case"!=":
            return(a != g);
        case"~=":
            return a.contains(g, " ");
        case"|=":
            return a.contains(g, "-")
    }
    return false
}};
Selectors.Pseudo = new Hash({checked: function () {
    return this.checked
}, empty: function () {
    return !(this.innerText || this.textContent || "").length
}, not: function (a) {
    return !Element.match(this, a)
}, contains: function (a) {
    return(this.innerText || this.textContent || "").contains(a)
}, "first-child": function () {
    return Selectors.Pseudo.index.call(this, 0)
}, "last-child": function () {
    var a = this;
    while ((a = a.nextSibling)) {
        if (a.nodeType == 1) {
            return false
        }
    }
    return true
}, "only-child": function () {
    var b = this;
    while ((b = b.previousSibling)) {
        if (b.nodeType == 1) {
            return false
        }
    }
    var a = this;
    while ((a = a.nextSibling)) {
        if (a.nodeType == 1) {
            return false
        }
    }
    return true
}, "nth-child": function (j, g) {
    j = (j == undefined) ? "n" : j;
    var c = Selectors.Utils.parseNthArgument(j);
    if (c.special != "n") {
        return Selectors.Pseudo[c.special].call(this, c.a, g)
    }
    var h = 0;
    g.positions = g.positions || {};
    var f = $uid(this);
    if (!g.positions[f]) {
        var b = this;
        while ((b = b.previousSibling)) {
            if (b.nodeType != 1) {
                continue
            }
            h++;
            var a = g.positions[$uid(b)];
            if (a != undefined) {
                h = a + h;
                break
            }
        }
        g.positions[f] = h
    }
    return(g.positions[f] % c.a == c.b)
}, index: function (a) {
    var b = this, c = 0;
    while ((b = b.previousSibling)) {
        if (b.nodeType == 1 && ++c > a) {
            return false
        }
    }
    return(c == a)
}, even: function (b, a) {
    return Selectors.Pseudo["nth-child"].call(this, "2n+1", a)
}, odd: function (b, a) {
    return Selectors.Pseudo["nth-child"].call(this, "2n", a)
}});
Element.Events.domready = {onAdd: function (a) {
    if (Browser.loaded) {
        a.call(this)
    }
}};
(function () {
    var b = function () {
        if (Browser.loaded) {
            return
        }
        Browser.loaded = true;
        window.fireEvent("domready");
        document.fireEvent("domready")
    };
    if (Browser.Engine.trident) {
        var a = document.createElement("div");
        (function () {
            ($try(function () {
                a.doScroll("left");
                return $(a).inject(document.body).set("html", "temp").dispose()
            })) ? b() : arguments.callee.delay(50)
        })()
    } else {
        if (Browser.Engine.webkit && Browser.Engine.version < 525) {
            (function () {
                (["loaded", "complete"].contains(document.readyState)) ? b() : arguments.callee.delay(50)
            })()
        } else {
            window.addEvent("load", b);
            document.addEvent("DOMContentLoaded", b)
        }
    }
})();
var JSON = new Hash({$specialChars: {"\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\"}, $replaceChars: function (a) {
    return JSON.$specialChars[a] || "\\u00" + Math.floor(a.charCodeAt() / 16).toString(16) + (a.charCodeAt() % 16).toString(16)
}, encode: function (b) {
    switch ($type(b)) {
        case"string":
            return'"' + b.replace(/[\x00-\x1f\\"]/g, JSON.$replaceChars) + '"';
        case"array":
            return"[" + String(b.map(JSON.encode).filter($defined)) + "]";
        case"object":
        case"hash":
            var a = [];
            Hash.each(b, function (g, f) {
                var c = JSON.encode(g);
                if (c) {
                    a.push(JSON.encode(f) + ":" + c)
                }
            });
            return"{" + a + "}";
        case"number":
        case"boolean":
            return String(b);
        case false:
            return"null"
    }
    return null
}, decode: function (string, secure) {
    if ($type(string) != "string" || !string.length) {
        return null
    }
    if (secure && !(/^[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]*$/).test(string.replace(/\\./g, "@").replace(/"[^"\\\n\r]*"/g, ""))) {
        return null
    }
    return eval("(" + string + ")")
}});
Native.implement([Hash, Array, String, Number], {toJSON: function () {
    return JSON.encode(this)
}});
var Cookie = new Class({Implements: Options, options: {path: false, domain: false, duration: false, secure: false, document: document}, initialize: function (b, a) {
    this.key = b;
    this.setOptions(a)
}, write: function (b) {
    b = encodeURIComponent(b);
    if (this.options.domain) {
        b += "; domain=" + this.options.domain
    }
    if (this.options.path) {
        b += "; path=" + this.options.path
    }
    if (this.options.duration) {
        var a = new Date();
        a.setTime(a.getTime() + this.options.duration * 24 * 60 * 60 * 1000);
        b += "; expires=" + a.toGMTString()
    }
    if (this.options.secure) {
        b += "; secure"
    }
    this.options.document.cookie = this.key + "=" + b;
    return this
}, read: function () {
    var a = this.options.document.cookie.match("(?:^|;)\\s*" + this.key.escapeRegExp() + "=([^;]*)");
    return(a) ? decodeURIComponent(a[1]) : null
}, dispose: function () {
    new Cookie(this.key, $merge(this.options, {duration: -1})).write("");
    return this
}});
Cookie.write = function (b, c, a) {
    return new Cookie(b, a).write(c)
};
Cookie.read = function (a) {
    return new Cookie(a).read()
};
Cookie.dispose = function (b, a) {
    return new Cookie(b, a).dispose()
};
var Swiff = new Class({Implements: [Options], options: {id: null, height: 1, width: 1, container: null, properties: {}, params: {quality: "high", allowScriptAccess: "always", wMode: "transparent", swLiveConnect: true}, callBacks: {}, vars: {}}, toElement: function () {
    return this.object
}, initialize: function (o, p) {
    this.instance = "Swiff_" + $time();
    this.setOptions(p);
    p = this.options;
    var b = this.id = p.id || this.instance;
    var a = $(p.container);
    Swiff.CallBacks[this.instance] = {};
    var g = p.params, j = p.vars, h = p.callBacks;
    var k = $extend({height: p.height, width: p.width}, p.properties);
    var n = this;
    for (var f in h) {
        Swiff.CallBacks[this.instance][f] = (function (q) {
            return function () {
                return q.apply(n.object, arguments)
            }
        })(h[f]);
        j[f] = "Swiff.CallBacks." + this.instance + "." + f
    }
    g.flashVars = Hash.toQueryString(j);
    if (Browser.Engine.trident) {
        k.classid = "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000";
        g.movie = o
    } else {
        k.type = "application/x-shockwave-flash";
        k.data = o
    }
    var m = '<object id="' + b + '"';
    for (var l in k) {
        m += " " + l + '="' + k[l] + '"'
    }
    m += ">";
    for (var c in g) {
        if (g[c]) {
            m += '<param name="' + c + '" value="' + g[c] + '" />'
        }
    }
    m += "</object>";
    this.object = ((a) ? a.empty() : new Element("div")).set("html", m).firstChild
}, replaces: function (a) {
    a = $(a, true);
    a.parentNode.replaceChild(this.toElement(), a);
    return this
}, inject: function (a) {
    $(a, true).appendChild(this.toElement());
    return this
}, remote: function () {
    return Swiff.remote.apply(Swiff, [this.toElement()].extend(arguments))
}});
Swiff.CallBacks = {};
Swiff.remote = function (obj, fn) {
    var rs = obj.CallFunction('<invoke name="' + fn + '" returntype="javascript">' + __flash__argumentsToXML(arguments, 2) + "</invoke>");
    return eval(rs)
};
var Fx = new Class({Implements: [Chain, Events, Options], options: {fps: 50, unit: false, duration: 500, link: "ignore"}, initialize: function (a) {
    this.subject = this.subject || this;
    this.setOptions(a);
    this.options.duration = Fx.Durations[this.options.duration] || this.options.duration.toInt();
    var b = this.options.wait;
    if (b === false) {
        this.options.link = "cancel"
    }
}, getTransition: function () {
    return function (a) {
        return -(Math.cos(Math.PI * a) - 1) / 2
    }
}, step: function () {
    var a = $time();
    if (a < this.time + this.options.duration) {
        var b = this.transition((a - this.time) / this.options.duration);
        this.set(this.compute(this.from, this.to, b))
    } else {
        this.set(this.compute(this.from, this.to, 1));
        this.complete()
    }
}, set: function (a) {
    return a
}, compute: function (c, b, a) {
    return Fx.compute(c, b, a)
}, check: function (a) {
    if (!this.timer) {
        return true
    }
    switch (this.options.link) {
        case"cancel":
            this.cancel();
            return true;
        case"chain":
            this.chain(a.bind(this, Array.slice(arguments, 1)));
            return false
    }
    return false
}, start: function (b, a) {
    if (!this.check(arguments.callee, b, a)) {
        return this
    }
    this.from = b;
    this.to = a;
    this.time = 0;
    this.transition = this.getTransition();
    this.startTimer();
    this.onStart();
    return this
}, complete: function () {
    if (this.stopTimer()) {
        this.onComplete()
    }
    return this
}, cancel: function () {
    if (this.stopTimer()) {
        this.onCancel()
    }
    return this
}, onStart: function () {
    this.fireEvent("start", this.subject)
}, onComplete: function () {
    this.fireEvent("complete", this.subject);
    if (!this.callChain()) {
        this.fireEvent("chainComplete", this.subject)
    }
}, onCancel: function () {
    this.fireEvent("cancel", this.subject).clearChain()
}, pause: function () {
    this.stopTimer();
    return this
}, resume: function () {
    this.startTimer();
    return this
}, stopTimer: function () {
    if (!this.timer) {
        return false
    }
    this.time = $time() - this.time;
    this.timer = $clear(this.timer);
    return true
}, startTimer: function () {
    if (this.timer) {
        return false
    }
    this.time = $time() - this.time;
    this.timer = this.step.periodical(Math.round(1000 / this.options.fps), this);
    return true
}});
Fx.compute = function (c, b, a) {
    return(b - c) * a + c
};
Fx.Durations = {"short": 250, normal: 500, "long": 1000};
Fx.CSS = new Class({Extends: Fx, prepare: function (f, g, b) {
    b = $splat(b);
    var c = b[1];
    if (!$chk(c)) {
        b[1] = b[0];
        b[0] = f.getStyle(g)
    }
    var a = b.map(this.parse);
    return{from: a[0], to: a[1]}
}, parse: function (a) {
    a = $lambda(a)();
    a = (typeof a == "string") ? a.split(" ") : $splat(a);
    return a.map(function (c) {
        c = String(c);
        var b = false;
        Fx.CSS.Parsers.each(function (h, g) {
            if (b) {
                return
            }
            var f = h.parse(c);
            if ($chk(f)) {
                b = {value: f, parser: h}
            }
        });
        b = b || {value: c, parser: Fx.CSS.Parsers.String};
        return b
    })
}, compute: function (f, c, b) {
    var a = [];
    (Math.min(f.length, c.length)).times(function (g) {
        a.push({value: f[g].parser.compute(f[g].value, c[g].value, b), parser: f[g].parser})
    });
    a.$family = {name: "fx:css:value"};
    return a
}, serve: function (c, b) {
    if ($type(c) != "fx:css:value") {
        c = this.parse(c)
    }
    var a = [];
    c.each(function (f) {
        a = a.concat(f.parser.serve(f.value, b))
    });
    return a
}, render: function (a, f, c, b) {
    a.setStyle(f, this.serve(c, b))
}, search: function (a) {
    if (Fx.CSS.Cache[a]) {
        return Fx.CSS.Cache[a]
    }
    var b = {};
    Array.each(document.styleSheets, function (g, f) {
        var c = g.href;
        if (c && c.contains("://") && !c.contains(document.domain)) {
            return
        }
        var h = g.rules || g.cssRules;
        Array.each(h, function (l, j) {
            if (!l.style) {
                return
            }
            var k = (l.selectorText) ? l.selectorText.replace(/^\w+/, function (n) {
                return n.toLowerCase()
            }) : null;
            if (!k || !k.test("^" + a + "$")) {
                return
            }
            Element.Styles.each(function (n, m) {
                if (!l.style[m] || Element.ShortStyles[m]) {
                    return
                }
                n = String(l.style[m]);
                b[m] = (n.test(/^rgb/)) ? n.rgbToHex() : n
            })
        })
    });
    return Fx.CSS.Cache[a] = b
}});
Fx.CSS.Cache = {};
Fx.CSS.Parsers = new Hash({Color: {parse: function (a) {
    if (a.match(/^#[0-9a-f]{3,6}$/i)) {
        return a.hexToRgb(true)
    }
    return((a = a.match(/(\d+),\s*(\d+),\s*(\d+)/))) ? [a[1], a[2], a[3]] : false
}, compute: function (c, b, a) {
    return c.map(function (g, f) {
        return Math.round(Fx.compute(c[f], b[f], a))
    })
}, serve: function (a) {
    return a.map(Number)
}}, Number: {parse: parseFloat, compute: Fx.compute, serve: function (b, a) {
    return(a) ? b + a : b
}}, String: {parse: $lambda(false), compute: $arguments(1), serve: $arguments(0)}});
Fx.Tween = new Class({Extends: Fx.CSS, initialize: function (b, a) {
    this.element = this.subject = $(b);
    this.parent(a)
}, set: function (b, a) {
    if (arguments.length == 1) {
        a = b;
        b = this.property || this.options.property
    }
    this.render(this.element, b, a, this.options.unit);
    return this
}, start: function (c, g, f) {
    if (!this.check(arguments.callee, c, g, f)) {
        return this
    }
    var b = Array.flatten(arguments);
    this.property = this.options.property || b.shift();
    var a = this.prepare(this.element, this.property, b);
    return this.parent(a.from, a.to)
}});
Element.Properties.tween = {set: function (a) {
    var b = this.retrieve("tween");
    if (b) {
        b.cancel()
    }
    return this.eliminate("tween").store("tween:options", $extend({link: "cancel"}, a))
}, get: function (a) {
    if (a || !this.retrieve("tween")) {
        if (a || !this.retrieve("tween:options")) {
            this.set("tween", a)
        }
        this.store("tween", new Fx.Tween(this, this.retrieve("tween:options")))
    }
    return this.retrieve("tween")
}};
Element.implement({tween: function (a, c, b) {
    this.get("tween").start(arguments);
    return this
}, fade: function (c) {
    var g = this.get("tween"), f = "opacity", a;
    c = $pick(c, "toggle");
    switch (c) {
        case"in":
            g.start(f, 1);
            break;
        case"out":
            g.start(f, 0);
            break;
        case"show":
            g.set(f, 1);
            break;
        case"hide":
            g.set(f, 0);
            break;
        case"toggle":
            var b = this.retrieve("fade:flag", this.get("opacity") == 1);
            g.start(f, (b) ? 0 : 1);
            this.store("fade:flag", !b);
            a = true;
            break;
        default:
            g.start(f, arguments)
    }
    if (!a) {
        this.eliminate("fade:flag")
    }
    return this
}, highlight: function (c, a) {
    if (!a) {
        a = this.retrieve("highlight:original", this.getStyle("background-color"));
        a = (a == "transparent") ? "#fff" : a
    }
    var b = this.get("tween");
    b.start("background-color", c || "#ffff88", a).chain(function () {
        this.setStyle("background-color", this.retrieve("highlight:original"));
        b.callChain()
    }.bind(this));
    return this
}});
Fx.Morph = new Class({Extends: Fx.CSS, initialize: function (b, a) {
    this.element = this.subject = $(b);
    this.parent(a)
}, set: function (a) {
    if (typeof a == "string") {
        a = this.search(a)
    }
    for (var b in a) {
        this.render(this.element, b, a[b], this.options.unit)
    }
    return this
}, compute: function (g, f, c) {
    var a = {};
    for (var b in g) {
        a[b] = this.parent(g[b], f[b], c)
    }
    return a
}, start: function (b) {
    if (!this.check(arguments.callee, b)) {
        return this
    }
    if (typeof b == "string") {
        b = this.search(b)
    }
    var g = {}, f = {};
    for (var c in b) {
        var a = this.prepare(this.element, c, b[c]);
        g[c] = a.from;
        f[c] = a.to
    }
    return this.parent(g, f)
}});
Element.Properties.morph = {set: function (a) {
    var b = this.retrieve("morph");
    if (b) {
        b.cancel()
    }
    return this.eliminate("morph").store("morph:options", $extend({link: "cancel"}, a))
}, get: function (a) {
    if (a || !this.retrieve("morph")) {
        if (a || !this.retrieve("morph:options")) {
            this.set("morph", a)
        }
        this.store("morph", new Fx.Morph(this, this.retrieve("morph:options")))
    }
    return this.retrieve("morph")
}};
Element.implement({morph: function (a) {
    this.get("morph").start(a);
    return this
}});
Fx.implement({getTransition: function () {
    var a = this.options.transition || Fx.Transitions.Sine.easeInOut;
    if (typeof a == "string") {
        var b = a.split(":");
        a = Fx.Transitions;
        a = a[b[0]] || a[b[0].capitalize()];
        if (b[1]) {
            a = a["ease" + b[1].capitalize() + (b[2] ? b[2].capitalize() : "")]
        }
    }
    return a
}});
Fx.Transition = function (b, a) {
    a = $splat(a);
    return $extend(b, {easeIn: function (c) {
        return b(c, a)
    }, easeOut: function (c) {
        return 1 - b(1 - c, a)
    }, easeInOut: function (c) {
        return(c <= 0.5) ? b(2 * c, a) / 2 : (2 - b(2 * (1 - c), a)) / 2
    }})
};
Fx.Transitions = new Hash({linear: $arguments(0)});
Fx.Transitions.extend = function (a) {
    for (var b in a) {
        Fx.Transitions[b] = new Fx.Transition(a[b])
    }
};
Fx.Transitions.extend({Pow: function (b, a) {
    return Math.pow(b, a[0] || 6)
}, Expo: function (a) {
    return Math.pow(2, 8 * (a - 1))
}, Circ: function (a) {
    return 1 - Math.sin(Math.acos(a))
}, Sine: function (a) {
    return 1 - Math.sin((1 - a) * Math.PI / 2)
}, Back: function (b, a) {
    a = a[0] || 1.618;
    return Math.pow(b, 2) * ((a + 1) * b - a)
}, Bounce: function (h) {
    var g;
    for (var f = 0, c = 1; 1; f += c, c /= 2) {
        if (h >= (7 - 4 * f) / 11) {
            g = c * c - Math.pow((11 - 6 * f - 11 * h) / 4, 2);
            break
        }
    }
    return g
}, Elastic: function (b, a) {
    return Math.pow(2, 10 * --b) * Math.cos(20 * b * Math.PI * (a[0] || 1) / 3)
}});
["Quad", "Cubic", "Quart", "Quint"].each(function (b, a) {
    Fx.Transitions[b] = new Fx.Transition(function (c) {
        return Math.pow(c, [a + 2])
    })
});
var Request = new Class({Implements: [Chain, Events, Options], options: {url: "", data: "", headers: {"X-Requested-With": "XMLHttpRequest", Accept: "text/javascript, text/html, application/xml, text/xml, */*"}, async: true, format: false, method: "post", link: "ignore", isSuccess: null, emulation: true, urlEncoded: true, encoding: "utf-8", evalScripts: false, evalResponse: false}, initialize: function (a) {
    this.xhr = new Browser.Request();
    this.setOptions(a);
    this.options.isSuccess = this.options.isSuccess || this.isSuccess;
    this.headers = new Hash(this.options.headers)
}, onStateChange: function () {
    if (this.xhr.readyState != 4 || !this.running) {
        return
    }
    this.running = false;
    this.status = 0;
    $try(function () {
        this.status = this.xhr.status
    }.bind(this));
    if (this.options.isSuccess.call(this, this.status)) {
        this.response = {text: this.xhr.responseText, xml: this.xhr.responseXML};
        this.success(this.response.text, this.response.xml)
    } else {
        this.response = {text: null, xml: null};
        this.failure()
    }
    this.xhr.onreadystatechange = $empty
}, isSuccess: function () {
    return((this.status >= 200) && (this.status < 300))
}, processScripts: function (a) {
    if (this.options.evalResponse || (/(ecma|java)script/).test(this.getHeader("Content-type"))) {
        return $exec(a)
    }
    return a.stripScripts(this.options.evalScripts)
}, success: function (b, a) {
    this.onSuccess(this.processScripts(b), a)
}, onSuccess: function () {
    this.fireEvent("complete", arguments).fireEvent("success", arguments).callChain()
}, failure: function () {
    this.onFailure()
}, onFailure: function () {
    this.fireEvent("complete").fireEvent("failure", this.xhr)
}, setHeader: function (a, b) {
    this.headers.set(a, b);
    return this
}, getHeader: function (a) {
    return $try(function () {
        return this.xhr.getResponseHeader(a)
    }.bind(this))
}, check: function (a) {
    if (!this.running) {
        return true
    }
    switch (this.options.link) {
        case"cancel":
            this.cancel();
            return true;
        case"chain":
            this.chain(a.bind(this, Array.slice(arguments, 1)));
            return false
    }
    return false
}, send: function (l) {
    if (!this.check(arguments.callee, l)) {
        return this
    }
    this.running = true;
    var j = $type(l);
    if (j == "string" || j == "element") {
        l = {data: l}
    }
    var f = this.options;
    l = $extend({data: f.data, url: f.url, method: f.method}, l);
    var g = l.data, b = l.url, a = l.method;
    switch ($type(g)) {
        case"element":
            g = $(g).toQueryString();
            break;
        case"object":
        case"hash":
            g = Hash.toQueryString(g)
    }
    if (this.options.format) {
        var k = "format=" + this.options.format;
        g = (g) ? k + "&" + g : k
    }
    if (this.options.emulation && ["put", "delete"].contains(a)) {
        var h = "_method=" + a;
        g = (g) ? h + "&" + g : h;
        a = "post"
    }
    if (this.options.urlEncoded && a == "post") {
        var c = (this.options.encoding) ? "; charset=" + this.options.encoding : "";
        this.headers.set("Content-type", "application/x-www-form-urlencoded" + c)
    }
    if (g && a == "get") {
        b = b + (b.contains("?") ? "&" : "?") + g;
        g = null
    }
    this.xhr.open(a.toUpperCase(), b, this.options.async);
    this.xhr.onreadystatechange = this.onStateChange.bind(this);
    this.headers.each(function (n, m) {
        try {
            this.xhr.setRequestHeader(m, n)
        } catch (o) {
            this.fireEvent("exception", [m, n])
        }
    }, this);
    this.fireEvent("request");
    this.xhr.send(g);
    if (!this.options.async) {
        this.onStateChange()
    }
    return this
}, cancel: function () {
    if (!this.running) {
        return this
    }
    this.running = false;
    this.xhr.abort();
    this.xhr.onreadystatechange = $empty;
    this.xhr = new Browser.Request();
    this.fireEvent("cancel");
    return this
}});
(function () {
    var a = {};
    ["get", "post", "put", "delete", "GET", "POST", "PUT", "DELETE"].each(function (b) {
        a[b] = function () {
            var c = Array.link(arguments, {url: String.type, data: $defined});
            return this.send($extend(c, {method: b.toLowerCase()}))
        }
    });
    Request.implement(a)
})();
Element.Properties.send = {set: function (a) {
    var b = this.retrieve("send");
    if (b) {
        b.cancel()
    }
    return this.eliminate("send").store("send:options", $extend({data: this, link: "cancel", method: this.get("method") || "post", url: this.get("action")}, a))
}, get: function (a) {
    if (a || !this.retrieve("send")) {
        if (a || !this.retrieve("send:options")) {
            this.set("send", a)
        }
        this.store("send", new Request(this.retrieve("send:options")))
    }
    return this.retrieve("send")
}};
Element.implement({send: function (a) {
    var b = this.get("send");
    b.send({data: this, url: a || b.options.url});
    return this
}});
Request.HTML = new Class({Extends: Request, options: {update: false, evalScripts: true, filter: false}, processHTML: function (c) {
    var b = c.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
    c = (b) ? b[1] : c;
    var a = new Element("div");
    return $try(function () {
        var f = "<root>" + c + "</root>", j;
        if (Browser.Engine.trident) {
            j = new ActiveXObject("Microsoft.XMLDOM");
            j.async = false;
            j.loadXML(f)
        } else {
            j = new DOMParser().parseFromString(f, "text/xml")
        }
        f = j.getElementsByTagName("root")[0];
        for (var h = 0, g = f.childNodes.length; h < g; h++) {
            var l = Element.clone(f.childNodes[h], true, true);
            if (l) {
                a.grab(l)
            }
        }
        return a
    }) || a.set("html", c)
}, success: function (f) {
    var c = this.options, b = this.response;
    b.html = f.stripScripts(function (g) {
        b.javascript = g
    });
    var a = this.processHTML(b.html);
    b.tree = a.childNodes;
    b.elements = a.getElements("*");
    if (c.filter) {
        b.tree = b.elements.filter(c.filter)
    }
    if (c.update) {
        $(c.update).empty().set("html", b.html)
    }
    if (c.evalScripts) {
        $exec(b.javascript)
    }
    this.onSuccess(b.tree, b.elements, b.html, b.javascript)
}});
Element.Properties.load = {set: function (a) {
    var b = this.retrieve("load");
    if (b) {
        b.cancel()
    }
    return this.eliminate("load").store("load:options", $extend({data: this, link: "cancel", update: this, method: "get"}, a))
}, get: function (a) {
    if (a || !this.retrieve("load")) {
        if (a || !this.retrieve("load:options")) {
            this.set("load", a)
        }
        this.store("load", new Request.HTML(this.retrieve("load:options")))
    }
    return this.retrieve("load")
}};
Element.implement({load: function () {
    this.get("load").send(Array.link(arguments, {data: Object.type, url: String.type}));
    return this
}});
Request.JSON = new Class({Extends: Request, options: {secure: true}, initialize: function (a) {
    this.parent(a);
    this.headers.extend({Accept: "application/json", "X-Request": "JSON"})
}, success: function (a) {
    this.response.json = JSON.decode(a, this.options.secure);
    this.onSuccess(this.response.json, a)
}});
Fx.Slide = new Class({Extends: Fx, options: {mode: "vertical"}, initialize: function (b, a) {
    this.addEvent("complete", function () {
        this.open = (this.wrapper["offset" + this.layout.capitalize()] != 0);
        if (this.open && Browser.Engine.webkit419) {
            this.element.dispose().inject(this.wrapper)
        }
    }, true);
    this.element = this.subject = $(b);
    this.parent(a);
    var c = this.element.retrieve("wrapper");
    this.wrapper = c || new Element("div", {styles: $extend(this.element.getStyles("margin", "position"), {overflow: "hidden"})}).wraps(this.element);
    this.element.store("wrapper", this.wrapper).setStyle("margin", 0);
    this.now = [];
    this.open = true
}, vertical: function () {
    this.margin = "margin-top";
    this.layout = "height";
    this.offset = this.element.offsetHeight
}, horizontal: function () {
    this.margin = "margin-left";
    this.layout = "width";
    this.offset = this.element.offsetWidth
}, set: function (a) {
    this.element.setStyle(this.margin, a[0]);
    this.wrapper.setStyle(this.layout, a[1]);
    return this
}, compute: function (g, f, c) {
    var b = [];
    var a = 2;
    a.times(function (h) {
        b[h] = Fx.compute(g[h], f[h], c)
    });
    return b
}, start: function (b, g) {
    if (!this.check(arguments.callee, b, g)) {
        return this
    }
    this[g || this.options.mode]();
    var f = this.element.getStyle(this.margin).toInt();
    var c = this.wrapper.getStyle(this.layout).toInt();
    var a = [
        [f, c],
        [0, this.offset]
    ];
    var j = [
        [f, c],
        [-this.offset, 0]
    ];
    var h;
    switch (b) {
        case"in":
            h = a;
            break;
        case"out":
            h = j;
            break;
        case"toggle":
            h = (this.wrapper["offset" + this.layout.capitalize()] == 0) ? a : j
    }
    return this.parent(h[0], h[1])
}, slideIn: function (a) {
    return this.start("in", a)
}, slideOut: function (a) {
    return this.start("out", a)
}, hide: function (a) {
    this[a || this.options.mode]();
    this.open = false;
    return this.set([-this.offset, 0])
}, show: function (a) {
    this[a || this.options.mode]();
    this.open = true;
    return this.set([0, this.offset])
}, toggle: function (a) {
    return this.start("toggle", a)
}});
Element.Properties.slide = {set: function (b) {
    var a = this.retrieve("slide");
    if (a) {
        a.cancel()
    }
    return this.eliminate("slide").store("slide:options", $extend({link: "cancel"}, b))
}, get: function (a) {
    if (a || !this.retrieve("slide")) {
        if (a || !this.retrieve("slide:options")) {
            this.set("slide", a)
        }
        this.store("slide", new Fx.Slide(this, this.retrieve("slide:options")))
    }
    return this.retrieve("slide")
}};
Element.implement({slide: function (f, g) {
    f = f || "toggle";
    var b = this.get("slide"), a;
    switch (f) {
        case"hide":
            b.hide(g);
            break;
        case"show":
            b.show(g);
            break;
        case"toggle":
            var c = this.retrieve("slide:flag", b.open);
            b[(c) ? "slideOut" : "slideIn"](g);
            this.store("slide:flag", !c);
            a = true;
            break;
        default:
            b.start(f, g)
    }
    if (!a) {
        this.eliminate("slide:flag")
    }
    return this
}});
Fx.Scroll = new Class({Extends: Fx, options: {offset: {x: 0, y: 0}, wheelStops: true}, initialize: function (b, a) {
    this.element = this.subject = $(b);
    this.parent(a);
    var f = this.cancel.bind(this, false);
    if ($type(this.element) != "element") {
        this.element = $(this.element.getDocument().body)
    }
    var c = this.element;
    if (this.options.wheelStops) {
        this.addEvent("start", function () {
            c.addEvent("mousewheel", f)
        }, true);
        this.addEvent("complete", function () {
            c.removeEvent("mousewheel", f)
        }, true)
    }
}, set: function () {
    var a = Array.flatten(arguments);
    this.element.scrollTo(a[0], a[1])
}, compute: function (g, f, c) {
    var b = [];
    var a = 2;
    a.times(function (h) {
        b.push(Fx.compute(g[h], f[h], c))
    });
    return b
}, start: function (c, k) {
    if (!this.check(arguments.callee, c, k)) {
        return this
    }
    var g = this.element.getSize(), h = this.element.getScrollSize();
    var b = this.element.getScroll(), f = {x: c, y: k};
    for (var j in f) {
        var a = h[j] - g[j];
        if ($chk(f[j])) {
            f[j] = ($type(f[j]) == "number") ? f[j].limit(0, a) : a
        } else {
            f[j] = b[j]
        }
        f[j] += this.options.offset[j]
    }
    return this.parent([b.x, b.y], [f.x, f.y])
}, toTop: function () {
    return this.start(false, 0)
}, toLeft: function () {
    return this.start(0, false)
}, toRight: function () {
    return this.start("right", false)
}, toBottom: function () {
    return this.start(false, "bottom")
}, toElement: function (b) {
    var a = $(b).getPosition(this.element);
    return this.start(a.x, a.y)
}});
Fx.Elements = new Class({Extends: Fx.CSS, initialize: function (b, a) {
    this.elements = this.subject = $$(b);
    this.parent(a)
}, compute: function (j, k, l) {
    var c = {};
    for (var f in j) {
        var a = j[f], g = k[f], h = c[f] = {};
        for (var b in a) {
            h[b] = this.parent(a[b], g[b], l)
        }
    }
    return c
}, set: function (b) {
    for (var c in b) {
        var a = b[c];
        for (var f in a) {
            this.render(this.elements[c], f, a[f], this.options.unit)
        }
    }
    return this
}, start: function (c) {
    if (!this.check(arguments.callee, c)) {
        return this
    }
    var k = {}, l = {};
    for (var f in c) {
        var h = c[f], a = k[f] = {}, j = l[f] = {};
        for (var b in h) {
            var g = this.prepare(this.elements[f], b, h[b]);
            a[b] = g.from;
            j[b] = g.to
        }
    }
    return this.parent(k, l)
}});
var Drag = new Class({Implements: [Events, Options], options: {snap: 6, unit: "px", grid: false, style: true, limit: false, handle: false, invert: false, preventDefault: false, modifiers: {x: "left", y: "top"}}, initialize: function () {
    var b = Array.link(arguments, {options: Object.type, element: $defined});
    this.element = $(b.element);
    this.document = this.element.getDocument();
    this.setOptions(b.options || {});
    var a = $type(this.options.handle);
    this.handles = (a == "array" || a == "collection") ? $$(this.options.handle) : $(this.options.handle) || this.element;
    this.mouse = {now: {}, pos: {}};
    this.value = {start: {}, now: {}};
    this.selection = (Browser.Engine.trident) ? "selectstart" : "mousedown";
    this.bound = {start: this.start.bind(this), check: this.check.bind(this), drag: this.drag.bind(this), stop: this.stop.bind(this), cancel: this.cancel.bind(this), eventStop: $lambda(false)};
    this.attach()
}, attach: function () {
    this.handles.addEvent("mousedown", this.bound.start);
    return this
}, detach: function () {
    this.handles.removeEvent("mousedown", this.bound.start);
    return this
}, start: function (c) {
    if (this.options.preventDefault) {
        c.preventDefault()
    }
    this.fireEvent("beforeStart", this.element);
    this.mouse.start = c.page;
    var a = this.options.limit;
    this.limit = {x: [], y: []};
    for (var f in this.options.modifiers) {
        if (!this.options.modifiers[f]) {
            continue
        }
        if (this.options.style) {
            this.value.now[f] = this.element.getStyle(this.options.modifiers[f]).toInt()
        } else {
            this.value.now[f] = this.element[this.options.modifiers[f]]
        }
        if (this.options.invert) {
            this.value.now[f] *= -1
        }
        this.mouse.pos[f] = c.page[f] - this.value.now[f];
        if (a && a[f]) {
            for (var b = 2; b--; b) {
                if ($chk(a[f][b])) {
                    this.limit[f][b] = $lambda(a[f][b])()
                }
            }
        }
    }
    if ($type(this.options.grid) == "number") {
        this.options.grid = {x: this.options.grid, y: this.options.grid}
    }
    this.document.addEvents({mousemove: this.bound.check, mouseup: this.bound.cancel});
    this.document.addEvent(this.selection, this.bound.eventStop)
}, check: function (a) {
    if (this.options.preventDefault) {
        a.preventDefault()
    }
    var b = Math.round(Math.sqrt(Math.pow(a.page.x - this.mouse.start.x, 2) + Math.pow(a.page.y - this.mouse.start.y, 2)));
    if (b > this.options.snap) {
        this.cancel();
        this.document.addEvents({mousemove: this.bound.drag, mouseup: this.bound.stop});
        this.fireEvent("start", this.element).fireEvent("snap", this.element)
    }
}, drag: function (a) {
    if (this.options.preventDefault) {
        a.preventDefault()
    }
    this.mouse.now = a.page;
    for (var b in this.options.modifiers) {
        if (!this.options.modifiers[b]) {
            continue
        }
        this.value.now[b] = this.mouse.now[b] - this.mouse.pos[b];
        if (this.options.invert) {
            this.value.now[b] *= -1
        }
        if (this.options.limit && this.limit[b]) {
            if ($chk(this.limit[b][1]) && (this.value.now[b] > this.limit[b][1])) {
                this.value.now[b] = this.limit[b][1]
            } else {
                if ($chk(this.limit[b][0]) && (this.value.now[b] < this.limit[b][0])) {
                    this.value.now[b] = this.limit[b][0]
                }
            }
        }
        if (this.options.grid[b]) {
            this.value.now[b] -= (this.value.now[b] % this.options.grid[b])
        }
        if (this.options.style) {
            this.element.setStyle(this.options.modifiers[b], this.value.now[b] + this.options.unit)
        } else {
            this.element[this.options.modifiers[b]] = this.value.now[b]
        }
    }
    this.fireEvent("drag", this.element)
}, cancel: function (a) {
    this.document.removeEvent("mousemove", this.bound.check);
    this.document.removeEvent("mouseup", this.bound.cancel);
    if (a) {
        this.document.removeEvent(this.selection, this.bound.eventStop);
        this.fireEvent("cancel", this.element)
    }
}, stop: function (a) {
    this.document.removeEvent(this.selection, this.bound.eventStop);
    this.document.removeEvent("mousemove", this.bound.drag);
    this.document.removeEvent("mouseup", this.bound.stop);
    if (a) {
        this.fireEvent("complete", this.element)
    }
}});
Element.implement({makeResizable: function (a) {
    return new Drag(this, $merge({modifiers: {x: "width", y: "height"}}, a))
}});
Drag.Move = new Class({Extends: Drag, options: {droppables: [], container: false}, initialize: function (c, b) {
    this.parent(c, b);
    this.droppables = $$(this.options.droppables);
    this.container = $(this.options.container);
    if (this.container && $type(this.container) != "element") {
        this.container = $(this.container.getDocument().body)
    }
    c = this.element;
    var f = c.getStyle("position");
    var a = (f != "static") ? f : "absolute";
    if (c.getStyle("left") == "auto" || c.getStyle("top") == "auto") {
        c.position(c.getPosition(c.offsetParent))
    }
    c.setStyle("position", a);
    this.addEvent("start", function () {
        this.checkDroppables()
    }, true)
}, start: function (b) {
    if (this.container) {
        var f = this.element, m = this.container, g = m.getCoordinates(f.offsetParent), h = {}, a = {};
        ["top", "right", "bottom", "left"].each(function (n) {
            h[n] = m.getStyle("padding-" + n).toInt();
            a[n] = f.getStyle("margin-" + n).toInt()
        }, this);
        var c = f.offsetWidth + a.left + a.right, l = f.offsetHeight + a.top + a.bottom;
        var k = [g.left + h.left, g.right - h.right - c];
        var j = [g.top + h.top, g.bottom - h.bottom - l];
        this.options.limit = {x: k, y: j}
    }
    this.parent(b)
}, checkAgainst: function (b) {
    b = b.getCoordinates();
    var a = this.mouse.now;
    return(a.x > b.left && a.x < b.right && a.y < b.bottom && a.y > b.top)
}, checkDroppables: function () {
    var a = this.droppables.filter(this.checkAgainst, this).getLast();
    if (this.overed != a) {
        if (this.overed) {
            this.fireEvent("leave", [this.element, this.overed])
        }
        if (a) {
            this.overed = a;
            this.fireEvent("enter", [this.element, a])
        } else {
            this.overed = null
        }
    }
}, drag: function (a) {
    this.parent(a);
    if (this.droppables.length) {
        this.checkDroppables()
    }
}, stop: function (a) {
    this.checkDroppables();
    this.fireEvent("drop", [this.element, this.overed]);
    this.overed = null;
    return this.parent(a)
}});
Element.implement({makeDraggable: function (a) {
    return new Drag.Move(this, a)
}});
Hash.Cookie = new Class({Extends: Cookie, options: {autoSave: true}, initialize: function (b, a) {
    this.parent(b, a);
    this.load()
}, save: function () {
    var a = JSON.encode(this.hash);
    if (!a || a.length > 4096) {
        return false
    }
    if (a == "{}") {
        this.dispose()
    } else {
        this.write(a)
    }
    return true
}, load: function () {
    this.hash = new Hash(JSON.decode(this.read(), true));
    return this
}});
Hash.Cookie.implement((function () {
    var a = {};
    Hash.each(Hash.prototype, function (c, b) {
        a[b] = function () {
            var f = c.apply(this.hash, arguments);
            if (this.options.autoSave) {
                this.save()
            }
            return f
        }
    });
    return a
})());
var Color = new Native({initialize: function (b, c) {
    if (arguments.length >= 3) {
        c = "rgb";
        b = Array.slice(arguments, 0, 3)
    } else {
        if (typeof b == "string") {
            if (b.match(/rgb/)) {
                b = b.rgbToHex().hexToRgb(true)
            } else {
                if (b.match(/hsb/)) {
                    b = b.hsbToRgb()
                } else {
                    b = b.hexToRgb(true)
                }
            }
        }
    }
    c = c || "rgb";
    switch (c) {
        case"hsb":
            var a = b;
            b = b.hsbToRgb();
            b.hsb = a;
            break;
        case"hex":
            b = b.hexToRgb(true);
            break
    }
    b.rgb = b.slice(0, 3);
    b.hsb = b.hsb || b.rgbToHsb();
    b.hex = b.rgbToHex();
    return $extend(b, this)
}});
Color.implement({mix: function () {
    var a = Array.slice(arguments);
    var c = ($type(a.getLast()) == "number") ? a.pop() : 50;
    var b = this.slice();
    a.each(function (f) {
        f = new Color(f);
        for (var g = 0; g < 3; g++) {
            b[g] = Math.round((b[g] / 100 * (100 - c)) + (f[g] / 100 * c))
        }
    });
    return new Color(b, "rgb")
}, invert: function () {
    return new Color(this.map(function (a) {
        return 255 - a
    }))
}, setHue: function (a) {
    return new Color([a, this.hsb[1], this.hsb[2]], "hsb")
}, setSaturation: function (a) {
    return new Color([this.hsb[0], a, this.hsb[2]], "hsb")
}, setBrightness: function (a) {
    return new Color([this.hsb[0], this.hsb[1], a], "hsb")
}});
function $RGB(f, c, a) {
    return new Color([f, c, a], "rgb")
}
function $HSB(f, c, a) {
    return new Color([f, c, a], "hsb")
}
function $HEX(a) {
    return new Color(a, "hex")
}
Array.implement({rgbToHsb: function () {
    var b = this[0], c = this[1], m = this[2];
    var j, h, k;
    var l = Math.max(b, c, m), g = Math.min(b, c, m);
    var n = l - g;
    k = l / 255;
    h = (l != 0) ? n / l : 0;
    if (h == 0) {
        j = 0
    } else {
        var f = (l - b) / n;
        var a = (l - c) / n;
        var o = (l - m) / n;
        if (b == l) {
            j = o - a
        } else {
            if (c == l) {
                j = 2 + f - o
            } else {
                j = 4 + a - f
            }
        }
        j /= 6;
        if (j < 0) {
            j++
        }
    }
    return[Math.round(j * 360), Math.round(h * 100), Math.round(k * 100)]
}, hsbToRgb: function () {
    var c = Math.round(this[2] / 100 * 255);
    if (this[1] == 0) {
        return[c, c, c]
    } else {
        var a = this[0] % 360;
        var h = a % 60;
        var j = Math.round((this[2] * (100 - this[1])) / 10000 * 255);
        var g = Math.round((this[2] * (6000 - this[1] * h)) / 600000 * 255);
        var b = Math.round((this[2] * (6000 - this[1] * (60 - h))) / 600000 * 255);
        switch (Math.floor(a / 60)) {
            case 0:
                return[c, b, j];
            case 1:
                return[g, c, j];
            case 2:
                return[j, c, b];
            case 3:
                return[j, g, c];
            case 4:
                return[b, j, c];
            case 5:
                return[c, j, g]
        }
    }
    return false
}});
String.implement({rgbToHsb: function () {
    var a = this.match(/\d{1,3}/g);
    return(a) ? hsb.rgbToHsb() : null
}, hsbToRgb: function () {
    var a = this.match(/\d{1,3}/g);
    return(a) ? a.hsbToRgb() : null
}});
var Group = new Class({initialize: function () {
    this.instances = Array.flatten(arguments);
    this.events = {};
    this.checker = {}
}, addEvent: function (b, a) {
    this.checker[b] = this.checker[b] || {};
    this.events[b] = this.events[b] || [];
    if (this.events[b].contains(a)) {
        return false
    } else {
        this.events[b].push(a)
    }
    this.instances.each(function (c, f) {
        c.addEvent(b, this.check.bind(this, [b, c, f]))
    }, this);
    return this
}, check: function (c, a, b) {
    this.checker[c][b] = true;
    var f = this.instances.every(function (h, g) {
        return this.checker[c][g] || false
    }, this);
    if (!f) {
        return
    }
    this.checker[c] = {};
    this.events[c].each(function (g) {
        g.call(this, this.instances, a)
    }, this)
}});
var Asset = new Hash({javascript: function (h, f) {
    f = $extend({onload: $empty, document: document, check: $lambda(true)}, f);
    var b = new Element("script", {src: h, type: "text/javascript"});
    var g = f.onload.bind(b), a = f.check, j = f.document;
    delete f.onload;
    delete f.check;
    delete f.document;
    b.addEvents({load: g, readystatechange: function () {
        if (["loaded", "complete"].contains(this.readyState)) {
            g()
        }
    }}).setProperties(f);
    if (Browser.Engine.webkit419) {
        var c = (function () {
            if (!$try(a)) {
                return
            }
            $clear(c);
            g()
        }).periodical(50)
    }
    return b.inject(j.head)
}, css: function (b, a) {
    return new Element("link", $merge({rel: "stylesheet", media: "screen", type: "text/css", href: b}, a)).inject(document.head)
}, image: function (c, b) {
    b = $merge({onload: $empty, onabort: $empty, onerror: $empty}, b);
    var f = new Image();
    var a = $(f) || new Element("img");
    ["load", "abort", "error"].each(function (g) {
        var h = "on" + g;
        var j = b[h];
        delete b[h];
        f[h] = function () {
            if (!f) {
                return
            }
            if (!a.parentNode) {
                a.width = f.width;
                a.height = f.height
            }
            f = f.onload = f.onabort = f.onerror = null;
            j.delay(1, a, a);
            a.fireEvent(g, a, 1)
        }
    });
    f.src = a.src = c;
    if (f && f.complete) {
        f.onload.delay(1)
    }
    return a.setProperties(b)
}, images: function (f, c) {
    c = $merge({onComplete: $empty, onProgress: $empty}, c);
    if (!f.push) {
        f = [f]
    }
    var a = [];
    var b = 0;
    f.each(function (h) {
        var g = new Asset.image(h, {onload: function () {
            c.onProgress.call(this, b, f.indexOf(h));
            b++;
            if (b == f.length) {
                c.onComplete()
            }
        }});
        a.push(g)
    });
    return new Elements(a)
}});
var Sortables = new Class({Implements: [Events, Options], options: {snap: 4, opacity: 1, clone: false, revert: false, handle: false, constrain: false}, initialize: function (a, b) {
    this.setOptions(b);
    this.elements = [];
    this.lists = [];
    this.idle = true;
    this.addLists($$($(a) || a));
    if (!this.options.clone) {
        this.options.revert = false
    }
    if (this.options.revert) {
        this.effect = new Fx.Morph(null, $merge({duration: 250, link: "cancel"}, this.options.revert))
    }
}, attach: function () {
    this.addLists(this.lists);
    return this
}, detach: function () {
    this.lists = this.removeLists(this.lists);
    return this
}, addItems: function () {
    Array.flatten(arguments).each(function (a) {
        this.elements.push(a);
        var b = a.retrieve("sortables:start", this.start.bindWithEvent(this, a));
        (this.options.handle ? a.getElement(this.options.handle) || a : a).addEvent("mousedown", b)
    }, this);
    return this
}, addLists: function () {
    Array.flatten(arguments).each(function (a) {
        this.lists.push(a);
        this.addItems(a.getChildren())
    }, this);
    return this
}, removeItems: function () {
    var a = [];
    Array.flatten(arguments).each(function (b) {
        a.push(b);
        this.elements.erase(b);
        var c = b.retrieve("sortables:start");
        (this.options.handle ? b.getElement(this.options.handle) || b : b).removeEvent("mousedown", c)
    }, this);
    return $$(a)
}, removeLists: function () {
    var a = [];
    Array.flatten(arguments).each(function (b) {
        a.push(b);
        this.lists.erase(b);
        this.removeItems(b.getChildren())
    }, this);
    return $$(a)
}, getClone: function (b, a) {
    if (!this.options.clone) {
        return new Element("div").inject(document.body)
    }
    if ($type(this.options.clone) == "function") {
        return this.options.clone.call(this, b, a, this.list)
    }
    return a.clone(true).setStyles({margin: "0px", position: "absolute", visibility: "hidden", width: a.getStyle("width")}).inject(this.list).position(a.getPosition(a.getOffsetParent()))
}, getDroppables: function () {
    var a = this.list.getChildren();
    if (!this.options.constrain) {
        a = this.lists.concat(a).erase(this.list)
    }
    return a.erase(this.clone).erase(this.element)
}, insert: function (c, b) {
    var a = "inside";
    if (this.lists.contains(b)) {
        this.list = b;
        this.drag.droppables = this.getDroppables()
    } else {
        a = this.element.getAllPrevious().contains(b) ? "before" : "after"
    }
    this.element.inject(b, a);
    this.fireEvent("sort", [this.element, this.clone])
}, start: function (b, a) {
    if (!this.idle) {
        return
    }
    this.idle = false;
    this.element = a;
    this.opacity = a.get("opacity");
    this.list = a.getParent();
    this.clone = this.getClone(b, a);
    this.drag = new Drag.Move(this.clone, {snap: this.options.snap, container: this.options.constrain && this.element.getParent(), droppables: this.getDroppables(), onSnap: function () {
        b.stop();
        this.clone.setStyle("visibility", "visible");
        this.element.set("opacity", this.options.opacity || 0);
        this.fireEvent("start", [this.element, this.clone])
    }.bind(this), onEnter: this.insert.bind(this), onCancel: this.reset.bind(this), onComplete: this.end.bind(this)});
    this.clone.inject(this.element, "before");
    this.drag.start(b)
}, end: function () {
    this.drag.detach();
    this.element.set("opacity", this.opacity);
    if (this.effect) {
        var a = this.element.getStyles("width", "height");
        var b = this.clone.computePosition(this.element.getPosition(this.clone.offsetParent));
        this.effect.element = this.clone;
        this.effect.start({top: b.top, left: b.left, width: a.width, height: a.height, opacity: 0.25}).chain(this.reset.bind(this))
    } else {
        this.reset()
    }
}, reset: function () {
    this.idle = true;
    this.clone.destroy();
    this.fireEvent("complete", this.element)
}, serialize: function () {
    var c = Array.link(arguments, {modifier: Function.type, index: $defined});
    var b = this.lists.map(function (f) {
        return f.getChildren().map(c.modifier || function (g) {
            return g.get("id")
        }, this)
    }, this);
    var a = c.index;
    if (this.lists.length == 1) {
        a = 0
    }
    return $chk(a) && a >= 0 && a < this.lists.length ? b[a] : b
}});
var Tips = new Class({Implements: [Events, Options], options: {onShow: function (a) {
    a.setStyle("visibility", "visible")
}, onHide: function (a) {
    a.setStyle("visibility", "hidden")
}, showDelay: 100, hideDelay: 100, className: null, offsets: {x: 16, y: 16}, fixed: false}, initialize: function () {
    var c = Array.link(arguments, {options: Object.type, elements: $defined});
    this.setOptions(c.options || null);
    this.tip = new Element("div").inject(document.body);
    if (this.options.className) {
        this.tip.addClass(this.options.className)
    }
    var b = new Element("div", {"class": "tip-top"}).inject(this.tip);
    this.container = new Element("div", {"class": "tip"}).inject(this.tip);
    var a = new Element("div", {"class": "tip-bottom"}).inject(this.tip);
    this.tip.setStyles({position: "absolute", top: 0, left: 0, visibility: "hidden"});
    if (c.elements) {
        this.attach(c.elements)
    }
}, attach: function (a) {
    $$(a).each(function (f) {
        var j = f.retrieve("tip:title", f.get("title"));
        var h = f.retrieve("tip:text", f.get("rel") || f.get("href"));
        var g = f.retrieve("tip:enter", this.elementEnter.bindWithEvent(this, f));
        var c = f.retrieve("tip:leave", this.elementLeave.bindWithEvent(this, f));
        f.addEvents({mouseenter: g, mouseleave: c});
        if (!this.options.fixed) {
            var b = f.retrieve("tip:move", this.elementMove.bindWithEvent(this, f));
            f.addEvent("mousemove", b)
        }
        f.store("tip:native", f.get("title"));
        f.erase("title")
    }, this);
    return this
}, detach: function (a) {
    $$(a).each(function (c) {
        c.removeEvent("mouseenter", c.retrieve("tip:enter") || $empty);
        c.removeEvent("mouseleave", c.retrieve("tip:leave") || $empty);
        c.removeEvent("mousemove", c.retrieve("tip:move") || $empty);
        c.eliminate("tip:enter").eliminate("tip:leave").eliminate("tip:move");
        var b = c.retrieve("tip:native");
        if (b) {
            c.set("title", b)
        }
    });
    return this
}, elementEnter: function (b, a) {
    $A(this.container.childNodes).each(Element.dispose);
    var f = a.retrieve("tip:title");
    if (f) {
        this.titleElement = new Element("div", {"class": "tip-title"}).inject(this.container);
        this.fill(this.titleElement, f)
    }
    var c = a.retrieve("tip:text");
    if (c) {
        this.textElement = new Element("div", {"class": "tip-text"}).inject(this.container);
        this.fill(this.textElement, c)
    }
    this.timer = $clear(this.timer);
    this.timer = this.show.delay(this.options.showDelay, this);
    this.position((!this.options.fixed) ? b : {page: a.getPosition()})
}, elementLeave: function (a) {
    $clear(this.timer);
    this.timer = this.hide.delay(this.options.hideDelay, this)
}, elementMove: function (a) {
    this.position(a)
}, position: function (f) {
    var b = window.getSize(), a = window.getScroll();
    var g = {x: this.tip.offsetWidth, y: this.tip.offsetHeight};
    var c = {x: "left", y: "top"};
    for (var h in c) {
        var j = f.page[h] + this.options.offsets[h];
        if ((j + g[h] - a[h]) > b[h]) {
            j = f.page[h] - this.options.offsets[h] - g[h]
        }
        this.tip.setStyle(c[h], j)
    }
}, fill: function (a, b) {
    (typeof b == "string") ? a.set("html", b) : a.adopt(b)
}, show: function () {
    this.fireEvent("show", this.tip)
}, hide: function () {
    this.fireEvent("hide", this.tip)
}});
var SmoothScroll = new Class({Extends: Fx.Scroll, initialize: function (b, c) {
    c = c || document;
    var g = c.getDocument(), f = c.getWindow();
    this.parent(g, b);
    this.links = (this.options.links) ? $$(this.options.links) : $$(g.links);
    var a = f.location.href.match(/^[^#]*/)[0] + "#";
    this.links.each(function (j) {
        if (j.href.indexOf(a) != 0) {
            return
        }
        var h = j.href.substr(a.length);
        if (h && $(h)) {
            this.useLink(j, h)
        }
    }, this);
    if (!Browser.Engine.webkit419) {
        this.addEvent("complete", function () {
            f.location.hash = this.anchor
        }, true)
    }
}, useLink: function (b, a) {
    b.addEvent("click", function (c) {
        this.anchor = a;
        this.toElement(a);
        c.stop()
    }.bind(this))
}});
var Slider = new Class({Implements: [Events, Options], options: {onTick: function (a) {
    if (this.options.snap) {
        a = this.toPosition(this.step)
    }
    this.knob.setStyle(this.property, a)
}, snap: false, offset: 0, range: false, wheel: false, steps: 100, mode: "horizontal"}, initialize: function (g, a, f) {
    this.setOptions(f);
    this.element = $(g);
    this.knob = $(a);
    this.previousChange = this.previousEnd = this.step = -1;
    this.element.addEvent("mousedown", this.clickedElement.bind(this));
    if (this.options.wheel) {
        this.element.addEvent("mousewheel", this.scrolledElement.bindWithEvent(this))
    }
    var h, b = {}, c = {x: false, y: false};
    switch (this.options.mode) {
        case"vertical":
            this.axis = "y";
            this.property = "top";
            h = "offsetHeight";
            break;
        case"horizontal":
            this.axis = "x";
            this.property = "left";
            h = "offsetWidth"
    }
    this.half = this.knob[h] / 2;
    this.full = this.element[h] - this.knob[h] + (this.options.offset * 2);
    this.min = $chk(this.options.range[0]) ? this.options.range[0] : 0;
    this.max = $chk(this.options.range[1]) ? this.options.range[1] : this.options.steps;
    this.range = this.max - this.min;
    this.steps = this.options.steps || this.full;
    this.stepSize = Math.abs(this.range) / this.steps;
    this.stepWidth = this.stepSize * this.full / Math.abs(this.range);
    this.knob.setStyle("position", "relative").setStyle(this.property, -this.options.offset);
    c[this.axis] = this.property;
    b[this.axis] = [-this.options.offset, this.full - this.options.offset];
    this.drag = new Drag(this.knob, {snap: 0, limit: b, modifiers: c, onDrag: this.draggedKnob.bind(this), onStart: this.draggedKnob.bind(this), onComplete: function () {
        this.draggedKnob();
        this.end()
    }.bind(this)});
    if (this.options.snap) {
        this.drag.options.grid = Math.ceil(this.stepWidth);
        this.drag.options.limit[this.axis][1] = this.full
    }
}, set: function (a) {
    if (!((this.range > 0) ^ (a < this.min))) {
        a = this.min
    }
    if (!((this.range > 0) ^ (a > this.max))) {
        a = this.max
    }
    this.step = Math.round(a);
    this.checkStep();
    this.end();
    this.fireEvent("tick", this.toPosition(this.step));
    return this
}, clickedElement: function (c) {
    var b = this.range < 0 ? -1 : 1;
    var a = c.page[this.axis] - this.element.getPosition()[this.axis] - this.half;
    a = a.limit(-this.options.offset, this.full - this.options.offset);
    this.step = Math.round(this.min + b * this.toStep(a));
    this.checkStep();
    this.end();
    this.fireEvent("tick", a)
}, scrolledElement: function (a) {
    var b = (this.options.mode == "horizontal") ? (a.wheel < 0) : (a.wheel > 0);
    this.set(b ? this.step - this.stepSize : this.step + this.stepSize);
    a.stop()
}, draggedKnob: function () {
    var b = this.range < 0 ? -1 : 1;
    var a = this.drag.value.now[this.axis];
    a = a.limit(-this.options.offset, this.full - this.options.offset);
    this.step = Math.round(this.min + b * this.toStep(a));
    this.checkStep()
}, checkStep: function () {
    if (this.previousChange != this.step) {
        this.previousChange = this.step;
        this.fireEvent("change", this.step)
    }
}, end: function () {
    if (this.previousEnd !== this.step) {
        this.previousEnd = this.step;
        this.fireEvent("complete", this.step + "")
    }
}, toStep: function (a) {
    var b = (a + this.options.offset) * this.stepSize / this.full * this.steps;
    return this.options.steps ? Math.round(b -= b % this.stepSize) : b
}, toPosition: function (a) {
    return(this.full * Math.abs(this.min - a)) / (this.steps * this.stepSize) - this.options.offset
}});
var Scroller = new Class({Implements: [Events, Options], options: {area: 20, velocity: 1, onChange: function (a, b) {
    this.element.scrollTo(a, b)
}}, initialize: function (b, a) {
    this.setOptions(a);
    this.element = $(b);
    this.listener = ($type(this.element) != "element") ? $(this.element.getDocument().body) : this.element;
    this.timer = null;
    this.coord = this.getCoords.bind(this)
}, start: function () {
    this.listener.addEvent("mousemove", this.coord)
}, stop: function () {
    this.listener.removeEvent("mousemove", this.coord);
    this.timer = $clear(this.timer)
}, getCoords: function (a) {
    this.page = (this.listener.get("tag") == "body") ? a.client : a.page;
    if (!this.timer) {
        this.timer = this.scroll.periodical(50, this)
    }
}, scroll: function () {
    var b = this.element.getSize(), a = this.element.getScroll(), g = this.element.getPosition(), f = {x: 0, y: 0};
    for (var c in this.page) {
        if (this.page[c] < (this.options.area + g[c]) && a[c] != 0) {
            f[c] = (this.page[c] - this.options.area - g[c]) * this.options.velocity
        } else {
            if (this.page[c] + this.options.area > (b[c] + g[c]) && b[c] + b[c] != a[c]) {
                f[c] = (this.page[c] - b[c] + this.options.area - g[c]) * this.options.velocity
            }
        }
    }
    if (f.y || f.x) {
        this.fireEvent("change", [a.x + f.x, a.y + f.y])
    }
}});
var Accordion = new Class({Extends: Fx.Elements, options: {display: 0, show: false, height: true, width: false, opacity: true, fixedHeight: false, fixedWidth: false, wait: false, alwaysHide: false}, initialize: function () {
    var c = Array.link(arguments, {container: Element.type, options: Object.type, togglers: $defined, elements: $defined});
    this.parent(c.elements, c.options);
    this.togglers = $$(c.togglers);
    this.container = $(c.container);
    this.previous = -1;
    if (this.options.alwaysHide) {
        this.options.wait = true
    }
    if ($chk(this.options.show)) {
        this.options.display = false;
        this.previous = this.options.show
    }
    if (this.options.start) {
        this.options.display = false;
        this.options.show = false
    }
    this.effects = {};
    if (this.options.opacity) {
        this.effects.opacity = "fullOpacity"
    }
    if (this.options.width) {
        this.effects.width = this.options.fixedWidth ? "fullWidth" : "offsetWidth"
    }
    if (this.options.height) {
        this.effects.height = this.options.fixedHeight ? "fullHeight" : "scrollHeight"
    }
    for (var b = 0, a = this.togglers.length; b < a; b++) {
        this.addSection(this.togglers[b], this.elements[b])
    }
    this.elements.each(function (g, f) {
        if (this.options.show === f) {
            this.fireEvent("active", [this.togglers[f], g])
        } else {
            for (var h in this.effects) {
                g.setStyle(h, 0)
            }
        }
    }, this);
    if ($chk(this.options.display)) {
        this.display(this.options.display)
    }
}, addSection: function (g, c, j) {
    g = $(g);
    c = $(c);
    var h = this.togglers.contains(g);
    var b = this.togglers.length;
    this.togglers.include(g);
    this.elements.include(c);
    if (b && (!h || j)) {
        j = $pick(j, b - 1);
        g.inject(this.togglers[j], "before");
        c.inject(g, "after")
    } else {
        if (this.container && !h) {
            g.inject(this.container);
            c.inject(this.container)
        }
    }
    var a = this.togglers.indexOf(g);
    g.addEvent("click", this.display.bind(this, a));
    if (this.options.height) {
        c.setStyles({"padding-top": 0, "border-top": "none", "padding-bottom": 0, "border-bottom": "none"})
    }
    if (this.options.width) {
        c.setStyles({"padding-left": 0, "border-left": "none", "padding-right": 0, "border-right": "none"})
    }
    c.fullOpacity = 1;
    if (this.options.fixedWidth) {
        c.fullWidth = this.options.fixedWidth
    }
    if (this.options.fixedHeight) {
        c.fullHeight = this.options.fixedHeight
    }
    c.setStyle("overflow", "hidden");
    if (!h) {
        for (var f in this.effects) {
            c.setStyle(f, 0)
        }
    }
    return this
}, display: function (a) {
    a = ($type(a) == "element") ? this.elements.indexOf(a) : a;
    if ((this.timer && this.options.wait) || (a === this.previous && !this.options.alwaysHide)) {
        return this
    }
    this.previous = a;
    var b = {};
    this.elements.each(function (g, f) {
        b[f] = {};
        var c = (f != a) || (this.options.alwaysHide && (g.offsetHeight > 0));
        this.fireEvent(c ? "background" : "active", [this.togglers[f], g]);
        for (var h in this.effects) {
            b[f][h] = c ? 0 : g[this.effects[h]]
        }
    }, this);
    return this.start(b)
}});
Array.implement({shuffle: function () {
    for (var b, a, c = this.length; c; b = parseInt(Math.random() * c), a = this[--c], this[c] = this[b], this[b] = a) {
    }
    return this
}, split: function (b) {
    var c = [], a = [];
    this.clean().each(function (h, g, f) {
        if ((g + 1) % b != 0) {
            a.include(h);
            if (g + 1 == f.length) {
                c.include(a);
                a = null
            }
        } else {
            a.include(h);
            c.include(a);
            a = (g + 1 == f.length) ? null : []
        }
    });
    return c
}, splitForm: function (c) {
    var f = [], b = [], a = 0;
    this.clean().each(function (j, h, g) {
        var k = (j.get("cols") || 1) / 1;
        if (a == 0 || a + k <= c) {
            b.include(j);
            a += k
        } else {
            f.include(b);
            b = [];
            b.include(j);
            a = k
        }
        if (h + 1 == g.length) {
            f.include(b);
            b = null;
            a = null
        }
    });
    return f
}, eachFromLast: function (c, f) {
    for (var b = this.length - 1, a = 0; b >= a; b--) {
        c.call(f, this[b], b, this)
    }
}, sum: function () {
    var b = 0;
    for (var a = 0; a < this.length; a++) {
        if ($chk(this[a])) {
            b += this[a] / 1
        }
    }
    return b
}});
Element.implement({hover: function (b, a) {
    this.addEvents({mouseenter: function (c) {
        b.attempt(c, this)
    }, mouseleave: function (c) {
        a.attempt(c, this)
    }})
}, isDisplayed: function () {
    var b = window.getScroll();
    var a = window.getSize();
    b.x2 = b.x + a.x;
    b.y2 = b.y + a.y;
    var c = this.getCoordinates();
    return((c.left >= b.x && c.left <= b.x2) || (c.right >= b.x && c.right <= b.x2) || (c.left <= b.x && c.right >= b.x2)) && ((c.top >= b.y && c.top <= b.y2) || (c.bottom >= b.y && c.bottom <= b.y2) || (c.top <= b.y && c.bottom >= b.y2))
}, getPos: function (b) {
    var a = this.getStyle(b);
    return(a.indexOf("px") == -1) ? a.toInt() : (a.split("px")[0]).toInt()
}, hoverClass: function (a) {
    this.hover(function () {
        this.addClass(a)
    }, function () {
        this.removeClass(a)
    });
    return this
}});
(function () {
    Element.implement({_getPosition: function () {
        if (!Browser.Engine.trident) {
            return this.getPosition()
        }
        if (a(this)) {
            return{x: 0, y: 0}
        }
        return this._getOffsets()
    }, _getOffsets: function () {
        if (Browser.Engine.trident) {
            var b = this.getDocument().getScroll();
            try {
                var c = this.getBoundingClientRect();
                return{x: c.left + b.x, y: c.top + b.y}
            } catch (f) {
                return{x: -1000, y: -1000}
            }
        }
    }, getHTML: function () {
        var b;
        var c = this.attributes;
        var g = "<" + this.tagName;
        for (var f = 0; f < c.length; f++) {
            b = c[f];
            if (b.specified) {
                g += " " + b.name + "='" + b.value + "'"
            }
        }
        if (!this.canHaveChildren) {
            return g + ">"
        }
        return g + ">" + this.innerHTML + "</" + this.tagName + ">"
    }});
    function a(b) {
        return(/^(?:body|html)$/i).test(b.tagName)
    }
})();
Native.implement([Element, Window, Document], {cloneAllEvents: function (b, a) {
    b = $(b);
    b.getElements("*").each(function (g) {
        var f = g.retrieve("events");
        if (!f) {
            return this
        }
        if (!a) {
            for (var c in f) {
                this.cloneEvents(g, c)
            }
        } else {
            if (f[a]) {
                f[a].keys.each(function (h) {
                    g.addEvent(a, h)
                }, this)
            }
        }
    }, this);
    return this
}});
var DragTable = new Class({Extends: Sortables, insert: function (c, b) {
    if (!b) {
        return
    }
    var a = "inside";
    if (this.lists.contains(b)) {
        this.list = b;
        this.drag.droppables = this.getDroppables()
    } else {
        a = this.element.getAllPrevious().contains(b) ? "before" : "after"
    }
    this.element.inject(b, a);
    this.fireEvent("sort", [this.element, this.clone, b, a])
}, start: function (b, a) {
    if (!this.idle) {
        return
    }
    this.idle = false;
    this.element = a;
    this.opacity = a.get("opacity");
    this.list = a.getParent();
    this.clone = this.getClone(b, a);
    this.drag = new Drag.Move(this.clone, {snap: this.options.snap, container: this.options.constrain && this.element.getParent(), droppables: this.getDroppables(), onSnap: function () {
        this.clone.setStyle("visibility", "visible");
        this.clone.setStyle("opacity", 0.5);
        this.element.set("opacity", this.options.opacity || 0);
        this.fireEvent("start", [this.element, this.clone])
    }.bind(this), onDrop: this.insert.bind(this), onCancel: this.reset.bind(this), onComplete: this.end.bind(this), onEnter: this.doEnter.bind(this), onLeave: this.doLeave.bind(this)});
    this.clone.inject(this.element, "before");
    this.drag.start(b)
}, doEnter: function (b, a) {
    this.fireEvent("enter", [b, a])
}, doLeave: function (b, a) {
    this.fireEvent("leave", [b, a])
}});
String.implement({bLength: function () {
    if (this == null) {
        return 0
    } else {
        return(this.length + this.replace(/[\u0000-\u00ff]/g, "").length)
    }
}, bSubString: function (f, b) {
    var a = 0;
    var c = this.replace(/[\s\S]/g, function (j, g, h) {
        if (j.charCodeAt(0) > 127) {
            a++
        }
        if (a + g >= b) {
            return""
        }
        return j
    });
    return c
}, toHash: function () {
    if (!this.contains("|") && !this.contains(",") && !this.contains("code") && !this.contains("caption")) {
        return this
    }
    var c = new Hash();
    var b = this.split("|");
    b.each(function (f) {
        if (f.contains(",")) {
            var a = f.split(",")[0];
            c.set(a, f.replace((a + ","), ""))
        } else {
            c.set(f, null)
        }
    });
    return c
}, startWith: function (a) {
    if (a == null || a == "" || this.length == 0 || a.length > this.length) {
        return false
    }
    if (this.substr(0, a.length) == a) {
        return true
    } else {
        return false
    }
    return true
}, endWith: function (a) {
    if (a == null || a == "" || this.length == 0 || a.length > this.length) {
        return false
    }
    if (this.substring(this.length - a.length) == a) {
        return true
    } else {
        return false
    }
    return true
}});
Options.implement({htmlOptions: function (g) {
    for (var f in (this.options || {})) {
        var b = g.get(f);
        this.options[f] = ($chk(b) && $defined(b)) ? b : this.options[f];
        if (f == "pNode") {
            this.options[f] = g.pNode;
            continue
        }
        if ($type(this.options[f]) != "function" && (/^on[A-Z]/).test(f)) {
            var a = this.getFunc(this.options[f]);
            for (var c = 0; c < a.length; c++) {
                this.addEvent(f, a[c])
            }
        }
    }
    return this.setOptions()
}, getFunc: function (a) {
    return sword_getFunc(a)
}});
function sword_getFunc(h) {
    if (!h) {
        h = ""
    }
    if (typeof h == "function") {
        h = h.toString();
        var g = h.indexOf("{") + 1;
        if (g > 0) {
            var f = h.lastIndexOf("}");
            h = h.substring(g, f)
        }
    }
    var k = h.split(/\s*;\s*/);
    var c = [];
    for (var b = 0; b < k.length; b++) {
        if (k[b].trim() != "") {
            var j = k[b].substring(0, k[b].indexOf("(")) || undefined;
            var a = k[b].substring(k[b].indexOf("(") + 1, k[b].indexOf(")")) || undefined;
            if ((a && a.trim() == "") || a == undefined) {
                a = ""
            } else {
                a = "," + a
            }
            c.push(new Function("return sword_excutefunc(" + j.trim() + ",arguments" + a + ")"))
        }
    }
    return c
}
function sword_excutefunc(h, b) {
    var g = new Array();
    for (var c = 2; c < arguments.length; c++) {
        g.push(arguments[c])
    }
    if (typeof(h) == "object") {
        var a = new function (j) {
            h(g)
        };
        return
    }
    if (b) {
        var f = Array().slice.call(b);
        g = g.concat(f)
    }
    return h.apply(this, g)
}
Fx.ProgressBar = new Class({Extends: Fx, options: {text: null, url: null, transition: Fx.Transitions.Circ.easeOut, fit: true, link: "cancel"}, initialize: function (c, b) {
    this.element = $(c);
    this.parent(b);
    var a = this.options.url;
    if (a) {
        this.element.setStyles({"background-image": "url(" + a + ")", "background-repeat": "no-repeat"})
    }
    if (this.options.fit) {
        a = a || this.element.getStyle("background-image").replace(/^url\(["']?|["']?\)$/g, "");
        if (a) {
            var f = new Image();
            f.onload = function () {
                this.fill = f.width;
                f = f.onload = null;
                this.set(this.now || 0)
            }.bind(this);
            f.src = a;
            if (!this.fill && f.width) {
                f.onload()
            }
        }
    } else {
        this.set(0)
    }
}, start: function (b, a) {
    return this.parent(this.now, (arguments.length == 1) ? b.limit(0, 100) : b / a * 100)
}, set: function (c) {
    this.now = c;
    var a = (this.fill) ? (((this.fill / -2) + (c / 100) * (this.element.width || 1) || 0).round() + "px") : ((100 - c) + "%");
    this.element.setStyle("backgroundPosition", a + " 0px").title = Math.round(c) + "%";
    var b = $(this.options.text);
    if (b) {
        b.set("text", Math.round(c) + "%")
    }
    return this
}});
var WidgetFactory = new Class({name: "WidgetFactory", initialize: function () {
}, create: function (param) {
    var swordWidget = null;
    var className = param;
    var loadSwordCss, loadCssName;
    if ($type(param) != "string") {
        className = param.get("sword");
        loadSwordCss = param.get("loadSwordCss");
        loadCssName = param.get("loadStyle")
    }
    if ($SwordWebRunmode.isDev()) {
        if (className != "SwordForm_plex") {
            jsR.doIm(className, loadSwordCss, loadCssName)
        } else {
            jsR.doIm("SwordForm", loadSwordCss, loadCssName)
        }
    }
    swordWidget = eval("new " + className + "()");
    return swordWidget
}});
var PageContainer = new Class({Implements: [Events, Options], name: "PageContainer", widgetFactory: new WidgetFactory(), redirect: null, mask: null, initData: null, calendar: null, select: null, uploadCommit: null, edit: false, editor: null, pinitData: null, widgets: new Hash(), studioComm: null, isEdit: function () {
    return this.edit
}, initialize: function (a) {
    this.edit = a
}, initSwordTag: function (b) {
    var a = [];
    if ($defined(b)) {
        a = $(b).getElements("div[sword][sword!='PageInit']")
    } else {
        a = $$("div[sword][sword!='PageInit']")
    }
    var c = [];
    a.each(function (h, g) {
        if (h.getAttribute("lazy") != "true") {
            c.include(h);
            h.set("isload", "true")
        }
    }.bind(this));
    a = c;
    if (this.isEdit()) {
        this.getEditor().start()
    }
    this.detailed = "";
    var f = new Date().getTime();
    a.each(function (h) {
        var g = new Date().getTime();
        if (this.isEdit()) {
            this.getEditor().dealEl(h)
        }
        this.initWidgetParam(h);
        this.detailed = this.detailed + h.get("name") + ":" + (new Date().getTime() - g) + "----"
    }, this);
    this.detailed = this.detailed + "总时间：" + (new Date().getTime() - f)
}, initWidgetParam: function (b) {
    var a = this.widgetFactory.create(b);
    b.pNode = b;
    this.widgets.set(b.get("name"), a);
    a.initParam(b)
}, initSwordPageData: function () {
    if ($defined($("SwordPageData"))) {
        var b = $("SwordPageData").get("data");
        if ($chk(b)) {
            pc.initData = JSON.decode(b.replace(/&apos;/g, "'"))
        }
    } else {
        var a = this.getPageInit();
        if (a) {
            a.initStaticData()
        }
    }
    if (pc.initData) {
        pc.initData.getAttr = pc.getAttrFunc
    }
    _pcSwordClientPageJumpTiming("11")
}, getAttrFunc: function (b) {
    for (var a = 0; a < (this.data || []).length; a++) {
        var c = this.data[a];
        if (c.name == b) {
            return c.value
        }
    }
}, initPageData: function () {
    var a = this.getPageInit();
    if ($defined($("SwordPageData"))) {
        if ($chk(this.initData)) {
            var b = {dataObj: this.initData};
            if (a) {
                $extend(b, {onSuccess: this.getFunc(a.options.onSuccess)[0], onError: this.getFunc(a.options.onError)[0], onFinish: this.getFunc(a.options.onFinish)[0], onAfterLoadData: this.getFunc(a.options.onAfterLoadData)[0]})
            }
            b.initpage = true;
            pc.loadData(b)
        }
    } else {
        if (a) {
            a.getInitData({onSuccess: this.getFunc(a.options.onSuccess)[0], onError: this.getFunc(a.options.onError)[0], onFinish: this.getFunc(a.options.onFinish)[0], onAfterLoadData: this.getFunc(a.options.onAfterLoadData)[0]})
        }
    }
}, initPublicTag: function () {
    this.redirect = this.widgetFactory.create("Redirect")
}, initPageDataRedirectFormLast: function () {
    var b = {dataObj: this.pinitData};
    var a = this.getPageInit();
    $extend(b, {onSuccess: this.getFunc(a.options.onSuccess)[0], onError: this.getFunc(a.options.onError)[0], onFinish: this.getFunc(a.options.onFinish)[0]});
    param.initpage = true;
    this.loadData(b)
}, initCoutTag: function () {
    var a = $$("*[tag='cout'][name]");
    a.each(function (b) {
        var c = this.getInitData(b.get("name"));
        if (!$chk(c)) {
            return
        }
        c = c.value;
        b.set("text", c)
    }, this)
}, initPageDataRedirectFormLastBefore: function () {
    var f, b = parent.pc.redirect;
    if (b.options.items.length == 2) {
        f = b.getData()
    } else {
        if (b.options.items.length > 2) {
            var g = b.options.items.length;
            var a = b.options.items[g - 2].page;
            var c = $(parent.document.body).getElement("iframe[ifname=RedirectIframe_" + a + "]").contentWindow;
            f = c.pc.redirect.getData()
        }
    }
    this.pinitData = f;
    this.initData = f
}, swordCacheArray: [], initSwordCacheData: function () {
    var b = $("SwordCacheData");
    var a = null;
    if ($defined(b)) {
        a = b.get("queryTree");
        if (a) {
            this.swordCacheArray.combine(JSON.decode(a))
        }
        a = b.get("query");
        if (a) {
            this.swordCacheArray.combine(JSON.decode(a))
        }
    }
}, process: function () {
    this.initPublicTag();
    this.initSwordPageData();
    if (jsR.config.SwordClientCache) {
        this.initSwordCacheData()
    }
    try {
        if (parent && parent.jsR && window.frameElement && window.frameElement.name && window.frameElement.name.contains("RedirectIframe_")) {
            this.initPageDataRedirectFormLastBefore()
        }
    } catch (b) {
    }
    this.firePIOnBefore();
    _pcSwordClientPageJumpTiming("12");
    this.initSwordTag();
    _pcSwordClientPageJumpTiming("13");
    this.firePIOnDataInit();
    var a = false;
    try {
        a = (parent && parent.jsR && window.frameElement && window.frameElement.name && window.frameElement.name.contains("RedirectIframe_"))
    } catch (b) {
    }
    if (a) {
        this.initPageDataRedirectFormLast()
    } else {
        this.initPageData()
    }
    this.firePIOnAfter()
}, firePIOnDataInit: function () {
    var a = this.getPageInit();
    if (a) {
        a.fireEvent("onDataInit", pc.initData)
    }
}, firePIOnAfter: function () {
    var pi = this.getPageInit();
    if (pi) {
        pi.fireEvent("onAfter", pc.initData)
    }
    var afters = jsR.config.onAfter;
    if ($type(afters) == "array") {
        afters.each(function (ev) {
            try {
                eval(ev.replace("()", ""))
            } catch (e) {
                return
            }
            var f = pi.getFunc(ev)[0];
            f()
        })
    }
}, firePIOnBefore: function () {
    var pi = this.getPageInit();
    if (pi) {
        var befores = jsR.config.onBefore;
        if ($type(befores) == "array") {
            befores.each(function (ev) {
                try {
                    eval(ev.replace("()", ""))
                } catch (e) {
                    return
                }
                var f = pi.getFunc(ev)[0];
                f()
            })
        }
        pi.fireEvent("onBefore", pc.initData)
    }
}, setWidget: function (a, b) {
    this.widgets.set(a, b)
}, getWidget: function (a) {
    return this.widgets.get(a)
}, getWidgetsByType: function (a) {
    return this.widgets.filter(function (c, b) {
        return c.name == a
    }, this)
}, getMask: function () {
    if (!$defined(this.mask)) {
        this.mask = this.widgetFactory.create("SwordMask")
    }
    return this.mask
}, getUploadCommit: function () {
    if (!$defined(this.uploadCommit)) {
        this.uploadCommit = this.widgetFactory.create("SwordFileUpload")
    }
    return this.uploadCommit
}, getCalendar: function () {
    if (!$defined(this.calendar)) {
        this.calendar = this.widgetFactory.create("SwordCalendar")
    }
    return this.calendar
}, getSelect: function () {
    if (!$defined(this.select)) {
        this.select = this.widgetFactory.create("SwordSelect")
    }
    return this.select
}, getValidate: function () {
    if (!$defined(this.validate)) {
        this.validate = this.widgetFactory.create("SwordValidator")
    }
    return this.validate
}, getEditor: function () {
    if (!$defined(this.editor)) {
        this.editor = this.widgetFactory.create("Editor")
    }
    return this.editor
}, getValidateCode: function () {
    if (!$defined(this.validateCode)) {
        this.validateCode = this.widgetFactory.create("SwordValidateCode")
    }
    return this.validateCode
}, getPageInit: function () {
    if (!$defined(this.pageInit)) {
        var a = $$("div[sword='PageInit']");
        if (a.length > 1) {
            throw new Error("一个页面只能设置一个初始数据操作！")
        } else {
            if (a.length == 1) {
                this.pageInit = this.widgetFactory.create("PageInit");
                this.pageInit.initParam(a[0])
            } else {
                if (a.length == 0) {
                    this.pageInit = this.widgetFactory.create("PageInit")
                }
            }
        }
    }
    return this.pageInit
}, getDownLoadForm: function () {
    if (!this.downLoadForm) {
        var a = "swordDownLoadIframe";
        this.downLoadForm = new Element("form", {name: "swordDownLoadForm", method: "post", target: a, action: "download.sword", styles: {display: "none"}}).inject($(document.body));
        new Element("iframe", {id: a, name: a, styles: {display: "none"}}).inject($(document.body));
        this.downLoadForm.postReqInput = new Element("input", {name: "postData"}).inject(this.downLoadForm)
    }
    return this.downLoadForm
}, submit: function () {
    if (arguments.length != 1) {
        return
    }
    var a = arguments[0]["widgets"][0];
    var f = this.getWidget(a);
    if (!f.validate()) {
        return
    }
    var c = {ctrl: arguments[0].ctrl || "", tid: arguments[0].tid || "", data: f.getSubmitData()};
    var b = new Request({method: "post", async: true, url: "ajax.sword"});
    b.onSuccess = function (g) {
        if (!$chk(g)) {
            return
        }
        var h = JSON.decode(g);
        this.loadData({dataObj: h})
    }.bind(this);
    b.onFailure = function () {
        this.alertError("提交数据出错了。。。pc.submit")
    }.bind(this);
    b.send("postData=" + JSON.encode(c))
}, create: function (a) {
    return this.widgetFactory.create(a)
}, loadData: function (f) {
    MaskDialog.hide();
    var a = f.dataObj;
    var j = f.onError;
    var n = f.onSuccess;
    var c = f.loaddata;
    if (!$chk(a)) {
        if ($defined(f.onFinish)) {
            f.onFinish(a)
        }
        return
    }
    if (!$defined(a.getAttr)) {
        a.getAttr = this.getAttrFunc
    }
    if (a.exception) {
        if ($defined(j)) {
            j(a)
        }
        if (f.errMes != false) {
            if (a.ajaxErrorPage) {
                if (!a.exceptionMes) {
                    a.exceptionMes = ""
                }
                var o = JSON.decode(a.ajaxErrorPopupParam.replace(/&apos;/g, "'")) || {titleName: "出错了！", width: 412, height: 450};
                var k = window.document;
                if ($type(window.document.body) == "element" && $(window.document.body).getHeight() == 0 && $(window.document.body).getWidth() == 0) {
                    k = parent.window.document
                }
                var b = 0;
                if (k.body && k.body.scrollTop) {
                    b = k.body.scrollTop
                } else {
                    if (k.documentElement && k.documentElement.scrollTop) {
                        b = k.documentElement.scrollTop
                    }
                }
                o.top = o.top + b;
                var l = window;
                if ($type(window.document.body) == "element" && $(window.document.body).getHeight() == 0 && $(window.document.body).getWidth() == 0) {
                    l = parent.window
                }
                o.param = {win: l, data: a};
                swordAlertIframe(jsR.rootPath + "sword?ctrl=SwordPage_redirect&pagename=" + a.ajaxErrorPage, o, null)
            } else {
                this.alertError('<b><font color="red">出错了！</font></b><br><font color="blue" >错误名称</font> : ' + a.exceptionName + '  <br><font color="blue" >错误信息</font> : ' + a.exceptionMes + '<br><font color="blue" >调试信息</font> : ' + a.debugMes)
            }
        }
        pc.getMask().unmask();
        return
    } else {
        var h = a.message;
        if ($defined(h)) {
            if (h == "SWORD_TIME_OUT") {
                _TIMEOUT()
            } else {
                swordAlert(h)
            }
        }
        if ($defined(n)) {
            n(a);
            if (!document.body) {
                return
            }
        }
    }
    if ($defined(f.onFinish)) {
        f.onFinish(a)
    }
    if ($chk(f.url)) {
        _pcSwordClientAJAXTiming("32", f.url, f.dataObj.getAttr("sessionID"), f.req.tid, f.req.ctrl)
    } else {
        _pcSwordClientPageJumpTiming("14")
    }
    if (!$defined(f.redirect) || f.redirect != false) {
        if ($chk(a.page)) {
            var m = a.page;
            a.page = null;
            this.redirect.setData(a);
            if (m.lastIndexOf("?") != -1) {
                m += "&"
            } else {
                m += "?"
            }
            m += "r=" + Math.random();
            if (Browser.Engine.gecko) {
                this.redirect.go.delay(1, this.redirect, [m])
            } else {
                this.redirect.go(m)
            }
            return
        }
    }
    if (c == "widget") {
        return
    }
    var g = a.data;
    if ($chk(!g)) {
        return
    }
    g.each(function (t) {
        if (t.type == "") {
            return
        }
        if (t.sword == "SwordSelect") {
            if (f.initpage == true) {
            } else {
                if (t.dataName) {
                    var s = t.data;
                    if (s.length == 1 && !$chk(s[0].code) && !$chk(s[0].caption)) {
                        var r = {sword: "SwordSelect", name: t.dataName, data: []};
                        this.reloadSel1(t.dataName, r)
                    } else {
                        this.reloadSel(t.dataName, a)
                    }
                }
            }
            return
        }
        var q = t.name;
        if ($chk(!q)) {
            return
        }
        if (!q.contains(".") && pageContainer.getWidget4loaddata(q) == null) {
            return
        }
        if (q.contains(".")) {
            var p = q.split(".");
            if (pageContainer.getWidget4loaddata(p[0]) == null) {
                return
            }
        }
        if (t.loaddata != "widget") {
            if (q.contains(".")) {
                var p = q.split(".");
                pageContainer.getWidget4loaddata(p[0]).initData(t)
            } else {
                pageContainer.getWidget4loaddata(q).initData(t)
            }
        }
    }, this);
    this.initCoutTag();
    if ($defined(f.onAfterLoadData)) {
        f.onAfterLoadData(a)
    }
}, widgets_loaddataOnly: new Hash(), setWidget4loaddata: function (a, b) {
    if (!this.widgets_loaddataOnly.get(a)) {
        this.widgets_loaddataOnly.set(a, [])
    }
    this.widgets_loaddataOnly.get(a).push(b)
}, getWidget4loaddata: function (a) {
    if (this.widgets_loaddataOnly.get(a)) {
        var b = [];
        b.initData = function (c) {
            b.each(function (f) {
                if (f) {
                    f.initData(c)
                }
            })
        };
        return b.include(this.getWidget(a)).extend(this.widgets_loaddataOnly.get(a))
    } else {
        return this.getWidget(a)
    }
}, getResData: function (f, c, a) {
    if (!$chk(a)) {
        a = "name"
    }
    if ($chk(!c)) {
        return
    }
    var g = c.data;
    if ($chk(!g)) {
        return
    }
    var b;
    g.each(function (j) {
        var h = j[a];
        if ($chk(!h)) {
            return
        }
        if (f == h) {
            b = j;
            return
        }
    }, this);
    return b
}, downLoad: function (f) {
    var a = "download.sword";
    if (f.bindParam) {
        var g = f.tid;
        var b = f.ctrl;
        if ($chk(g)) {
            if (g.indexOf("?") != -1) {
                a = a + g.substr(g.indexOf("?"), g.length - 1)
            }
        } else {
            if ($chk(b)) {
                if (b.indexOf("?") != -1) {
                    a = a + b.substr(b.indexOf("?"), b.length - 1)
                }
            }
        }
    }
    var c = this.getDownLoadForm().set({target: "swordDownLoadIframe", action: a});
    c.postReqInput.set("value", JSON.encode(f));
    c.submit()
}, SwordformSubmit: function (f, h) {
    var a = "form.sword";
    if (f.bindParam) {
        var j = f.tid;
        var b = f.ctrl;
        if ($chk(j) && j.indexOf("?") != -1) {
            a = a + j.substr(j.indexOf("?"), j.length - 1)
        } else {
            if ($chk(b) && b.indexOf("?") != -1) {
                a = a + b.substr(b.indexOf("?"), b.length - 1)
            }
        }
    }
    if (jsR.config.SwordClientTiming) {
        if (a.indexOf("sDate") == -1) {
            a = (a + ((a.indexOf("?") == -1) ? "?" : "&") + "sDate=" + new Date().getTime())
        }
        var j = f.tid;
        var b = f.ctrl;
        var g;
        if ($chk(j)) {
            if (j.indexOf("?") != -1) {
                g = j.substr(0, j.indexOf("?"))
            } else {
                g = j
            }
        } else {
            if ($chk(b)) {
                if (b.indexOf("?") != -1) {
                    g = b.substr(0, b.indexOf("?"))
                } else {
                    g = b
                }
            }
        }
        if (a.indexOf("sName") == -1 && $chk(g)) {
            a = a + ((a.indexOf("?") == -1) ? "?" : "&") + "sName=" + g
        }
        if (a.indexOf("rUUID") == -1) {
            a = a + "&rUUID=" + this.getRandomUUID()
        }
    }
    var c = this.getDownLoadForm().set({target: h, action: a});
    c.postReqInput.set("value", JSON.encode(f));
    c.submit()
}, postReq: function (f) {
    if ($defined(f.postType) && f.postType.contains("form")) {
        var n = "";
        if (f.postType.contains("form_")) {
            var j = f.postType.split("_");
            j.erase(j[0]);
            n = (j.length > 1) ? j.join("_") : j.join("")
        }
        this.SwordformSubmit(f.req, n);
        if ($defined(f.onFinish)) {
            f.onFinish()
        }
        return
    }
    if (f.postType == "download") {
        this.downLoad(f.req);
        if ($defined(f.onFinish)) {
            f.onFinish()
        }
        return
    }
    var g = true;
    var r = true;
    if ($defined(f.async) && f.async == false) {
        g = false
    }
    if ($defined(f.errMes) && f.errMes == false) {
        r = false
    }
    f.errMes = r;
    var p = f.req;
    var o = f.onSuccess;
    var k = f.onError;
    var c = f.loaddata;
    var a = "ajax.sword?r=" + Math.random();
    if (p.bindParam) {
        var l = p.tid;
        var q = p.ctrl;
        if ($chk(l) && l.indexOf("?") != -1) {
            a = a + "&" + l.substr(l.indexOf("?") + 1, l.length - 1);
            if (a.indexOf("sName") == -1) {
                a = a + "&sName=" + l.substr(0, l.indexOf("?"))
            }
        } else {
            if ($chk(q) && q.indexOf("?") != -1) {
                a = a + "&" + q.substr(q.indexOf("?") + 1, q.length - 1);
                if (a.indexOf("sName") == -1) {
                    a = a + "&sName=" + q.substr(0, q.indexOf("?"))
                }
            }
        }
    }
    if (jsR.config.SwordClientTiming) {
        if (a.indexOf("sDate") == -1) {
            a = a + ((a.indexOf("?") == -1) ? "?" : "&") + "sDate=" + new Date().getTime()
        }
        if (a.indexOf("rUUID") == -1) {
            a = a + "&rUUID=" + this.getRandomUUID()
        }
    }
    var h = new Request({method: "post", async: g, url: a});
    h.onSuccess = function (s) {
        if (!$chk(s)) {
            return
        }
        var t = f.dataObj = JSON.decode(s);
        if (!$defined(t.getAttr)) {
            t.getAttr = this.getAttrFunc
        }
        _pcSwordClientAJAXTiming("31", a, f.dataObj.getAttr("sessionID"), p.tid, p.ctrl);
        f.url = a;
        this.loadData(f);
        _pcSwordClientAJAXTiming("33", a, f.dataObj.getAttr("sessionID"), p.tid, p.ctrl)
    }.bind(this);
    h.onFailure = function () {
        swordAlertWrong("请求地址：" + a + "请求失败，状态码：" + h.status, {width: 380, height: 200});
        pc.getMask().unmask()
    }.bind(this);
    var b = "";
    if (f.encodeData && f.encodeData == "true") {
        b = encodeURI(JSON.encode(p))
    } else {
        b = JSON.encode(p);
        b = b.replace(/&/g, "#*^@^*#");
        b = b.replace(/%/g, "%25");
        b = b.replace(/[+]+/g, "%2B")
    }
    try {
        h.send("postData=" + b)
    } catch (m) {
        if (jsR.server()) {
            alert("与服务器连接断开，请尝试重新登录或与管理员联系!")
        }
        pc.getMask().unmask();
        throw m
    }
}, getReq: function (c) {
    var a = {tid: c.tid, ctrl: c.ctrl, page: c.page, data: c.widgets};
    var b = [];
    if ($chk(c.data)) {
        var f = c.data.split("&");
        f.each(function (j) {
            var h = j.split("=");
            var g = {sword: "attr", name: h[0], value: h[1]};
            b[b.length] = g
        })
    }
    if (!$chk(a.data)) {
        a.data = b
    } else {
        a.data.extend(b)
    }
    return a
}, getInitData: function (a) {
    if ($chk(a)) {
        return this.getResData(a, this.initData)
    } else {
        if (!$defined(this.initData)) {
            this.initData = []
        }
        if (!$defined(this.initData.getAttr)) {
            this.initData.getAttr = this.getAttrFunc
        }
        return this.initData
    }
}, getInitDataByDataName: function (a) {
    return this.getResData(a, this.initData, "dataName")
}, deleteDataByWidgetName: function (a) {
    return this.deleteData(a, this.initData)
}, deleteDataByDataName: function (a) {
    return this.deleteData(a, this.initData, "dataName")
}, deleteData: function (c, b, a) {
    if (!$chk(a)) {
        a = "name"
    }
    if ($chk(!b)) {
        return false
    }
    var f = b.data;
    if ($chk(!f)) {
        return false
    }
    f.each(function (j, g) {
        var h = j[a];
        if ($chk(!h)) {
            return false
        }
        if (c == h) {
            f[g] = {};
            return true
        }
    }, this)
}, alert: function (a) {
    swordAlert(a)
}, alertError: function (a) {
    swordAlertWrong(a, {width: 380, height: 200})
}, getStudioComm: function () {
    if (!$defined(this.studioComm)) {
        this.studioComm = this.widgetFactory.create("StudioComm")
    }
    return this.studioComm
}, reloadSel: function (a, c) {
    this.deleteDataByDataName(a);
    var b = this.getResData(a, c, "dataName");
    if (!b) {
        return
    }
    if (!pc.initData) {
        pc.initData = {data: []}
    }
    this.initData.data[this.initData.data.length] = b
}, reloadSel1: function (b, a) {
    this.deleteDataByDataName(b);
    this.initData.data[this.initData.data.length] = a
}, getRandomUUID: function () {
    return String.fromCharCode(Math.floor(Math.random() * 26) + "a".charCodeAt(0)).toUpperCase() + (Math.random() + "").substr(2) + new Date().getTime()
}, getServerName: function (b) {
    var g;
    var f;
    if (b.indexOf("tid") != -1) {
        var h = b.substr(b.indexOf("tid"));
        f = h.substr(h.indexOf("=") + 1)
    } else {
        if (b.indexOf("ctrl") != -1) {
            var c = b.substr(b.indexOf("ctrl"));
            f = c.substr(c.indexOf("=") + 1)
        } else {
            if (b.indexOf("sName") != -1) {
                var a = b.substr(b.indexOf("sName"));
                f = a.substr(a.indexOf("=") + 1)
            }
        }
    }
    if ($chk(f)) {
        if (f.indexOf("&") != -1) {
            g = f.substr(0, f.indexOf("&"))
        } else {
            g = f
        }
    } else {
        g = b
    }
    return g
}});
var pageContainer, pc;
function swordGetEdit() {
    var a = "" + window.location;
    var b = (a.indexOf("edit=true") != -1);
    if (b) {
        return b
    }
    var c = document.getElementsByTagName("script")[0];
    if (c.src.lastIndexOf("Sword.js") < 0) {
        return false
    } else {
        return c.getAttribute("edit") == "true"
    }
}
function $init_Gt() {
    if (window.top.setClientMonitorValue && window.top.SwordClientTiming) {
        jsR.config.SwordClientTiming = true
    }
    var a = swordGetEdit();
    pc = pageContainer = new PageContainer(a);
    pc.getSelect();
    pc.getMask();
    pc.process();
    MaskDialog.hide();
    _pcSwordClientPageJumpTiming("15")
}
function initSwordPage() {
    $init_Gt()
}
function unloadSword() {
    $$("iframe").set("src", "")
}
if (Browser.Engine.trident) {
    window.attachEvent("onload", initSwordPage)
} else {
    window.addEvent("domready", initSwordPage)
}
function _TIMEOUT() {
    if (window.top._SOWRDTIMEOUT) {
        window.top._SOWRDTIMEOUT()
    }
}
function _pcSwordClientAJAXTiming(m, b, o, j, n) {
    if (jsR.config.SwordClientTiming) {
        if (!$chk(o)) {
            return
        }
        var k = b.indexOf("sDate");
        if (k == -1) {
            return
        }
        var q = new Date().getTime();
        var p;
        var f;
        var g;
        var a;
        if ($chk(j)) {
            if (j.indexOf("?") != -1) {
                f = j.substr(0, j.indexOf("?"))
            } else {
                f = j
            }
        } else {
            if ($chk(n)) {
                if (n.indexOf("?") != -1) {
                    f = n.substr(0, n.indexOf("?"))
                } else {
                    f = n
                }
            }
        }
        if (!$chk(f)) {
            return
        }
        var h = document.location.href;
        if (h.indexOf("gndm") != -1) {
            g = h.substr(h.indexOf("gndm"));
            g = g.substr(g.indexOf("=") + 1);
            if (g.indexOf("&") != -1) {
                g = g.substr(0, g.indexOf("&"))
            }
        }
        if (b.indexOf("rUUID") != -1) {
            a = b.substr(b.indexOf("rUUID"));
            a = a.substr(a.indexOf("=") + 1);
            if (a.indexOf("&") != -1) {
                a = a.substr(0, a.indexOf("&"))
            }
        }
        var c = b.substr(k);
        c = c.substr(c.indexOf("=") + 1);
        var l;
        if (c.indexOf("&") != -1) {
            l = c.substr(0, c.indexOf("&"))
        } else {
            l = c
        }
        if (m == "31") {
            p = q - l
        } else {
            p = q - pc.clientAJAXTiming
        }
        pc.clientAJAXTiming = q;
        window.top.setClientMonitorValue(m, l, q, f, o, g, a, p)
    }
}
function _pcSwordClientPageJumpTiming(l) {
    if (jsR.config.SwordClientTiming) {
        if (!$chk(pc.initData)) {
            return
        }
        var m = pc.initData.getAttr("sessionID");
        if (!$chk(m)) {
            return
        }
        var g = document.location.href;
        var h = g.indexOf("sDate");
        if (h == -1) {
            return
        }
        var o = new Date().getTime();
        var n;
        var b;
        var f;
        var a;
        var c = pc.getServerName(g);
        if (!$chk(c)) {
            return
        }
        if (g.indexOf("gndm") != -1) {
            f = g.substr(g.indexOf("gndm"));
            f = f.substr(f.indexOf("=") + 1);
            if (f.indexOf("&") != -1) {
                f = f.substr(0, f.indexOf("&"))
            }
        }
        if (g.indexOf("rUUID") != -1) {
            a = g.substr(g.indexOf("rUUID"));
            a = a.substr(a.indexOf("=") + 1);
            if (a.indexOf("&") != -1) {
                a = a.substr(0, a.indexOf("&"))
            }
        }
        var k = g.substr(h);
        k = k.substr(k.indexOf("=") + 1);
        var j;
        if (k.indexOf("&") != -1) {
            j = k.substr(0, k.indexOf("&"))
        } else {
            j = k
        }
        if (l == "11") {
            n = o - j
        } else {
            n = o - pc.pageJumpTiming
        }
        pc.pageJumpTiming = o;
        window.top.setClientMonitorValue(l, j, o, c, m, f, a, n)
    }
}
var i18n = {chooseFile: "请选择文件", wait: "请稍后...", fileName: "文件名", fileSize: "文件大小", fileDelete: "删除", fileDownload: "下载", fileEdit: "编辑", fileAffix: "附件", fileAdd: "增加", fileCancel: "取消", months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"], days: ["日", "一", "二", "三", "四", "五", "六"], dateOrder: ["年", "月", "日", "时", "分", "秒"], bizSucMsg: "校验成功!", bizFaiMsg: "校验失败!", sysMsg: "系统错误!", menuCaption: ["刷新", "关闭当前项", "关闭其他项", "关闭所有项"], gridHide: "隐藏此列", gridEsc: "按升序排列", gridDesc: "按降序排列", gridCtrl: "控制面板", gridInsert: "请先选择一行,再执行此操作.", gridDelete: "请至少选择一行", gridDelConfirmTree: "确认删除?其子节点也将被删除!", gridDelConfirm: "确认删除?", gridLoadPage: "表格中有没有被保存的项目!点击确定放弃这些信息,执行此动作;点击取消,取消动作", gridTarNotExist1: "目标页[", gridTarNotExist2: "]不存在!", gridInsertRowDel: "此行为新增行，执行此操作会直接物理删除，信息将不能恢复!您要执行此操作吗？", gridSaveAlert: "该行数据没有保存，不能执行此操作!", gridFocus: "没有焦点可以转移", gridGo: "已经是当前页!", gridDi: "第", gridGoErr: "请输入一个大于0的整数", gridYe: "页", gridYeGong: "页/共", gridMeiYeShow: "每页", gridTiao: "条", gridJsd: "共", gridJsdL: "条", gridMeiYe: "每页", gridGong: "共", gridFirst: "已经是首页了!", gridLast: "已经是末页了!", saveSuc: "保存成功!", saveFai: "保存失败!", save: "提交", cancel: "取消", button: "按钮", firstPage: "首页", endPage: "末页", nextPage: "下一页", previousPage: "上一页", titleName: "提示框", okBtnName: "确定", cancelBtnName: "取消", defineBtnName: "自定义", boxMin: "最小化", boxMax: "最大化", boxNatural: "正常化", boxClose: "关闭", selectLoading: "正在加载数据请稍后...", toolEdit: "编辑", toolNew: "新建", toolDel: "删除", toolFresh: "刷新", toolOpen: "打开", toolFind: "查找", toolSave: "保存", toolBack: "返回", toolExport: "导出", toolAddtime: "增加时间", toolReducetime: "减少时间", toolAddright: "授权", toolReduceright: "撤权", num: "数字", numInt: "整数", numFloat: "浮点数", numScience: "科学计数法", character: "字符", chinese: "汉字", twoBytes: "双字节", english: "英文", date: "日期格式不正确", numChar: "数字或字符", numEnglish: "数字英文字符", qq: "不符合QQ号码格式", telephone: "不符合座机号码格式", cellphone: "不符合手机号码格式", idcard: "不符合身份证格式", postal: "不符合邮政编码格式", currency: "美元", email: "不符合邮箱地址格式", url: "不符合URL地址格式", and1: ",且", or: ",或者", must: "不能为空", contrast: "数值", range: "数值范围为", customCheckStyle: "不允许输入以下字符", length1: "字符串长度为", customFunction: "自定义校验", area: ["", "", "", "", "", "", "", "", "", "", "", "北京", "天津", "河北", "山西", "内蒙古", "", "", "", "", "", "辽宁", "吉林", "黑龙江", "", "", "", "", "", "", "", "上海", "江苏", "浙江", "安微", "福建", "江西", "山东", "", "", "", "河南", "湖北", "湖南", "广东", "广西", "海南", "", "", "", "重庆", "四川", "贵州", "云南", "西藏", "", "", "", "", "", "", "陕西", "甘肃", "青海", "宁夏", "新疆", "", "", "", "", "", "台湾", "", "", "", "", "", "", "", "", "", "香港", "澳门", "", "", "", "", "", "", "", "", "国外"], tabMenuFresh: "刷新", tabMenuClose: "关闭当前项", tabMenuCloseAll: "关闭所有项", tabMenuCloseOthers: "关闭其他项", nullStr: ""};
var PageInit = new Class({Implements: [Events, Options], name: "PageInit", options: {pNode: null, onBefore: $empty, onDataInit: $empty, onAfter: $empty, onSuccess: $empty, onError: $empty, onFinish: $empty, onAfterLoadData: $empty}, initialize: function () {
}, initParam: function (a) {
    a.pNode = a;
    this.htmlOptions(a)
}, initStaticData: function () {
    if (!$defined(this.options.pNode) || !$chk(this.options.pNode.get("data"))) {
        return
    }
    pc.initData = JSON.decode(this.options.pNode.get("data"))
}, getInitData: function (f) {
    if (!$defined(this.options.pNode)) {
        return
    }
    if ($chk(this.options.pNode.get("data"))) {
        f.dataObj = pc.initData;
        pc.loadData(f)
    } else {
        if ($chk(this.options.pNode.get("tid")) || $chk(this.options.pNode.get("ctrl"))) {
            var c = {ctrl: this.options.pNode.get("ctrl") || "", tid: this.options.pNode.get("tid") || "", data: []};
            var a = new Request({method: "post", async: true, url: "ajax.sword?a=" + Math.random()});
            a.onSuccess = function (g) {
                pc.initData = f.dataObj = JSON.decode(g);
                pc.loadData(f)
            };
            var b = JSON.encode(c);
            a.send("postData=" + b)
        }
    }
}});
var Redirect = new Class({Implements: Options, options: {data: null, isShowNavigator: "false", items: []}, navigator: null, topDiv: null, initialize: function () {
}, go: function (f) {
    var h = $(document.body).getScroll();
    h = (h.x == 0 && h.y == 0) ? null : h;
    var a;
    var c = $(parent.document);
    var b;
    if ($defined(c)) {
        b = c.getElements("div[name=SwordRedirect_topDiv][create=false]")
    }
    if (parent && $defined(b) && b.length != 0) {
        var g = (document.title == null) ? "空title页面" : document.title;
        parent.pc.redirect.options.items[parent.pc.redirect.options.items.length - 1].title = g;
        parent.pc.redirect.options.items[parent.pc.redirect.options.items.length - 1].bodyScroll = h;
        this.options.items = parent.pc.redirect.options.items;
        this.options.items[this.options.items.length - 1].iframe.setStyles({display: "none"});
        this.navigator = parent.pc.redirect.navigator;
        this.navigator.addItem(this.options.items[this.options.items.length - 1]);
        this.navigator.refreshItems();
        a = parent.document.createElement("iframe");
        a.frameBorder = "no";
        $(a).inject(parent.document.body)
    } else {
        if ($(document).getElements("div[name=SwordRedirect_topDiv][create=true]").length != 0) {
            this.topDiv.setProperty("create", "false");
            this.topDiv.setStyles({display: "none"})
        } else {
            this.topDiv = new Element("div", {name: "SwordRedirect_topDiv", create: "false", styles: {display: "none"}}).inject(document.body, "top");
            $$("body>*[name!=SwordRedirect_topDiv]").each(function (j) {
                this.topDiv.wraps(j)
            }, this)
        }
        var g = (document.title == null) ? "空title页面" : document.title;
        this.options.items.include({title: g, page: null, iframe: this.topDiv, bodyScroll: h});
        this.navigator = new SwordNavigation({navigatorItems: this.options.items, isShow: this.options.isShowNavigator});
        a = document.createElement("iframe");
        a.frameBorder = "no";
        $(a).inject(document.body)
    }
    if (jsR.server()) {
        $(a).setProperty("src", jsR.rootPath + "sword?ctrl=SwordPage_redirect&pagename=" + f)
    } else {
        $(a).setProperty("src", f)
    }
    $(a).setProperty("name", "RedirectIframe_" + f);
    $(a).set("ifname", "RedirectIframe_" + f);
    $(a).setProperty("frameborder", "no");
    $(a).setStyles({display: "", width: "100%", height: "100%", overflow: "auto", border: 0});
    $(a).addEvent("load", function () {
        if ($defined(window.frames["RedirectIframe_" + f])) {
            $(window.frames[window.frames.length - 1].document.body).setStyles({height: "100%"})
        } else {
            $(parent.frames[parent.frames.length - 1].document.body).setStyles({height: "100%"})
        }
    }.bind(this));
    this.options.items.include({title: null, page: f, iframe: $(a), bodyScroll: null})
}, back: function (a) {
    parent.pc.redirect.ItemBack(a)
}, ItemBack: function (b) {
    var f = false;
    var c;
    var a = 0;
    this.options.items.each(function (h, g) {
        if (f == true) {
            h.iframe.destroy()
        }
        if (h.page == b) {
            f = true;
            a = g;
            c = h.bodyScroll;
            h.iframe.setStyles({display: "block"})
        }
        if (f == true) {
            this.navigator.deleteItem(h.page)
        }
    }.bind(this));
    this.navigator.refreshItems();
    this.options.items = this.options.items.filter(function (h, g) {
        return(g <= a)
    });
    if (b == null) {
        this.options.items.empty();
        this.navigator.navBar.destroy();
        this.navigator == null;
        this.topDiv.setProperty("create", "true")
    }
    if ($defined(c)) {
        $(document.body).scrollTo(c.x, c.y)
    }
}, getData: function () {
    return this.options.data
}, setData: function (a) {
    this.options.data = a
}});
var SwordNavigation = new Class({Implements: [Events, Options], options: {left: "10%", top: 0, width: "80%", height: 20, isShow: "false", navigatorItems: null}, initialize: function (a) {
    this.setOptions(a);
    this.buildBar();
    this.refreshItems()
}, navBar: null, navUL: null, navBarSlider: null, buildBar: function () {
    this.navBar = new Element("div", {name: "SwordNavigation", "class": "navbar", styles: {position: "absolute", left: this.options.left, top: this.options.top, width: this.options.width, height: this.options.height}}).inject(document.body);
    if (this.options.isShow == "false") {
        this.navBar.setStyle("display", "none")
    }
    this.navUL = new Element("ul").inject(this.navBar)
}, refreshItems: function () {
    this.navUL.empty();
    var a = new Element("li", {name: "currentPos", text: "当前位置:"}).inject(this.navUL);
    this.options.navigatorItems.each(function (c, b) {
        this.buildItem(c, b)
    }.bind(this))
}, buildItem: function (h, f) {
    var c = new Element("li", {name: h.page}).inject(this.navUL);
    var b = new Element("a", {href: "#", title: h.title, page: h.page, text: h.title}).inject(c);
    b.addEvent("click", function (j) {
        var k = new Event(j).target.getProperty("title");
        var a = new Event(j).target.getProperty("page");
        if ($defined(pc.redirect)) {
            pc.redirect.ItemBack(a)
        }
    }.bind(this));
    if (f != (this.options.navigatorItems.length - 1)) {
        var g = new Element("span", {text: ">>"}).inject(c)
    }
}, addItem: function (a) {
    this.options.navigatorItems.include(a)
}, deleteItem: function (a) {
    this.options.navigatorItems = this.options.navigatorItems.filter(function (c, b) {
        return(c.page != a)
    }.bind(this))
}});
var _swordDefaultAttrs = {value: "value", dataformat: "dataformat", readonly: "readonly", disabled: "disabled", maxlength: "maxlength", onclick: "onclick", ondblclick: "ondblclick", onchange: "onchange", onmouseover: "onmouseover", onmouseout: "onmouseout", onblur: "onblur", onkeydown: "onkeydown", onkeyup: "onkeyup", onfocus: "onfocus"};
var ConvertHtml = new Class({build: function (f, c, b) {
    var a = this.init(f, c, b);
    f.set(a)
}, init: function (k, j, c) {
    var b = {};
    if (j) {
        if (Browser.Engine.trident) {
            ["onclick", "ondblclick", "onchange", "onmouseover", "onmouseout", "onblur", "onkeydown", "onkeyup", "onfocus"].each(function (l) {
                if (j.get(l)) {
                    this.convertEvent(k, {name: l, value: j.get(l)}, c)
                }
            }.bind(this));
            if (j.getAttribute("readonly") == undefined) {
                return{dataformat: k.get("dataformat") || j.get("dataformat"), value: k.get("value") || j.get("value"), disabled: k.disabled || j.disabled, maxlength: j.get("maxLength") || 1000000}
            } else {
                return{dataformat: k.get("dataformat") || j.get("dataformat"), value: k.get("value") || j.get("value"), readonly: true, disabled: k.disabled || j.disabled, maxlength: j.get("maxLength") || 1000000}
            }
        } else {
            var a = j.attributes;
            if (!a) {
                return b
            }
            for (var h = 0; h < a.length; h++) {
                if (a[h].specified) {
                    var g = this.convertAttr(k, a[h], c);
                    if (g.type == "1") {
                        this.convertEvent(k, a[h], c)
                    } else {
                        if (g.type == "0") {
                            var f = a[h].name;
                            b[f] = g.value
                        }
                    }
                }
            }
        }
    }
    return b
}, convertAttr: function (g, a, c) {
    var f = {};
    var h = a.name;
    var b = _swordDefaultAttrs[h.toLowerCase()];
    if (b) {
        if ((/^on[a-zA-Z]/).test(a.name)) {
            f.type = "1"
        } else {
            f.type = "0";
            f.value = a.value ? a.value : true
        }
    } else {
        f.type = "-1"
    }
    return f
}, convertEvent: function (g, a, c) {
    var b = sword_getFunc(a.value);
    for (var f = 0; f < b.length; f++) {
        if (c && c[a.name]) {
            g.addEvent(a.name.toLowerCase().substring(2), b[f].pass(c[a.name]))
        } else {
            g.addEvent(a.name.toLowerCase().substring(2), b[f])
        }
    }
}});
var _convertHTML = new ConvertHtml();
function sword_convertHTML(c, b, a) {
    _convertHTML.build(c, b, a)
}
var _SwordDF = SwordDataFormat = {MONTH_NAMES: new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"), DAY_NAMES: new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"), toChi: function (a) {
    return a.replace(/0/g, "零").replace(/1/g, "一").replace(/2/g, "二").replace(/3/g, "三").replace(/4/g, "四").replace(/5/g, "五").replace(/6/g, "六").replace(/7/g, "七").replace(/8/g, "八").replace(/9/g, "九")
}, toChiNum: function (c) {
    var b = c / 1;
    var a = b + "";
    if (b > 9 && b < 20) {
        a = "十" + a.charAt(1)
    } else {
        if (b > 19) {
            a = a.charAt(0) + "十" + a.charAt(1)
        }
    }
    a = this.toChi(a);
    if (b != 0) {
        a = a.replace(/零/g, "")
    }
    return a
}, toNum: function (a) {
    return a.replace(/零/g, "0").replace(/一/g, "1").replace(/二/g, "2").replace(/三/g, "3").replace(/四/g, "4").replace(/五/g, "5").replace(/六/g, "6").replace(/七/g, "7").replace(/八/g, "8").replace(/九/g, "9")
}, toNum2: function (b) {
    var a = b.length;
    if (b == "十") {
        return 10
    }
    if (a == 1 && "十" != b) {
        return this.toNum(b)
    }
    if (a == 2 && "十" != b.charAt(a - 1)) {
        return this.toNum(b.replace(/十/g, "一"))
    }
    if (a == 2 && "十" == b.charAt(a - 1)) {
        return this.toNum(b.replace(/十/g, "零"))
    }
    if (a == 3) {
        return this.toNum(b.replace(/十/g, ""))
    }
}, LZ: function (a) {
    return(a < 0 || a > 9 ? "" : "0") + a
}, isDate: function (c, b) {
    var a = this.formatStringToDate(c, b);
    if (a == 0) {
        return false
    }
    return true
}, compareDates: function (g, h, c, f) {
    var b = this.formatStringToDate(g, h);
    var a = this.formatStringToDate(c, f);
    if (b == 0 || a == 0) {
        alert("format格式转换有问题");
        return
    } else {
        if (b > a) {
            return true
        }
    }
    return false
}, formatDateToString: function (L, G) {
    G = G + "";
    var o = "";
    var x = 0;
    var J = "";
    var g = "";
    var n = L.getFullYear() + "";
    var j = L.getMonth() + 1;
    var I = L.getDate();
    var q = L.getDay();
    var p = L.getHours();
    var A = L.getMinutes();
    var t = L.getSeconds();
    var v, w, b, u, N, f, F, D, B, r, P, p, O, l, a, C;
    var z = new Object();
    z.y = "" + n;
    z.yyyy = n;
    z.yy = n.substring(2, 4);
    z.M = j;
    z.MM = this.LZ(j);
    z.MMM = this.MONTH_NAMES[j - 1];
    z.NNN = this.MONTH_NAMES[j + 11];
    z.d = I;
    z.dd = this.LZ(I);
    z.E = this.DAY_NAMES[q + 7];
    z.EE = this.DAY_NAMES[q];
    z.H = p;
    z.HH = this.LZ(p);
    if (p == 0) {
        z.h = 12
    } else {
        if (p > 12) {
            z.h = p - 12
        } else {
            z.h = p
        }
    }
    z.hh = this.LZ(z.h);
    if (p > 11) {
        z.K = p - 12
    } else {
        z.K = p
    }
    z.k = p + 1;
    z.KK = this.LZ(z.K);
    z.kk = this.LZ(z.k);
    if (p > 11) {
        z.a = "PM"
    } else {
        z.a = "AM"
    }
    z.m = A;
    z.mm = this.LZ(A);
    z.s = t;
    z.ss = this.LZ(t);
    z.NNNN = this.toChi(z.yyyy);
    z.NN = this.toChi(z.yy);
    z.N = this.toChi(z.y);
    z.Y = this.toChiNum(j);
    z.R = this.toChiNum(I);
    z.S = this.toChiNum(z.h);
    z.T = this.toChiNum(z.H);
    z.U = this.toChiNum(z.K);
    z.V = this.toChiNum(z.k);
    z.F = this.toChiNum(A);
    z.W = this.toChiNum(t);
    while (x < G.length) {
        J = G.charAt(x);
        g = "";
        while ((G.charAt(x) == J) && (x < G.length)) {
            g += G.charAt(x++)
        }
        if (z[g] != null) {
            o = o + z[g]
        } else {
            o = o + g
        }
    }
    return o
}, _isInteger: function (c) {
    var b = "1234567890";
    for (var a = 0; a < c.length; a++) {
        if (b.indexOf(c.charAt(a)) == -1) {
            return false
        }
    }
    return true
}, _isInteger_chi: function (c) {
    var b = "零一二三四五六七八九十";
    for (var a = 0; a < c.length; a++) {
        if (b.indexOf(c.charAt(a)) == -1) {
            return false
        }
    }
    return true
}, _getInt: function (h, f, g, c) {
    for (var a = c; a >= g; a--) {
        var b = h.substring(f, f + a);
        if (b.length < g) {
            return null
        }
        if (this._isInteger(b)) {
            return b
        }
    }
    return null
}, _getInt2: function (h, f, g, c) {
    for (var a = c; a >= g; a--) {
        var b = h.substring(f, f + a);
        if (b.length < g) {
            return null
        }
        if (b) {
            return b
        }
    }
    return null
}, _getInt_month: function (f, c) {
    for (var a = 2; a >= 1; a--) {
        var b = f.substring(c, c + a);
        if (b.length < 1) {
            return null
        }
        if (b.length == 1) {
            return b
        }
        if (["十一", "十二"].contains(b)) {
            return b
        }
    }
    return null
}, _getInt_date: function (f, c) {
    for (var a = 3; a >= 1; a--) {
        var b = f.substring(c, c + a);
        if (b.length < 1) {
            return null
        }
        if (b.length == 1) {
            return b
        }
        if (this._isInteger_chi(b)) {
            return b
        }
    }
    return null
}, formatStringToDate: function (A, r) {
    A = A + "";
    r = r + "";
    var z = 0;
    var n = 0;
    var t = "";
    var h = "";
    var w = "";
    var k, j;
    var b = new Date();
    var l = b.getFullYear();
    var v = b.getMonth() + 1;
    var u = 1;
    var f = b.getHours();
    var s = b.getMinutes();
    var p = b.getSeconds();
    var m = "";
    while (n < r.length) {
        t = r.charAt(n);
        h = "";
        while ((r.charAt(n) == t) && (n < r.length)) {
            h += r.charAt(n++)
        }
        if (h == "NNNN" || h == "NN" || h == "N") {
            if (h == "NNNN") {
                k = 4;
                j = 4
            }
            if (h == "NN") {
                k = 2;
                j = 2
            }
            if (h == "N") {
                k = 2;
                j = 4
            }
            l = this._getInt2(A, z, k, j);
            if (l == null) {
                return 0
            }
            l = this.toNum(l);
            z += l.length;
            if (l.length == 2) {
                if (l > 70) {
                    l = 1900 + (l - 0)
                } else {
                    l = 2000 + (l - 0)
                }
            }
        } else {
            if (h == "Y") {
                v = this._getInt_month(A, z);
                z += v.length;
                v = this.toNum2(v);
                if (v == null || (v < 1) || (v > 12)) {
                    return 0
                }
            } else {
                if (h == "R") {
                    u = this._getInt_date(A, z);
                    z += u.length;
                    u = this.toNum2(u);
                    if (u == null || (u < 1) || (u > 31)) {
                        return 0
                    }
                } else {
                    if (h == "S") {
                        f = this._getInt_date(A, z);
                        z += f.length;
                        f = this.toNum2(f);
                        if (f == null || (f < 1) || (f > 12)) {
                            return 0
                        }
                    } else {
                        if (h == "T") {
                            f = this._getInt_date(A, z);
                            z += f.length;
                            f = this.toNum2(f);
                            if (f == null || (f < 0) || (f > 23)) {
                                return 0
                            }
                        } else {
                            if (h == "U") {
                                f = this._getInt_date(A, z);
                                z += f.length;
                                f = this.toNum2(f);
                                if (f == null || (f < 0) || (f > 11)) {
                                    return 0
                                }
                            } else {
                                if (h == "V") {
                                    f = this._getInt_date(A, z);
                                    z += f.length;
                                    f = this.toNum2(f);
                                    f--;
                                    if (f == null || (f < 1) || (f > 24)) {
                                        return 0
                                    }
                                } else {
                                    if (h == "F") {
                                        s = this._getInt_date(A, z);
                                        z += s.length;
                                        s = this.toNum2(s);
                                        if (s == null || (s < 0) || (s > 59)) {
                                            return 0
                                        }
                                    } else {
                                        if (h == "W") {
                                            p = this._getInt_date(A, z);
                                            z += p.length;
                                            p = this.toNum2(p);
                                            if (p == null || (p < 0) || (p > 59)) {
                                                return 0
                                            }
                                        } else {
                                            if (h == "yyyy" || h == "yy" || h == "y") {
                                                if (h == "yyyy") {
                                                    k = 4;
                                                    j = 4
                                                }
                                                if (h == "yy") {
                                                    k = 2;
                                                    j = 2
                                                }
                                                if (h == "y") {
                                                    k = 2;
                                                    j = 4
                                                }
                                                l = this._getInt(A, z, k, j);
                                                if (l == null) {
                                                    return 0
                                                }
                                                z += l.length;
                                                if (l.length == 2) {
                                                    if (l > 70) {
                                                        l = 1900 + (l - 0)
                                                    } else {
                                                        l = 2000 + (l - 0)
                                                    }
                                                }
                                            } else {
                                                if (h == "MMM" || h == "NNN") {
                                                    v = 0;
                                                    for (var q = 0; q < this.MONTH_NAMES.length; q++) {
                                                        var g = this.MONTH_NAMES[q];
                                                        if (A.substring(z, z + g.length).toLowerCase() == g.toLowerCase()) {
                                                            if (h == "MMM" || (h == "NNN" && q > 11)) {
                                                                v = q + 1;
                                                                if (v > 12) {
                                                                    v -= 12
                                                                }
                                                                z += g.length;
                                                                break
                                                            }
                                                        }
                                                    }
                                                    if ((v < 1) || (v > 12)) {
                                                        return 0
                                                    }
                                                } else {
                                                    if (h == "EE" || h == "E") {
                                                        for (var q = 0; q < this.DAY_NAMES.length; q++) {
                                                            var o = this.DAY_NAMES[q];
                                                            if (A.substring(z, z + o.length).toLowerCase() == o.toLowerCase()) {
                                                                z += o.length;
                                                                break
                                                            }
                                                        }
                                                    } else {
                                                        if (h == "MM" || h == "M") {
                                                            v = this._getInt(A, z, h.length, 2);
                                                            if (v == null || (v < 1) || (v > 12)) {
                                                                return 0
                                                            }
                                                            z += v.length
                                                        } else {
                                                            if (h == "dd" || h == "d") {
                                                                u = this._getInt(A, z, h.length, 2);
                                                                if (u == null || (u < 1) || (u > 31)) {
                                                                    return 0
                                                                }
                                                                z += u.length
                                                            } else {
                                                                if (h == "hh" || h == "h") {
                                                                    f = this._getInt(A, z, h.length, 2);
                                                                    if (f == null || (f < 1) || (f > 12)) {
                                                                        return 0
                                                                    }
                                                                    z += f.length
                                                                } else {
                                                                    if (h == "HH" || h == "H") {
                                                                        f = this._getInt(A, z, h.length, 2);
                                                                        if (f == null || (f < 0) || (f > 23)) {
                                                                            return 0
                                                                        }
                                                                        z += f.length
                                                                    } else {
                                                                        if (h == "KK" || h == "K") {
                                                                            f = this._getInt(A, z, h.length, 2);
                                                                            if (f == null || (f < 0) || (f > 11)) {
                                                                                return 0
                                                                            }
                                                                            z += f.length
                                                                        } else {
                                                                            if (h == "kk" || h == "k") {
                                                                                f = this._getInt(A, z, h.length, 2);
                                                                                if (f == null || (f < 1) || (f > 24)) {
                                                                                    return 0
                                                                                }
                                                                                z += f.length;
                                                                                f--
                                                                            } else {
                                                                                if (h == "mm" || h == "m") {
                                                                                    s = this._getInt(A, z, h.length, 2);
                                                                                    if (s == null || (s < 0) || (s > 59)) {
                                                                                        return 0
                                                                                    }
                                                                                    z += s.length
                                                                                } else {
                                                                                    if (h == "ss" || h == "s") {
                                                                                        p = this._getInt(A, z, h.length, 2);
                                                                                        if (p == null || (p < 0) || (p > 59)) {
                                                                                            return 0
                                                                                        }
                                                                                        z += p.length
                                                                                    } else {
                                                                                        if (h == "a") {
                                                                                            if (A.substring(z, z + 2).toLowerCase() == "am") {
                                                                                                m = "AM"
                                                                                            } else {
                                                                                                if (A.substring(z, z + 2).toLowerCase() == "pm") {
                                                                                                    m = "PM"
                                                                                                } else {
                                                                                                    return 0
                                                                                                }
                                                                                            }
                                                                                            z += 2
                                                                                        } else {
                                                                                            if (A.substring(z, z + h.length) != h) {
                                                                                                return 0
                                                                                            } else {
                                                                                                z += h.length
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (z != A.length) {
        return 0
    }
    if (v == 2) {
        if (((l % 4 == 0) && (l % 100 != 0)) || (l % 400 == 0)) {
            if (u > 29) {
                return 0
            }
        } else {
            if (u > 28) {
                return 0
            }
        }
    }
    if ((v == 4) || (v == 6) || (v == 9) || (v == 11)) {
        if (u > 30) {
            return 0
        }
    }
    if (f < 12 && m == "PM") {
        f = f - 0 + 12
    } else {
        if (f > 11 && m == "AM") {
            f -= 12
        }
    }
    var a = new Date(l, v - 1, u, f, s, p);
    return a
}, formatStringToString: function (f, a, g) {
    var b = this.formatStringToDate(f, a);
    if (b == 0) {
        return f
    }
    var c = this.formatDateToString(b, g);
    if (c == 0) {
        return f
    }
    return c
}};
var $report;
function addKzSubmitDiv() {
    var b = document.location.href;
    var g = document.referrer;
    var j = document.body.getElement("title");
    if (b.indexOf("login.html") != -1) {
        return
    }
    if (b.indexOf("MH011TqgxhxxCtrl_openWin") != -1) {
        return
    }
    if (b.indexOf("Pre_HxzgTyslProxy_initIntegratedAcceptPage") != -1) {
        return
    }
    if (b.indexOf("Pre_HxzgTyslProxy_tyslView") != -1) {
        return
    }
    if (b.indexOf("mh040_dbsyjcInit") != -1) {
        return
    }
    if (b.indexOf("Pre_WorkItemProxy_initDaiBanRwPage") != -1) {
        return
    }
    if (b.indexOf("Mh102UserTableCtrl_hasPermisson") != -1 || b.indexOf("Mh109IpadGnsShowCtrl_openhtml") != -1) {
        return
    }
    if ($defined($report)) {
        return
    }
    if (g.indexOf("tid=cx") != -1 || b.indexOf("tid=cx") != -1) {
        return
    }
    if ($chk(j) && j.innerText.indexOf("访问系统出现异常") != -1) {
        return
    }
    if ($chk($(document.body).getElements("div[sword=SwordWorkflow]")[0])) {
        return
    }
    var a = $(document.body).getElements("div[sword=SwordToolBar]").get("name");
    if (a.length != 0) {
        var c = a[0];
        if (!$chk(c)) {
            return
        }
        var h = new Element("div", {name: "tybddy", type: "print", caption: "表单打印", onclick: "beforeSubmitDiv()", enabled: "true"});
        $(document.body).getElements("div[name=" + c + "]").grab(h)
    } else {
        var h = new Element("div", {name: "ToolBarButton", sword: "SwordToolBar", showType: "mini"});
        var f = new Element("div", {name: "tybddy", type: "print", caption: "表单打印", onclick: "beforeSubmitDiv()", enabled: "true"});
        $(h).grab(f);
        var k = $(document.body).getElements("div[class=wrapper]")[0];
        if ($chk(k)) {
            $(k).grab(h, "top")
        } else {
            $(document.body).grab(h, "top")
        }
    }
}
function getTybddyName() {
    return"tybddy"
}
function getTybddyDiv() {
    return new Element("div", {name: "tybddy", type: "print", caption: "表单打印", onclick: "beforeSubmitDiv()", enabled: "true"})
}
function beforeSubmitDiv() {
    var h = $(document.body).getElements("div[sword=SwordSubmit]").get("name");
    if (h.length != 0) {
        for (var c = 0; c < h.length; c++) {
            var j = h[c];
            $w(j).button.getParent().setStyle("display", "none")
        }
    }
    var g = $(document.body).getElements("div[class=tb_mini_box]");
    if (g.length != 0) {
        for (var c = 0; c < g.length; c++) {
            g[c].setStyle("display", "none")
        }
    }
    var a = $(document.body).getElements("div[class=tb_box]");
    if (a.length != 0) {
        for (var c = 0; c < a.length; c++) {
            a[c].setStyle("display", "none")
        }
    }
    var b = $(document.body).getElement("div[name=SwordWorkflowtoolbar]");
    if ($chk(b)) {
        b.setStyle("display", "none")
    }
    window.print();
    if (h.length != 0) {
        for (var c = 0; c < h.length; c++) {
            var j = h[c];
            var f = $w(j).options.isShow;
            if (f == "true") {
                $w(j).show()
            }
        }
    }
    if (g.length != 0) {
        for (var c = 0; c < g.length; c++) {
            g[c].setStyle("display", "")
        }
    }
    if (a.length != 0) {
        for (var c = 0; c < a.length; c++) {
            a[c].setStyle("display", "")
        }
    }
    if ($chk(b)) {
        b.setStyle("display", "")
    }
}
var SwordMoveBase = new Class({name: "SwordMoveBase", readyMove: function (b, a, c) {
    b.each(function (g) {
        var f = null;
        if (c == "checked") {
            f = g.getCheckedLis()
        } else {
            if (c == "all") {
                f = g.getAllLis()
            }
        }
        a.each(function (k) {
            var j = null;
            if ($defined(g.options.onBeforeOut) && $chk(g.options.onBeforeOut)) {
                j = g.getFunc(g.options.onBeforeOut)[0](f, k);
                if (typeof(j) == "undefined") {
                    j = f
                } else {
                    if (j == null || j.length == 0) {
                        return
                    }
                }
            } else {
                j = f
            }
            var h = j;
            if ($defined(k.options.onBeforeIn) && $chk(k.options.onBeforeIn)) {
                h = k.getFunc(k.options.onBeforeIn)[0](j, g);
                if (typeof(h) == "undefined") {
                    h = j
                } else {
                    if (h == null || h.length == 0) {
                        return
                    }
                }
            }
            if (h == null || h.length == 0) {
                return
            }
            g.doMove(k, h);
            h = null;
            j = null
        }.bind(this))
    }.bind(this))
}, loadWidget: function (a) {
    var b = pc.getWidget(a);
    if ($chk(b)) {
        return b
    } else {
        if (this.alarm) {
            alert("无法获取关联组件" + a)
        }
    }
}});
var SwordMove = new Class({Implements: [Events, Options], Extends: SwordMoveBase, name: "SwordMove", options: {sword: null, name: null, caption: null, dataY: -1, showName: null, target: null, dataX: -1, autoHeight: "true", beanname: null, pNode: null, onAfterCreate: $empty, onAfterCreateItem: $empty, onAfterInitData: $empty, onAfterMove: $empty, onItemClick: $empty, onItemDbClick: $empty, onItemRightClick: $empty, onBeforeOut: $empty, onBeforeIn: $empty}, sm_div: null, data: null, initParam: function (f) {
    this.htmlOptions(f);
    var c = new Element("div", {"class": "sm_div"}).inject(this.options.pNode);
    this.sm_div = c;
    if (this.options.caption) {
        this.createPanel(c, this.options.caption)
    }
    var a = new Element("div", {"class": "sm_data_div"}).inject(this.sm_div);
    this.sm_data_div = a;
    var b = new Element("ul", {"class": "sm_data_ul"}).inject(a);
    this.bindUlEvents(b);
    this.sm_data_ul = b;
    this.buildXY();
    this.fireEvent("onAfterCreate")
}, bindUlEvents: function (a) {
    a.addEvent("click", function (l) {
        var m = l.target;
        var o = m.get("tag");
        if (o !== "li") {
            return
        }
        var n = a.getChildren();
        var c = this.getCheckedLis();
        var f = (m.get("rowNum") - 1) / 1;
        var k = this.lastIndex / 1;
        if (l.shift) {
            c.removeClass("li_gridview");
            if (f > k) {
                var h = (k) / 1;
                for (h; h <= f; h++) {
                    n[h].addClass("li_gridview")
                }
            } else {
                var g = (k) / 1;
                for (g; g >= f; g--) {
                    n[g].addClass("li_gridview")
                }
            }
        } else {
            if (l.control) {
                m.toggleClass("li_gridview");
                k = f
            } else {
                c.removeClass("li_gridview");
                m.addClass("li_gridview");
                this.lastIndex = f;
                var b = m.retrieve("liData");
                this.fireEvent("onItemClick", [b, m, l])
            }
        }
    }.bind(this));
    a.addEvent("dblclick", function (h) {
        var g = h.target;
        var b = g.get("tag");
        if (b !== "li") {
            return
        }
        var f = this.getTargetWidgets();
        this.readyMove([this], f, "checked");
        var c = g.retrieve("liData");
        this.fireEvent("onItemDbClick", [c, g, h])
    }.bind(this));
    a.addEvent("contextmenu", function (g) {
        var f = g.target;
        var b = f.get("tag");
        if (b !== "li") {
            return
        }
        var c = f.retrieve("liData");
        this.fireEvent("onItemRightClick", [c, g])
    }.bind(this))
}, createPanel: function (c, b) {
    var a = new Element("div", {"class": "sm_panel_header"}).inject(c);
    new Element("div", {"class": "sm_panel_header_caption"}).appendText(b).inject(a)
}, buildXY: function () {
    this.buildX();
    this.buildY()
}, buildX: function () {
    var a = "" + this.options.dataX;
    if (this.options.dataX != -1) {
        if (a.contains("px")) {
            var a = parseInt(a);
            if (this.sm_div.getWidth() < a) {
                this.sm_div.setStyle("width", a + "px")
            }
        }
    }
}, buildY: function (c) {
    var b = "" + this.options.dataY;
    var a = null;
    if (this.options.autoHeight == "true") {
        if (b.contains("px")) {
            b = parseInt(b)
        }
        if (b > this.dataDiv().getHeight()) {
            a = b
        }
    } else {
        if ($chk(c) && c > 0) {
            a = this.itemY() * ((c / 1) + 2)
        }
    }
    if ($chk(a)) {
        this.dataDiv().setStyle("height", a + "px")
    }
}, initData: function (a) {
    this.clearData();
    if (!$chk(a)) {
        return
    }
    this.setInitData(a);
    if (!$chk(this.data)) {
        return
    }
    var b = a.trs.length;
    this.buildY(b);
    this.loadData(this.data);
    this.options.totalItems = b
}, loadData: function (a) {
    this.doMask();
    this.readyLoadData(a);
    this.doUnmask()
}, doMask: function () {
    pc.getMask().mask(this.sm_div)
}, doUnmask: function () {
    pc.getMask().unmask()
}, readyLoadData: function (a) {
    if (!$chk(a)) {
        this.doUnmask();
        return
    }
    a.each(function (c, f) {
        var b = this.createItem(f + 1, c);
        b.inject(this.dataUl())
    }, this);
    this.fireEvent("onAfterInitData", [a])
}, insertItem: function (a, b) {
    if (!$chk(a)) {
        return
    }
    var f = this.options.totalItems + 1;
    var c = this.createItem(f, a);
    c.set("status", "insert");
    c.set("origin", " ");
    c.set("outer", true);
    if (!$defined(b)) {
        c.inject(this.dataUl(), "bottom");
        this.options.totalItems += 1
    } else {
        if ("before" == b || "after" == b) {
            var g = this.getCheckedLis();
            if (g.length >= 1) {
                c.inject(g[g.length - 1], b);
                this.options.totalItems += 1;
                this.adjustItem(false)
            } else {
                alert("请先选择参照项")
            }
        }
    }
}, createItem: function (c, a) {
    if (a.getValue == undefined) {
        a.getValue = function (f) {
            var g = this.tds[f];
            if (!$defined(g)) {
                return null
            }
            return g.value
        }
    }
    this.fireEvent("onBeforeCreateItem", [a]);
    var b = new Element("li", {text: this.genarateContent(a.tds), origin: this.options.name, rowNum: c, title: this.genarateContent(a.tds), "class": "sm_data_li", events: {mouseover: function (f) {
        Event(f).target.addClass("li-selected")
    }, mouseout: function (f) {
        Event(f).target.removeClass("li-selected")
    }}});
    b.store("liData", a);
    if (c % 2 == 0) {
        b.addClass("sm_data_li_shuang")
    } else {
        b.addClass("sm_data_li_dan")
    }
    this.fireEvent("onAfterCreateItem", [a, b]);
    return b
}, genarateContent: function (c) {
    var a = this.options.showName;
    if (!$defined(a)) {
        a = "{caption}"
    }
    var b = this.substitute(c, a);
    if (b == "") {
        a = "{code}";
        b = this.substitute(c, a)
    }
    if (b == "") {
        a = "";
        b = this.substitute(c, a)
    }
    return b
}, substitute: function (a, b) {
    return b.replace((/\\?\{([^{}]+)\}/g), function (f, c) {
        if (f.charAt(0) == "\\") {
            return f.slice(1)
        }
        return(a[c] != undefined) ? a[c].value : ""
    })
}, getTargetWidgets: function () {
    var a = new Array();
    var b = this.options.target;
    if ($chk(b)) {
        b.split(",").each(function (f, c) {
            a.push(this.loadWidget(f))
        }, this)
    }
    return a
}, getCheckedLis: function () {
    var a = this.dataUl().getElements("li[.li_gridview]");
    return a
}, getLisByInsert: function () {
    var a = this.dataUl().getElements("li[status=insert]");
    return a
}, getLisByOuter: function () {
    var a = this.dataUl().getElements("li[outer=true]");
    return a
}, getAllLis: function () {
    var a = this.dataUl().getElements("li");
    return a
}, getInLis: function (c) {
    var b = "li[origin=" + c + "]";
    if (!$chk(c)) {
        c = this.options.name;
        b = "li[status=insert]"
    }
    var a = this.dataUl().getChildren(b);
    return a
}, getOutLis: function (b) {
    var a = new Array();
    if (!$chk(b)) {
        b = this.getTargetWidgets()
    }
    b.each(function (g, f) {
        var c = g.getInLis(this.options.name);
        if (c.length > 0) {
            a.combine(c)
        }
    }, this);
    return a
}, getStatusLis: function () {
    var a = this.getInLis();
    var b = this.getOutLis();
    if (a.length > 0 && b.length > 0) {
        return a.combine(b)
    } else {
        if (a.length > 0) {
            return a
        } else {
            return b
        }
    }
}, getCheckedData: function () {
    var a = this.getCheckedLis();
    var b = this.getLisData(a);
    return b
}, getCurrentData: function () {
    var a = this.dataUl().getChildren();
    return this.getLisData(a)
}, getLisData: function (b) {
    var a = new Array();
    b.each(function (c) {
        a.push(this.getOneLiData(c))
    }, this);
    return{sword: "SwordGrid", name: this.options.name, beannames: this.options.beanname, trs: a}
}, getStatusData: function () {
    var a = this.getStatusLis();
    return this.getLisData(a)
}, getOneLiData: function (a) {
    if (!$defined(a)) {
        return null
    }
    var b = a.retrieve("liData");
    if (a.get("status") == "insert") {
        var c = JSON.decode(JSON.encode(b));
        if (a.get("origin") == this.options.name) {
            c.status = "delete"
        } else {
            c.status = "insert"
        }
        return c
    } else {
        return b
    }
}, doMove: function (b, c) {
    var a = b.dataUl();
    c.each(function (f) {
        if (f.get("origin") != b.options.name) {
            f.set("status", "insert")
        } else {
            if (!$defined(f.get("outer"))) {
                f.set("status", null)
            }
        }
        f.removeClass("li_gridview").inject(a)
    });
    this.adjustItem();
    b.adjustItem();
    this.fireEvent("onAfterMove", [b, c])
}, adjustItem: function (a) {
    var b = this.dataUl().getChildren();
    b.each(function (c, f) {
        c.removeClass("sm_data_li_shuang");
        c.removeClass("sm_data_li_dan");
        if (f % 2 == 0) {
            c.addClass("sm_data_li_shuang")
        } else {
            c.addClass("sm_data_li_dan")
        }
        if (!$defined(a)) {
            c.removeClass("li_gridview")
        }
        c.set("rowNum", f + 1)
    }, this)
}, setInitData: function (a) {
    this.data = a.trs;
    this.data.each(function (b) {
        b.getValue = function (c) {
            var f = this.tds[c];
            if (!$defined(f)) {
                return null
            }
            return f.value
        }
    })
}, clearData: function () {
    this.dataUl().getChildren().each(function (a) {
        a.destroy()
    })
}, dataDiv: function () {
    return this.sm_data_div
}, dataUl: function () {
    return this.sm_data_ul
}, dataY: function () {
    return this.options.dataY / 1
}, itemY: function () {
    return 22
}});
var SwordMoveButton = new Class({Implements: [Events, Options], Extends: SwordMoveBase, name: "SwordMoveButton", options: {sword: null, name: null, pNode: null}, leftWidgets: new Hash(), rightWidgets: new Hash(), initParam: function (a) {
    this.htmlOptions(a);
    this.initMoveZone()
}, pNode: function () {
    return this.options.pNode
}, initMoveZone: function () {
    var a = this.createContainer().inject(this.pNode());
    this.container = a;
    var b = this.pNode().getElement("div[name='associate']");
    pc.getPageInit().addEvent("onDataInit", function () {
        this.getAssociate(b)
    }.bind(this));
    this.createButton()
}, getAssociate: function (a) {
    if ($chk(a)) {
        var b = a.getElements("div[location =='left'||'right']");
        b.each(function (j, g) {
            var h = j.get("widgetName");
            var f = this.loadWidget(h);
            var c = j.get("location");
            var k = f.name;
            if (k != "SwordMove") {
                return
            }
            if (c == "left") {
                this.leftWidgets.include(h, f)
            } else {
                if (c == "right") {
                    this.rightWidgets.include(h, f)
                }
            }
        }.bind(this))
    } else {
        alert("请设置关联的组件！")
    }
}, createContainer: function () {
    var a = 200;
    var b = new Element("div", {name: "console", "class": "moveContainer"});
    var c = this.pNode().getChildren("div[name!=associate]");
    if (c.length > 0) {
        var a = c.length * 35;
        b.setStyle("height", a + "px")
    }
    return b
}, createButton: function () {
    var a = this.pNode().getElements("div[name!='associate']");
    a.each(function (g) {
        var b = g.get("name");
        var f = g.get("type");
        var c = this.items[b];
        if (c != null) {
            this.container.adopt(this.createDefaultHref(g, b, f, c.title, c["class"], c.enabled))
        } else {
        }
    }.bind(this))
}, createDefaultHref: function (g, k, f, h, a, c) {
    var b = k;
    if (!$chk(f)) {
        b = f
    }
    var j = new Element("a", {name: b, type: f, "class": a, title: h, enabled: !$chk(g.get("enabled")) ? ($chk(c) ? c : "true") : g.get("enabled")});
    if ($chk(g.get("x"))) {
        j.setStyle("width", g.get("x"))
    }
    j.addEvent("click", function () {
        if (j.get("enabled") == "true") {
            switch (f) {
                case"right":
                    this.moveTo("right");
                    break;
                case"left":
                    this.moveTo("left");
                    break;
                case"allRight":
                    this.moveAllTo("right");
                    break;
                case"allLeft":
                    this.moveAllTo("left");
                    break;
                case"rollback":
                    this.rollback();
                    break;
                default:
                    break
            }
        }
    }.bind(this));
    return j
}, moveLR: function (a, f) {
    var c = null;
    var b = null;
    if (a == "right") {
        c = this.leftWidgets;
        b = this.rightWidgets
    } else {
        c = this.rightWidgets;
        b = this.leftWidgets
    }
    this.readyMove(c, b, f)
}, moveTo: function (a) {
    if (a == "left" || a == "right") {
        this.moveLR(a, "checked")
    }
}, moveAllTo: function (a) {
    this.moveLR(a, "all")
}, rollback: function () {
    var a = this.leftWidgets.map(function (f, c) {
        return f
    });
    var b = a.combine(this.rightWidgets);
    b.each(function (g) {
        var k = g.getLisByOuter();
        k.each(function (l) {
            l.dispose()
        });
        var c = g.getLisByInsert();
        for (var f = 0; f < c.length; f++) {
            var j = c[f].get("origin");
            var h = b.get(j);
            if ($defined(h)) {
                h.doMove(h, g.getInLis(j));
                c = g.getLisByInsert();
                f = 0
            }
        }
        g.adjustItem()
    })
}, setDisabled: function (a) {
    var c = this.container.getElements("a[name='" + a + "']");
    if (c.length != 1) {
        alert("元素不存在或指定名称的必须唯一！");
        return
    } else {
        var b = c[0];
        this.setHrefStatus(b, false)
    }
}, setEnable: function (a) {
    var c = this.container.getElements("a[name='" + a + "']");
    if (c.length != 1) {
        alert("元素不存在或指定名称的必须唯一！");
        return
    } else {
        var b = c[0];
        this.setHrefStatus(b, true)
    }
}, setHrefStatus: function (f, b) {
    if (f.get("tag") == "a") {
        var c = f.get("class");
        var a = f.get("enabled");
        if (b == false && a == "true") {
            f.set("class", c + "_g");
            f.set("enabled", b)
        } else {
            if (b == true && a == "false") {
                f.set("class", c.replace("_g", ""));
                f.set("enabled", b)
            }
        }
    }
}});
SwordMoveButton.implement({items: {left: {name: "left", type: "left", "class": "a_r_d", enabled: "true", title: "选中左移"}, allLeft: {name: "allLeft", type: "allLeft", "class": "a_r_s", enabled: "true", title: "全部左移"}, right: {name: "right", type: "right", "class": "a_l_d", enabled: "true", title: "选中右移"}, allRight: {name: "allRight", type: "allRight", "class": "a_l_s", enabled: "true", title: "全部右移"}, rollback: {name: "rollback", type: "rollback", "class": "a_l_rollback", enabled: "true", title: "重置"}}});
var SwordAccordion = new Class({Implements: [Events, Options], type: "SwordAccordion", options: {pNode: null, sword: null, name: null, pos: "relative", divWidth: null, divHeight: null, divLeft: null, divTop: null, cascadeSign: {id: "code", pid: "pcode"}, displayTag: "caption", startLayer: 1, defaultSelectName: null, ctrl: null, tid: null, dataStr: null, collapse: "false", tree: {}, onItemClick: $empty}, accordionDiv: null, accordionItems: new Hash(), curAccordionItem: null, data: null, root: [], childs: new Hash(), initialize: function (a) {
}, initParam: function (a) {
    this.htmlOptions(a);
    if ($type(this.options.cascadeSign) == "string") {
        this.options.cascadeSign = JSON.decode(this.options.cascadeSign)
    }
    this.parseDynamicData();
    this.parseAccordionItems(a);
    this.create(a)
}, initData: function () {
}, parseDynamicData: function () {
    this.buildData();
    this.parseData()
}, buildData: function () {
    if ($chk(this.options.dataStr)) {
        this.data = JSON.decode(this.options.dataStr).data
    } else {
        if ($chk(this.options.ctrl) || $chk(this.options.tid)) {
            this.getDataByCtrl()
        }
    }
}, getDataByCtrl: function () {
    var a = pageContainer.getReq({tid: this.options.tid, ctrl: this.options.ctrl});
    pageContainer.postReq({req: a, async: false, onSuccess: function (b) {
        var c = pageContainer.getResData(this.options.name, b);
        this.data = c.data
    }.bind(this), onError: function (b) {
    }.bind(this)})
}, parseData: function () {
    if ($chk(this.data)) {
        this.getRoot();
        this.getChildUnderRoot()
    }
}, getRoot: function () {
    for (var f = 0; f < this.data.length; f++) {
        var h = this.data[f][this.options.cascadeSign.pid] || this.data[f][this.options.cascadeSign.pid.toUpperCase()];
        var a = true;
        for (var b = 0; b < this.data.length; b++) {
            var g = this.data[b][this.options.cascadeSign.id] || this.data[b][this.options.cascadeSign.id.toUpperCase()];
            if (g == h) {
                a = false;
                break
            }
        }
        if (a) {
            var c = 1;
            if (this.options.startLayer.toInt() > 1) {
                this.getRootByStartLayer(this.data[f], c)
            } else {
                this.root[this.root.length] = this.data[f]
            }
        }
    }
}, getRootByStartLayer: function (a, c) {
    var b = c + 1;
    var g = a[this.options.cascadeSign.id] || a[this.options.cascadeSign.id.toUpperCase()];
    for (var f = 0; f < this.data.length; f++) {
        var h = this.data[f][this.options.cascadeSign.pid] || this.data[f][this.options.cascadeSign.pid.toUpperCase()];
        if (g == h) {
            if (b == this.options.startLayer) {
                this.root[this.root.length] = this.data[f]
            } else {
                if (this.isHasChilds(this.data[f])) {
                    this.getRootByStartLayer(this.data[f], b)
                }
            }
        }
    }
}, getChildUnderRoot: function () {
    for (var b = 0; b < this.root.length; b++) {
        var a = new Array();
        this.getChildNode(this.root[b], a);
        this.childs.set((this.root[b][this.options.cascadeSign.id] || this.root[b][this.options.cascadeSign.id.toUpperCase()]), a)
    }
}, getChildNode: function (a, b) {
    var f = a[this.options.cascadeSign.id] || a[this.options.cascadeSign.id.toUpperCase()];
    for (var c = 0; c < this.data.length; c++) {
        var g = this.data[c][this.options.cascadeSign.pid] || this.data[c][this.options.cascadeSign.pid.toUpperCase()];
        if (f == g) {
            b[b.length] = this.data[c];
            if (this.isHasChilds(this.data[c])) {
                this.getChildNode(this.data[c], b)
            }
        }
    }
}, isHasChilds: function (c) {
    var b = false;
    var f = c[this.options.cascadeSign.id] || c[this.options.cascadeSign.id.toUpperCase()];
    for (var a = 0; a < this.data.length; a++) {
        var g = this.data[a][this.options.cascadeSign.pid] || this.data[a][this.options.cascadeSign.pid.toUpperCase()];
        if (f == g) {
            b = true;
            break
        }
    }
    return b
}, parseAccordionItems: function (b) {
    var a = b.getChildren("div[type=SwordAccordionItem]");
    if (a.length > 0 && !$chk(this.options.defaultSelectName)) {
        this.options.defaultSelectName = a[0].getProperty("name")
    }
    a.each(function (g, f) {
        var c = new SwordAccordionItem();
        c.initParam(g);
        this.accordionItems.set(g.getProperty("name"), c)
    }.bind(this));
    if (!$chk(this.options.defaultSelectName) && this.root.length > 0) {
        this.options.defaultSelectName = this.root[0][this.options.cascadeSign.id] || this.root[0][this.options.cascadeSign.id.toUpperCase()]
    }
    this.root.each(function (h, k) {
        var j = {};
        var f = true;
        var g;
        new Hash(h).each(function (m, l) {
            j[l] = m;
            $extend(j, JSON.decode(this.options.tree));
            if (l == this.options.cascadeSign.id || l == this.options.cascadeSign.id.toUpperCase()) {
                j.name = m;
                j.dataStr = "{'data':" + this.childs[m].toJSON() + "}"
            } else {
                if (l == this.options.displayTag || l == this.options.displayTag.toUpperCase()) {
                    f = false;
                    g = l;
                    j[l] = m
                }
            }
        }.bind(this));
        var c = new SwordAccordionItem(j);
        if (!f) {
            c.options.caption = j[g]
        }
        this.accordionItems.set((h[this.options.cascadeSign.id] || h[this.options.cascadeSign.id.toUpperCase()]), c)
    }.bind(this))
}, create: function (a) {
    this.options.pNode = a;
    this.options.pNode.setStyle("height", "99.5%");
    this.options.pNode.setStyle("width", "99.5%");
    this.buildAccordionDiv();
    this.buildAccordionItems();
    this.activeAccordionItem(this.options.defaultSelectName)
}, buildAccordionDiv: function () {
    this.accordionDiv = new Element("div", {name: this.options.name, "class": "x-according-body x-according-body-noheader"}).inject(this.options.pNode);
    if (this.options.pos == "absolute") {
        this.accordionDiv.setStyles({position: "absolute", left: this.options.divLeft, top: this.options.divTop, width: this.options.divWidth, height: this.options.divHeight})
    } else {
        this.accordionDiv.setStyles({width: this.options.divWidth, height: this.options.divHeight})
    }
}, buildAccordionItems: function () {
    var a = 0;
    this.accordionItems.each(function (c, b) {
        c.refSwordAccordion = this;
        c.addAccordionItem(++a)
    }.bind(this))
}, activeAccordionItem: function (a) {
    this.curAccordionItem = this.accordionItems.get(a);
    if ($chk(this.curAccordionItem)) {
        this.curAccordionItem.activeAccordionItem()
    }
}, unactiveAccordionItem: function (a) {
    this.accordionItems.get(a).unActiveAccordionItem();
    this.curAccordionItem = null
}, calculateItemHeight: function () {
    return this.options.pNode.getSize().y - 23 * this.accordionItems.getLength()
}});
var SwordAccordionItem = new Class({Implements: [Events, Options], name: "SwordAccordionItem", options: {name: null, caption: "手风琴", src: null, pNode: null}, refSwordAccordion: null, accordionItemDiv: null, accordionItemTitleDiv: null, accordionItemTitleSpan: null, accordionItemContentDiv: null, accordionItemContent: null, initialize: function (a) {
    this.setOptions(a)
}, initParam: function (a) {
    this.htmlOptions(a);
    this.options.pNode = a
}, initData: function () {
}, addAccordionItem: function (a) {
    this.buildAccordionItemTitle(a);
    this.buildAccordionItemContent()
}, buildAccordionItemTitle: function (b) {
    this.accordionItemDiv = new Element("div", {name: "accordionItem_" + this.options.name, "class": "x-according empty x-according-collapsed x-according-" + b}).inject(this.refSwordAccordion.accordionDiv);
    this.accordionItemTitleDiv = new Element("div", {name: "accordionItemTitle_" + this.options.name, "class": "x-according-header x-unselectable x-accordion-hd", styles: {cursor: "pointer"}}).inject(this.accordionItemDiv);
    var a = new Element("div", {"class": "x-tool x-according-tool x-tool-toggle"}).inject(this.accordionItemTitleDiv);
    this.accordionItemTitleDiv.addEvent("click", function () {
        if (this.refSwordAccordion.options.collapse == "true") {
            if (this.refSwordAccordion.curAccordionItem == this) {
                if (this.accordionItemContentDiv.getStyle("display") == "none") {
                    this.accordionItemDiv.removeClass("x-according-collapsed");
                    this.accordionItemContentDiv.setStyles({display: "block", height: this.refSwordAccordion.calculateItemHeight()})
                } else {
                    this.accordionItemDiv.addClass("x-according-collapsed");
                    this.accordionItemContentDiv.setStyle("display", "none")
                }
            } else {
                if ($chk(this.refSwordAccordion.curAccordionItem)) {
                    this.refSwordAccordion.unactiveAccordionItem(this.refSwordAccordion.curAccordionItem.options.name)
                }
                this.refSwordAccordion.activeAccordionItem(this.options.name)
            }
        }
        if (this.refSwordAccordion.curAccordionItem != this) {
            if ($chk(this.refSwordAccordion.curAccordionItem)) {
                this.refSwordAccordion.unactiveAccordionItem(this.refSwordAccordion.curAccordionItem.options.name)
            }
            this.refSwordAccordion.activeAccordionItem(this.options.name)
        }
        if (this.refSwordAccordion.options.onItemClick) {
            this.refSwordAccordion.fireEvent("onItemClick", this.options)
        }
    }.bind(this));
    this.accordionItemTitleSpan = new Element("div", {text: this.options.caption}).inject(this.accordionItemTitleDiv)
}, buildAccordionItemContent: function () {
    this.accordionItemContentDiv = new Element("div", {name: "accordionItemContentDiv_" + this.options.name, "class": "x-according-bwrap", styles: {display: "none"}}).inject(this.accordionItemDiv);
    if ($defined(this.options.src)) {
        this.buildItemContent("iframe");
        this.accordionItemContent.setProperty("src", this.options.src)
    } else {
        if ($chk(this.options.pNode)) {
            this.buildItemContent("div");
            this.accordionItemContent.adopt(this.options.pNode.getChildren())
        } else {
            this.buildItemContent("div");
            jsR.doIm("SwordTree");
            var a = new SwordTree(this.options, this.accordionItemContent);
            a.addEvent("onNodeClick", this.getFunc(a.options.onNodeClick)[0]);
            var b = this.getFunc(a.options.onNodeContextMenu)[0];
            if ($defined(b)) {
                a.addEvent("onNodeContextMenu", b)
            }
            a.build();
            this.tree = a
        }
    }
    if ($defined(this.options.pNode)) {
        this.options.pNode.destroy()
    }
}, buildItemContent: function (a) {
    this.accordionItemContent = new Element(a, {name: "accordionItemContent_" + this.options.name}).inject(this.accordionItemContentDiv);
    this.accordionItemContent.setStyles({width: "100%", height: "100%"})
}, activeAccordionItem: function () {
    this.accordionItemDiv.removeClass("x-according-collapsed");
    this.accordionItemTitleSpan.addClass("x-according-text");
    this.accordionItemContentDiv.setStyles({display: "block", height: this.refSwordAccordion.calculateItemHeight()})
}, unActiveAccordionItem: function () {
    this.accordionItemDiv.addClass("x-according-collapsed");
    this.accordionItemTitleSpan.removeClass("x-according-text");
    this.accordionItemContentDiv.setStyle("display", "none")
}});
var SwordCalendar = new Class({Implements: [Events, Options], options: {name: null, sword: null, caption: "日期控件", pNode: null, defaultValue: null, defValue: null, dataformat: "yyyy-MM-dd", yearNames: {beginYear: jsR.config.swordCalendar.beginYear, endYear: jsR.config.swordCalendar.endYear}, monthNames: i18n.months, monthDays: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], weekNames: i18n.days, lazyMinute: 500, showOptions: "true,true,true,false,false,false", rule: null, showCurDate: false, isReadonly: "false", edit: null, msg: null, isShow: "true", returnRealValue: "false", isShowCloseBtn: "false", isShowEraseBtn: "false", isShowTodayBtn: "false", disable: null, toZero: false, handInput: "true", yearCap: "年", autoCtrl: "true", dateControl: null}, validate: null, parent: null, defaultdataformat: "yyyy-MM-dd", submitDateformat: "yyyy-MM-dd HH:mm:ss", dateDiv: null, dateInput: null, dateBtn: null, datepopDiv: null, SelYear: null, SelMonth: null, SelDay: null, SelHour: null, SelMinute: null, SelSecond: null, DivTable: null, DivTbody: null, oldDate: new Date(), grid_onFinished: null, CloseBtn: null, bcContainer2: null, monthContent: null, yearContent: null, initParam: function (b, a) {
    if (!$defined(b.get("dataformat"))) {
        b.setProperty("dataformat", this.defaultdataformat)
    }
    this.parent = a;
    $extend(this.options, {disable: null, defValue: null, returnRealValue: "false", showOptions: "true,true,true,false,false,false", isShowCloseBtn: "false", isShowEraseBtn: "false", isShowTodayBtn: "false", showCurDate: false, handInput: "true", rule: null, toZero: false, isShow: "true", autoCtrl: "true"});
    this.htmlOptions(b);
    this.options.defaultValue = this.options.defValue;
    this.build_input(b.get("rule"), b);
    this.build_inputBtn();
    Sword.utils.setWidth(b.get("width"), a ? a.userSize : null, this.dateContentDiv, this.dateInput, true);
    if ((this.options.rule || "").indexOf("must") > -1 && this.parent && this.parent.options.requiredSign == "field") {
        new Element("span", {styles: {color: "red", "float": "left"}, html: "*"}).inject(this.dateContentDiv)
    }
    this.getValidate();
    return this.dateInput
}, setValidate: function (a) {
    this.validate = a
}, getValidate: function () {
    if (this.validate == null) {
        this.validate = pc.widgetFactory.create("SwordValidator");
        this.validate.initParam("intime")
    }
}, initData: function (b, a) {
    if (!$defined(b) && !$defined(a)) {
        return
    }
    var c = a.get("dataformat");
    a.set("realvalue", b);
    if ($defined(c)) {
        if (b.split(".").length == 2) {
            b = b.split(".")[0];
            a.set("realvalue", b);
            b = SwordDataFormat.formatStringToString(b, this.submitDateformat, c)
        } else {
            b = SwordDataFormat.formatStringToString(b, this.submitDateformat, c)
        }
    }
    a.set("value", b);
    a.set("oValue", b)
}, createCalendar: function () {
    if ($chk(this.dateInput.value)) {
        if (SwordDataFormat.isDate(this.dateInput.value, this.dateInput.get("dataformat"))) {
            this.oldDate = SwordDataFormat.formatStringToDate(this.dateInput.value, this.dateInput.get("dataformat"))
        } else {
            this.oldDate = new Date()
        }
    } else {
        this.oldDate = new Date();
        if (this.options.toZero == "true") {
            this.oldDate.setSeconds(0);
            this.oldDate.setMinutes(0);
            this.oldDate.setHours(0)
        }
    }
    this.buildCalendar2();
    this.build_firstPopDiv();
    this.build_SecondpopDiv()
}, showCalendar2: function (a) {
    this.datepopDiv.setStyle("display", "none");
    this.bcContainer2.setStyle("display", "");
    if (a == "month") {
        this.monthContent.setStyle("display", "");
        this.monthContent.set("show", true);
        this.yearContent.setStyle("display", "none");
        this.yearContent.set("show", false)
    } else {
        this.monthContent.setStyle("display", "none");
        this.monthContent.set("show", false);
        this.yearContent.setStyle("display", "");
        this.yearContent.set("show", true)
    }
}, hideCalendar2: function (a) {
    this.validateText(this.dateInput.value);
    this.dateInput.set("realvalue", this.dateInput.value);
    this.bcContainer2.setStyle("display", "none");
    if (this.dateInput.get("oValue") == null) {
        this.dateInput.set("oValue", " ")
    }
    if (this.dateInput.get("oValue").trim() != this.dateInput.value) {
        this.execGridOnFinished();
        if (this.dateInput.get("show") == "true") {
            if (this.dateInput.retrieve("onChange")) {
                this.getFunc(this.dateInput.retrieve("onChange"))[0](this.dateInput, this)
            }
        }
        this.dateInput.set("oValue", this.dateInput.value)
    }
    if (this.dateInput.get("show") == "true") {
        if (this.dateInput.get("onHide")) {
            this.getFunc(this.dateInput.get("onHide"))[0](this.dateInput)
        }
    }
    this.dateInput.set("show", "false");
    if (this.dateInput.get("rule")) {
        this.validate.validate(this.dateInput)
    }
}, top_m: null, top_l: null, top_r: null, topDiv: null, topDivClone: null, buildCalendar2: function () {
    if (this.bcContainer2) {
        return
    }
    this.bcContainer2 = new Element("div").inject($(document.body));
    this.bcContainer2.addClass("calendar2");
    this.bcContainer2.setStyle("display", "none");
    this.topDiv = new Element("div").inject(this.bcContainer2);
    this.topDiv.addClass("cd2_top");
    this.top_l = new Element("div").inject(this.topDiv);
    this.top_l.addClass("cd2_top_l");
    this.top_m = this.top_l.clone();
    this.top_m.addClass("cd2_top_m");
    this.top_m.inject(this.topDiv);
    this.testMonthDaysFebruary(this.top_m.get("text"));
    this.top_r = this.top_l.clone();
    this.top_r.addClass("cd2_top_r");
    this.top_r.inject(this.topDiv);
    this.topDivClone = this.topDiv.clone(false, false);
    this.topDivClone.setStyles({display: "none", "line-height": "28px", "text-align": "center", "font-weight": "bold"});
    this.topDivClone.set("text", "请选择月份");
    this.topDivClone.inject(this.topDiv, "after");
    this.yearContent = new Element("div").inject(this.bcContainer2);
    this.yearContent.setStyle("display", "none");
    this.yearContent.addClass("cdCellContent");
    var n = new Element("div").setStyle("cursor", "pointer");
    var k = new Element("div").addClass("cd2_cell");
    k.addEvent("mouseover", function (p) {
        var o = new Event(p);
        var j = $(o.target);
        j.addClass("cd2_cell_mouseover")
    }.bind(this));
    k.addEvent("mouseout", function (p) {
        var o = new Event(p);
        var j = $(o.target);
        j.removeClass("cd2_cell_mouseover")
    }.bind(this));
    k.addEvent("click", function (s) {
        var q = new Event(s);
        var p = $(q.target);
        var t = p.get("text");
        if (this.bcContainer2.get("cdtype") == "month") {
            if (t.contains("月")) {
                var r = t.split("月")[0];
                this.testMonthDaysFebruary(this.top_m.get("text"));
                var o = this.options.monthDays[r - 1];
                var j = this.top_m.get("text") + "-" + (r.length == 1 ? "0" + r : r);
                if (this.options.dateControl == "minDay") {
                    this.dateInput.set("dataformat", "yyyy-MM-dd");
                    this.dateInput.set("value", SwordDataFormat.formatStringToString(j + "-01", "yyyy-MM-dd", this.dateInput.get("dataformat")))
                } else {
                    if (this.options.dateControl == "maxDay") {
                        this.dateInput.set("dataformat", "yyyy-MM-dd");
                        this.dateInput.set("value", SwordDataFormat.formatStringToString(j + "-" + o, "yyyy-MM-dd", this.dateInput.get("dataformat")))
                    } else {
                        this.dateInput.set("value", SwordDataFormat.formatStringToString(j, "yyyy-MM", this.dateInput.get("dataformat")))
                    }
                }
                this.hideCalendar2(p)
            } else {
                this.monthContent.setStyle("display", "");
                this.monthContent.set("show", true);
                this.changeTopMidState("pointer");
                this.yearContent.setStyle("display", "none");
                this.yearContent.set("show", false);
                this.top_m.set("text", t);
                if (t == this.dateInput.get("selYear")) {
                    this.monthContent.getElements("div.cd2_cell[text=" + this.dateInput.get("selMonth") + "]").addClass("cd2_cell_selected")
                } else {
                    this.monthContent.getElements("div.cd2_cell").removeClass("cd2_cell_selected")
                }
            }
        } else {
            this.dateInput.set("value", SwordDataFormat.formatStringToString(t, "yyyy", this.dateInput.get("dataformat")));
            this.hideCalendar2(p)
        }
    }.bind(this));
    var h = new Date().getFullYear() + "";
    var l = h / 1 - 1;
    for (var c = 0; c < 3; c++) {
        var m = n.clone();
        m.inject(this.yearContent);
        for (var b = 0; b < 4; b++) {
            var a = k.clone().inject(m);
            a.set("text", l++);
            a.cloneEvents(k);
            if ((c == 0 && b == 0) || (c == 2 && b == 3)) {
                a.setStyle("color", "gray")
            }
        }
    }
    this.monthContent = new Element("div").inject(this.bcContainer2);
    this.monthContent.setStyle("display", "none");
    this.monthContent.addClass("cdCellContent");
    var g = 1;
    for (var c = 0; c < 3; c++) {
        var f = n.clone();
        f.inject(this.monthContent);
        for (var b = 0; b < 4; b++) {
            var a = k.clone().inject(f);
            a.set("text", (g++) + "月");
            a.cloneEvents(k)
        }
    }
    k.destroy();
    n.destroy();
    this.top_l.addEvent("click", function () {
        if (this.yearContent.get("show") == "true") {
            this.yearContent.getElements("div.cd2_cell").each(function (o) {
                o.set("text", o.get("text") / 1 - 10);
                if (o.get("text") == this.dateInput.get("selYear")) {
                    o.addClass("cd2_cell_selected")
                } else {
                    o.removeClass("cd2_cell_selected")
                }
            }.bind(this));
            var j = this.top_m.get("text").split("-");
            this.top_m.set("text", (j[0] / 1 - 10) + "-" + (j[1] / 1 - 10))
        } else {
            this.top_m.set("text", this.top_m.get("text") / 1 - 1);
            if (this.top_m.get("text") != this.dateInput.get("selYear")) {
                this.monthContent.getElements("div.cd2_cell").removeClass("cd2_cell_selected")
            } else {
                this.monthContent.getElements("div.cd2_cell[text=" + this.dateInput.get("selMonth") + "]").addClass("cd2_cell_selected")
            }
        }
    }.bind(this));
    this.top_l.addEvent("mouseover", function () {
        this.top_l.addClass("cd2_top_l_over")
    }.bind(this));
    this.top_l.addEvent("mouseout", function () {
        this.top_l.removeClass("cd2_top_l_over")
    }.bind(this));
    this.top_r.addEvent("mouseover", function () {
        this.top_r.addClass("cd2_top_r_over")
    }.bind(this));
    this.top_r.addEvent("mouseout", function () {
        this.top_r.removeClass("cd2_top_r_over")
    }.bind(this));
    this.changeTopMidState("pointer");
    this.top_m.addEvent("click", function () {
        if (this.monthContent.get("show") == "true") {
            this.monthContent.setStyle("display", "none");
            this.monthContent.set("show", false);
            this.changeTopMidState("default");
            this.yearContent.setStyle("display", "");
            this.yearContent.set("show", true);
            var j = this.top_m.get("text");
            j = j.substring(0, 3) + "0";
            this.yearContent.getElements("div.cd2_cell").each(function (p, o) {
                var q = j / 1 + o - 1 + "";
                p.set("text", q);
                if (q == this.dateInput.get("selYear")) {
                    p.addClass("cd2_cell_selected")
                } else {
                    p.removeClass("cd2_cell_selected")
                }
            }.bind(this));
            this.top_m.set("text", j + "-" + (j / 1 + 9))
        }
    }.bind(this));
    this.top_r.addEvent("click", function () {
        if (this.yearContent.get("show") == "true") {
            this.yearContent.getElements("div.cd2_cell").each(function (o) {
                o.set("text", o.get("text") / 1 + 10);
                if (o.get("text") == this.dateInput.get("selYear")) {
                    o.addClass("cd2_cell_selected")
                } else {
                    o.removeClass("cd2_cell_selected")
                }
            }.bind(this));
            var j = this.top_m.get("text").split("-");
            this.top_m.set("text", (j[0] / 1 + 10) + "-" + (j[1] / 1 + 10))
        } else {
            this.top_m.set("text", this.top_m.get("text") / 1 + 1);
            if (this.top_m.get("text") != this.dateInput.get("selYear")) {
                this.monthContent.getElements("div.cd2_cell").removeClass("cd2_cell_selected")
            } else {
                this.monthContent.getElements("div.cd2_cell[text=" + this.dateInput.get("selMonth") + "]").addClass("cd2_cell_selected")
            }
        }
    }.bind(this))
}, changeTopMidState: function (a) {
    if (a == "pointer") {
        this.top_m.setStyle("cursor", "pointer");
        this.top_m.addEvent("mouseover", function () {
            this.topDiv.addClass("cd2_top_over")
        }.bind(this));
        this.top_m.addEvent("mouseout", function () {
            this.topDiv.removeClass("cd2_top_over")
        }.bind(this))
    } else {
        this.top_m.setStyle("cursor", "default");
        this.top_m.removeEvents("mouseover");
        this.top_m.removeEvents("mouseout");
        this.topDiv.removeClass("cd2_top_over")
    }
}, build_SecondpopDiv: function () {
    var a = this.dateInput.get("showOptions").split(",");
    if (a[2] == "false" && a[3] == "false" && a[4] == "false" && a[5] == "false") {
        this.bcContainer2.setStyle("display", "");
        var b = new Date().getFullYear() + "";
        if (a[1] == "true" && a[0] == "true") {
            var h = new Date().getMonth() + 1 + "月";
            var f = b;
            if (this.defaultdataformat == this.dateInput.get("dataformat")) {
                if (this.options.dateControl != "minDay" && this.options.dateControl != "maxDay") {
                    this.dateInput.set("dataformat", "yyyy-MM")
                }
            }
            this.topDivClone.setStyle("display", "none");
            this.topDiv.setStyle("display", "");
            this.changeTopMidState("pointer");
            this.showCalendar2("month");
            this.bcContainer2.set("cdtype", "month");
            if (this.dateInput.value != "") {
                var g = SwordDataFormat.formatStringToDate(this.dateInput.value, this.dateInput.get("dataformat"));
                h = g.getMonth() + 1 + "月";
                f = g.getFullYear() + ""
            }
            this.top_m.set("text", f);
            this.dateInput.set("selYear", f);
            this.dateInput.set("selMonth", h);
            this.monthContent.getElements("div.cd2_cell").each(function (k, j) {
                if (k.get("text") == h) {
                    k.addClass("cd2_cell_selected")
                } else {
                    k.removeClass("cd2_cell_selected")
                }
            })
        } else {
            if (a[0] == "true" && a[1] == "false") {
                if (this.defaultdataformat == this.dateInput.get("dataformat")) {
                    this.dateInput.set("dataformat", "yyyy")
                }
                this.topDivClone.setStyle("display", "none");
                this.topDiv.setStyle("display", "");
                this.changeTopMidState("default");
                this.showCalendar2("year");
                this.bcContainer2.set("cdtype", "year");
                if (this.dateInput.value != "") {
                    b = SwordDataFormat.formatStringToDate(this.dateInput.value, this.dateInput.get("dataformat")).getFullYear() + ""
                }
                this.dateInput.set("selYear", b);
                var c = b.substring(0, 3) + "0";
                this.top_m.set("text", c + "-" + (c / 1 + 9));
                this.yearContent.getElements("div.cd2_cell").each(function (k, j) {
                    k.set("text", c / 1 + j - 1);
                    if ((c / 1 + j - 1) + "" == b) {
                        k.addClass("cd2_cell_selected")
                    } else {
                        k.removeClass("cd2_cell_selected")
                    }
                })
            } else {
                var h = new Date().getMonth() + 1 + "月";
                if (this.defaultdataformat == this.dateInput.get("dataformat")) {
                    this.dateInput.set("dataformat", "MM")
                }
                this.topDivClone.setStyle("display", "");
                this.topDiv.setStyle("display", "none");
                this.showCalendar2("month");
                this.bcContainer2.set("cdtype", "month");
                if (this.dateInput.value != "") {
                    var g = SwordDataFormat.formatStringToDate(this.dateInput.value, this.dateInput.get("dataformat"));
                    h = g.getMonth() + 1 + "月"
                }
                this.top_m.set("text", b);
                this.dateInput.set("selMonth", h);
                this.monthContent.getElements("div.cd2_cell").each(function (k, j) {
                    if (k.get("text") == h) {
                        k.addClass("cd2_cell_selected")
                    } else {
                        k.removeClass("cd2_cell_selected")
                    }
                })
            }
        }
    } else {
        this.bcContainer2.setStyle("display", "none");
        this.bcContainer2.erase("cdtype");
        if (a[0] == "true") {
            this.build_popSelectYear();
            this.SelYear.inject(this.ymct)
        } else {
            this.build_popSelectYear();
            this.SelYear.setStyle("display", "none")
        }
        if (a[1] == "true") {
            this.build_popSelectMonth();
            this.SelMonth.inject(this.ymct)
        } else {
            this.SelMonth.setStyle("display", "none")
        }
        if (a[0] == "true" || a[1] == "true") {
            this.show4YearAndMonth(a[0], a[1])
        }
        if (a[3] == "true") {
            this.build_popSelectHour()
        } else {
            this.SelHour.setStyle("display", "none")
        }
        if (a[4] == "true") {
            this.build_popSelectMinute()
        } else {
            this.SelMinute.setStyle("display", "none")
        }
        if (a[5] == "true") {
            this.build_popSelectSecond()
        } else {
            this.SelSecond.setStyle("display", "none")
        }
        if (a[3] == "false" && a[4] == "false" && a[5] == "false") {
            if (this.DivTable.getElement("thead").getChildren().length > 1) {
                this.DivTable.getElement("thead").getChildren()[1].setStyle("display", "none")
            }
        } else {
            if (this.DivTable.getElement("thead").getChildren().length > 1) {
                this.DivTable.getElement("thead").getChildren()[1].setStyle("display", "")
            }
        }
    }
}, ymContainer: null, ymct: null, show4YearAndMonth: function (b, a) {
    if (b == "false") {
        $("navImgll").setStyle("display", "none");
        $("navImgrr").setStyle("display", "none");
        this.ymct.setStyle("width", "150px")
    } else {
        $("navImgll").setStyle("display", "");
        $("navImgrr").setStyle("display", "");
        this.ymct.setStyle("width", "110px")
    }
    if (a == "false") {
        $("navImgl").setStyle("display", "none");
        $("navImgr").setStyle("display", "none")
    }
}, build_YearAndMonth: function () {
    this.ymContainer = new Element("div").set("id", "ymContainer").setStyles({height: "20px", "float": "left"}).inject(this.ymCtTh);
    var f = new Element("div").inject(this.ymContainer);
    f.set({id: "navImgll", "class": "navImgll", title: "上一年"});
    var a = new Element("div").inject(this.ymContainer);
    a.set({id: "navImgl", "class": "navImgl", title: "上个月"});
    this.ymct = new Element("div").set("id", "ymct").inject(this.ymContainer).setStyles({align: "center", width: "110px", height: "20px", "float": "left", "line-height": "20px"});
    var c = new Element("div").inject(this.ymContainer);
    c.set({id: "navImgr", "class": "navImgr", title: "下个月"});
    var b = new Element("div").inject(this.ymContainer);
    b.set({id: "navImgrr", "class": "navImgrr", title: "下一年"});
    this.ymContainer.addEvent("click", function (j) {
        var h = j.target;
        if (h != this.SelYear) {
            this.SelYear.setStyle("background", "transparent");
            this.SelYearPopDiv.setStyle("display", "none")
        }
        if (h != this.SelMonth) {
            this.SelMonth.setStyle("background", "transparent");
            this.SelMonthPopDiv.setStyle("display", "none")
        }
        if (h == this.SelYear || h == this.SelMonth) {
            h.setStyles({background: "#fff"});
            h.focus();
            h.select();
            if (h == this.SelYear) {
                this.build_year();
                this.SelMonth.setStyle("background", "transparent");
                this.SelYearPopDiv.setStyles({display: ""});
                xyposition(this.SelYear, this.SelYearPopDiv)
            } else {
                this.SelMonthPopDiv.setStyles({display: ""});
                xyposition(this.SelMonth, this.SelMonthPopDiv)
            }
        } else {
            if (h == f) {
                this.SelYear.set("code", this.SelYear.get("code") / 1 - 1);
                this.SelYear.set("value", this.SelYear.get("code") + this.options.yearCap);
                this.refreshDate(this.SelYear.get("code"))
            }
            if (h == a) {
                var g = this.SelMonth.get("code") / 1 - 1;
                if (g == -1) {
                    this.SelYear.set("code", this.SelYear.get("code") / 1 - 1);
                    this.SelYear.set("value", this.SelYear.get("code") + this.options.yearCap);
                    this.SelMonth.set("code", 11);
                    this.SelMonth.set("value", this.options.monthNames[11]);
                    this.refreshDate(this.SelYear.get("code"), 11)
                } else {
                    this.SelMonth.set("code", this.SelMonth.get("code") / 1 - 1);
                    this.SelMonth.set("value", this.options.monthNames[this.SelMonth.get("code")]);
                    this.refreshDate(null, this.SelMonth.get("code"))
                }
            }
            if (h == c) {
                var g = this.SelMonth.get("code") / 1 + 1;
                if (g == 12) {
                    this.SelYear.set("code", this.SelYear.get("code") / 1 + 1);
                    this.SelYear.set("value", this.SelYear.get("code") + this.options.yearCap);
                    this.SelMonth.set("code", 0);
                    this.SelMonth.set("value", this.options.monthNames[0]);
                    this.refreshDate(this.SelYear.get("code"), 0)
                } else {
                    this.SelMonth.set("code", this.SelMonth.get("code") / 1 + 1);
                    this.SelMonth.set("value", this.options.monthNames[this.SelMonth.get("code")]);
                    this.refreshDate(null, this.SelMonth.get("code"))
                }
            }
            if (h == b) {
                this.SelYear.set("code", this.SelYear.get("code") / 1 + 1);
                this.SelYear.set("value", this.SelYear.get("code") + this.options.yearCap);
                this.refreshDate(this.SelYear.get("code"))
            }
            this.giveOutValue()
        }
    }.bind(this))
}, show: function (b) {
    this.dateInput = b;
    var a = b.get("rule");
    if ($defined(a) && a.contains("must")) {
        this.dateInput.setStyle("background-color", "#b5e3df")
    }
    $extend(this.options, {autoCtrl: this.dateInput.get("autoCtrl"), isShow: this.dateInput.get("isShow"), toZero: this.dateInput.get("toZero"), name: this.dateInput.get("name"), defaultValue: this.dateInput.get("defaultValue"), dataformat: this.dateInput.get("dataformat"), dateControl: this.dateInput.get("dateControl")});
    this.dateInput.set("show", "true");
    this.createCalendar();
    if (this.bcContainer2.get("cdtype")) {
        xyposition(this.dateInput, this.bcContainer2)
    } else {
        this.datepopDiv.setStyles({display: ""});
        xyposition(this.dateInput, this.datepopDiv);
        this.datepopDiv.fade("in")
    }
    this.dateBtn.addClass("dateBtn_active")
}, dateContentDiv: null, boxtd: null, imgtd: null, build_input: function (b, a) {
    this.dateContentDiv = Sword.utils.createTable(this, true, true);
    this.dateInput = new Element("input", {rule: b, type: "text", widget: "calendar", name: this.options.name, defaultValue: this.options.defaultValue, msg: this.options.msg, dataformat: this.options.dataformat, "class": "swordform_item_oprate swordform_item_input", widgetGetValue: "true", returnRealValue: this.options.returnRealValue, showOptions: this.options.showOptions, isShowCloseBtn: this.options.isShowCloseBtn, isShowEraseBtn: this.options.isShowEraseBtn, isShowTodayBtn: this.options.isShowTodayBtn, isShow: this.options.isShow, toZero: this.options.toZero, autoCtrl: this.options.autoCtrl, dateControl: a.get("dateControl"), styles: {"float": "left"}, oValue: " "}).inject(this.boxtd);
    this.dateInput.store("widgetObj", this);
    if (a.get("onHide")) {
        this.dateInput.set("onHide", a.get("onHide"))
    }
    if (a.get("onChange")) {
        this.dateInput.store("onChange", a.get("onChange"));
        if (this.parent && this.parent.name != "SwordGrid") {
            a.set({onChange: "", onchange: ""})
        }
    }
    this.dateInput.addEvent((Browser.Engine.trident || Browser.Engine.webkit) ? "keydown" : "keypress", this.keyEvents.bind(this));
    if (this.options.handInput == "true" || (this.options.handInput == null && jsR.config.swordCalendar.handInput)) {
        this.dateInput.addEvent((Browser.Engine.trident || Browser.Engine.webkit) ? "keydown" : "keypress", this.options.autoCtrl == "true" ? this.hand_Input.bind(this) : this.hand_Input_nctrl.bind(this))
    }
    if (this.options.isReadonly == "true" || this.options.edit == "false") {
        this.dateInput.set("readonly", true)
    }
    if (this.options.disable == "true") {
        this.dateInput.set("disabled", true);
        this.dateInput.setStyle("cursor", "default")
    }
    if (this.options.showCurDate == "true") {
        this.oldDate = new Date();
        this.dateInput.value = SwordDataFormat.formatDateToString(this.oldDate, this.dateInput.get("dataformat"));
        this.dateInput.set("realvalue", this.dateInput.value);
        this.dateInput.set("oValue", this.dateInput.value)
    } else {
        if ($chk(this.options.defaultValue)) {
            this.dateInput.value = this.options.defaultValue;
            this.dateInput.set("realvalue", this.dateInput.value);
            this.dateInput.set("oValue", this.dateInput.value)
        }
    }
    this.addEventToEl("input");
    if (!this.windowClick) {
        window.document.addEvent("click", function (h) {
            if (this.dateInput.get("show") == "true") {
                var g = h.target;
                var f = g.parentNode;
                var c = f.parentNode;
                if (g != this.dateInput && null != this.dateBtn && null != this.datepopDiv && g != this.dateBtn && g != this.ymContainer && g != this.ymct && g != this.SelHour && g != this.SelMinute && g != this.SelSecond && f != this.ymContainer && f != this.ymct && f != this.SelHour && f != this.SelMinute && f != this.SelSecond && f != this.topDiv && g != this.topDiv && c != this.mtbody && c != this.ytbody && c != this.yctbody && c != this.monthContent && c != this.yearContent) {
                    this.hide()
                }
            }
        }.bind(this));
        this.windowClick = true
    }
}, hide: function () {
    if (this.dateInput.get("dataformat") == "yyyy-MM-dd") {
        this.validateText(this.dateInput.value)
    }
    if (this.dateInput.get("show") == "true") {
        this.dateInput.set("realvalue", this.dateInput.value);
        if (this.bcContainer2.get("cdtype")) {
            this.hideCalendar2()
        } else {
            if (this.SelMonthPopDiv) {
                this.SelMonthPopDiv.setStyle("display", "none")
            }
            if (this.SelYearPopDiv) {
                this.SelYearPopDiv.setStyle("display", "none")
            }
            this.datepopDiv.setStyles({left: "-500px", top: "-500px"});
            this.datepopDiv.fade("out")
        }
        this.dateBtn.removeClass("dateBtn_active");
        if (this.dateInput.get("oValue") == null) {
            this.dateInput.set("oValue", " ")
        }
        if (this.dateInput.get("rule")) {
            this.validate.validate(this.dateInput)
        }
        this.execGridOnFinished();
        if (this.dateInput.get("oValue").trim() != this.dateInput.value) {
            if (this.dateInput.retrieve("onChange")) {
                this.getFunc(this.dateInput.retrieve("onChange"))[0](this.dateInput, this)
            }
            this.dateInput.set("oValue", this.dateInput.value)
        }
        if (this.dateInput.get("onHide")) {
            this.getFunc(this.dateInput.get("onHide"))[0](this.dateInput)
        }
        this.dateInput.set("show", "false");
        this.defaultValidate(this.dateInput.value, this.dateInput)
    }
}, validateText: function (m) {
    var g = this.options.yearNames.beginYear;
    var f = this.options.yearNames.endYear;
    var r = this.dateInput.get("showOptions").split(",");
    var b = this.dateInput.get("dateControl");
    if (r[0] == "true" && r[1] == "true") {
        var k = "";
        var j = "";
        var l = "";
        var c = 0;
        var a = 0;
        if (m.test("^\\d{4}-\\d{1,2}-\\d{0,2}$")) {
            k = m.substring(0, 4);
            j = m.substring(5, 7);
            if (j.contains("-")) {
                j = j.substring(0, 1);
                if (j.toInt() == 0) {
                    j = "01"
                } else {
                    j = "0" + j
                }
                c = 7
            } else {
                if (j.toInt() > 12) {
                    j = "12"
                } else {
                    if (j.toInt() == 0) {
                        j = "01"
                    }
                }
                c = 8
            }
            a = m.length
        } else {
            if (m.test("^\\d{5,7}-\\d{0,2}$")) {
                k = m.substring(0, 4);
                j = m.substring(4, 7);
                if (j.contains("-")) {
                    j = j.substring(0, 1);
                    j = "0" + j;
                    c = 7
                } else {
                    if (j.toInt() > 12) {
                        j = "12"
                    } else {
                        if (j.toInt() == 0) {
                            j = "01"
                        }
                    }
                    c = 8
                }
                a = m.length
            } else {
                if (m.test("^\\d{4}-\\d{2,5}$")) {
                    k = m.substring(0, 4);
                    var h = m.substring(5, m.length);
                    var q = h.length;
                    if (q == 2) {
                        j = h.substring(0, 2);
                        if (j.toInt() > 12) {
                            j = "12"
                        } else {
                            if (j.toInt() == 0) {
                                j = "01"
                            }
                        }
                        c = 6;
                        a = 7
                    } else {
                        if (q == 3) {
                            var p = h.substring(0, 1).toInt();
                            var o = h.substring(1, 2).toInt();
                            if (p == 0) {
                                if (o == 0) {
                                    j = "01"
                                } else {
                                    if (o != 0) {
                                        j = "0" + o
                                    }
                                }
                                c = 7;
                                a = 8
                            } else {
                                if (p == 1) {
                                    if (o < 3) {
                                        j = p + o
                                    } else {
                                        j = "0" + j
                                    }
                                } else {
                                    j = "0" + p;
                                    c = 6;
                                    a = 8
                                }
                            }
                        } else {
                            var j = h.substring(0, 2);
                            c = 7;
                            a = 9;
                            if (j.toInt() > 12) {
                                j = "12"
                            } else {
                                if (j.toInt() == 0) {
                                    j = "01"
                                }
                            }
                        }
                    }
                } else {
                    if (m.test("^\\d{6,10}$")) {
                        k = m.substring(0, 4);
                        var h = m.substring(4, m.length);
                        var q = h.length;
                        var p = m.substring(4, 5).toInt();
                        if (q == 2) {
                            if (p == 0) {
                                j = 1
                            }
                            j = "0" + p;
                            c = 9;
                            a = 10
                        } else {
                            if (q == 3) {
                                var o = h.substring(1, 2).toInt();
                                if (p == 0) {
                                    if (o == 0) {
                                        j = "01"
                                    } else {
                                        if (o != 0) {
                                            j = "0" + o
                                        }
                                    }
                                    c = 6;
                                    a = 7
                                } else {
                                    if (p == 1) {
                                        if (o < 3) {
                                            j = p + o
                                        } else {
                                            j = "0" + j
                                        }
                                    } else {
                                        j = "0" + p;
                                        c = 5;
                                        a = 7
                                    }
                                }
                            } else {
                                if (q >= 4) {
                                    var j = h.substring(0, 2);
                                    c = 7;
                                    a = 9;
                                    if (j.toInt() > 12) {
                                        j = "12"
                                    } else {
                                        if (j.toInt() == 0) {
                                            j = "01"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (k != "" && j != "") {
            if (k.toInt() < g.toInt()) {
                k = g
            } else {
                if (k.toInt() > f.toInt()) {
                    k = f - 1
                }
            }
            if (j.length == 1) {
                j = "0" + j
            }
            var n = parseInt(this._getDays(k, j));
            if (b == "minDay") {
                l = "-01"
            } else {
                if (b == "maxDay") {
                    l = "-" + n
                } else {
                    if (r[2] == "true") {
                        if (c == m.length) {
                            l = "-01"
                        } else {
                            var l = m.substring(c, a);
                            if (l.toInt() > n) {
                                l = n
                            } else {
                                if (l.toInt() == 0) {
                                    l = "01"
                                }
                            }
                            if (l.length == 1) {
                                l = "0" + l
                            }
                            l = "-" + l
                        }
                    } else {
                        l = ""
                    }
                }
            }
            if (j.length == 1) {
                j = "0" + j
            }
            this.dateInput.value = k + "-" + j + l
        } else {
            this.dateInput.value = ""
        }
    } else {
        if (r[0] == "true" && r[1] == "false") {
            if (m.test("^\\d{1,10}$")) {
                var k = "";
                if (m.length > 3) {
                    k = m.substring(0, 4)
                } else {
                    k = m
                }
                if (k.toInt() < g.toInt()) {
                    k = g
                } else {
                    if (k.toInt() > f.toInt()) {
                        k = f - 1
                    }
                }
                this.dateInput.value = k
            } else {
                this.dateInput.value = ""
            }
        } else {
            if (r[0] == "false" && r[1] == "true" && r[2] == "false") {
                if (m.test("^\\d{1,10}")) {
                    var j = "";
                    if (m.length > 2) {
                        j = m.substring(0, 2)
                    } else {
                        j = m
                    }
                    if (j.toInt() > 12) {
                        j = "12"
                    } else {
                        if (j.toInt() == 0) {
                            j = "01"
                        }
                    }
                    if (j.length == 1) {
                        j = "0" + j
                    }
                    this.dateInput.value = j
                } else {
                    this.dateInput.value = ""
                }
            }
        }
    }
}, execGridOnFinished: function () {
    if ($defined(this.grid_onFinished)) {
        this.grid_onFinished(this.dateInput.get("value"));
        this.grid_onFinished = null
    }
}, build_inputBtn: function () {
    this.dateBtn = this.imgtd;
    this.dateBtn.addClass("dateBtn").addEvents({mouseover: function (a) {
        this.dateBtn.addClass("dateBtn_active")
    }.bind(this), mouseout: function (a) {
        this.dateBtn.removeClass("dateBtn_active")
    }.bind(this)});
    if ($defined(this.parent) && this.parent.isVal() && $defined(this.options.rule)) {
        Sword.utils.createElAfter(this.dateContentDiv.getChildren()[0].getChildren()[0], this.dateInput)
    }
    if (this.options.disable == "true") {
        this.disable(this.dateInput)
    }
    this.addEventToEl("div")
}, ymCtTh: null, build_firstPopDiv: function () {
    var f = this.dateInput.get("showOptions").split(",");
    if (this.datepopDiv) {
        if (!$chk(this.ymContainer)) {
            if (f[0] == "true" || f[1] == "true") {
                this.build_YearAndMonth();
                this.ymCtTh.setStyle("display", "")
            }
        } else {
            if (f[0] == "false" && f[1] == "false") {
                this.ymContainer.setStyle("display", "none");
                this.ymCtTh.setStyle("display", "none")
            } else {
                this.ymContainer.setStyle("display", "");
                this.ymCtTh.setStyle("display", "")
            }
        }
        if (f[2] == "true") {
            this.DivTbody.setStyle("display", "");
            if (!this.buildWeek) {
                this.build_popSelectDate()
            }
            this.giveDataTopopDiv_selectDay(this.oldDate.getFullYear(), this.oldDate.getMonth().toInt() + 1, this.oldDate.getDate())
        } else {
            this.DivTbody.setStyle("display", "none")
        }
        this.build_popCloseBtn();
        return
    }
    this.datepopDiv = new Element("div", {"class": "dp_cal"}).inject(document.body);
    this.DivTable = new Element("table").inject(this.datepopDiv);
    var k = new Element("thead").inject(this.DivTable);
    var j = new Element("tr").inject(k);
    this.ymCtTh = new Element("th", {colspan: "7"}).inject(j);
    if (f[0] == "true" || f[1] == "true") {
        this.build_YearAndMonth()
    } else {
        this.ymCtTh.setStyle("display", "none")
    }
    this.SelYear = new Element("input", {id: "yearSelect"});
    this.SelYear.addEvents({blur: function (o) {
        var l = o.target;
        var m = l.value.split(this.options.yearCap)[0];
        var n = this.options.yearNames.beginYear.toInt();
        var p = this.options.yearNames.endYear.toInt();
        if (m < n) {
            m = n
        }
        if (m > p) {
            m = p
        }
        this.SelYear.set("code", m);
        this.SelYear.set("value", m + this.options.yearCap);
        this.SelYear.setStyle("display", "").empty();
        this.SelYear.setStyle("background", "transparent");
        this.refreshDate(m);
        this.giveOutValue()
    }.bind(this), keydown: function (l) {
        var m = l.code;
        if ((m < 48 || m > 57) && m != 8) {
            return false
        }
    }.bind(this), keyup: function (l) {
        if (l.code == 13) {
            this.dateInput.focus();
            this.SelYearPopDiv.setStyle("display", "none")
        }
    }.bind(this)});
    this.SelYear.set("value", this.oldDate.getFullYear() + this.options.yearCap);
    this.SelYear.set("code", this.oldDate.getFullYear());
    this.SelMonth = new Element("input", {id: "monthSelect", readOnly: true});
    this.SelMonth.set("value", this.options.monthNames[this.oldDate.getMonth()]);
    this.SelMonth.set("code", this.oldDate.getMonth());
    var b = new Element("tr").inject(k);
    var h = new Element("th", {colspan: "7"}).inject(b);
    this.SelHour = new Element("select", {id: "hourSelect"});
    this.SelHour.set("title", "时");
    var c = new Element("option", {value: this.oldDate.getHours()}).appendText(this.oldDate.getHours());
    c.inject(this.SelHour);
    this.SelHour.inject(h);
    this.SelMinute = new Element("select", {id: "minuteSelect"});
    this.SelMinute.set("title", "分");
    var g = new Element("option", {value: this.oldDate.getMinutes()}).appendText(this.oldDate.getMinutes());
    g.inject(this.SelMinute);
    this.SelMinute.inject(h);
    this.SelSecond = new Element("select", {id: "secondSelect"});
    var a = new Element("option", {value: this.oldDate.getSeconds()}).appendText(this.oldDate.getSeconds());
    a.inject(this.SelSecond);
    this.SelSecond.inject(h);
    this.SelSecond.set("title", "秒");
    this.DivTbody = new Element("tbody").inject(this.DivTable);
    if (f[2] == "true") {
        this.build_popSelectDate()
    }
    this.build_popCloseBtn()
}, build_popCloseBtn: function () {
    var m = this.dateInput.get("isShowCloseBtn");
    var a = this.dateInput.get("isShowEraseBtn");
    var k = this.dateInput.get("isShowTodayBtn");
    var b;
    if (m == "true" || a == "true" || k == "true") {
        b = "true"
    }
    if (this.CloseBtn != null) {
        this.CloseBtn.destroy();
        this.CloseBtn = null
    }
    if (b == "true") {
        this.CloseBtn = new Element("table").inject(this.datepopDiv);
        var g = new Element("tbody").inject(this.CloseBtn);
        var j = new Element("tr", {name: "dayTr"}).inject(g);
        var f = new Element("th", {colspan: "7"}).inject(j);
        if (m == "true") {
            var h = new Element("div", {"class": "dp_error"}).inject(f);
            h.addEvent("click", function (o) {
                var n = o.target;
                this.giveOutValue();
                this.execGridOnFinished()
            }.bind(this))
        }
        if (k == "true") {
            var c = new Element("div", {"class": "dp_todayBtn"}).inject(f);
            c.addEvent("click", function () {
                this.oldDate = new Date();
                this.giveOutValue();
                this.execGridOnFinished()
            }.bind(this))
        }
        if (a == "true") {
            var l = new Element("div", {"class": "dp_clear"}).inject(f);
            l.addEvent("click", function (n) {
                this.dateInput.set("value", "");
                this.dateInput.set("realvalue", "");
                this.dateInput.set("oValue", "");
                this.execGridOnFinished()
            }.bind(this))
        }
    }
}, SelYearPopDiv: null, SelMonthPopDiv: null, build_popSelectYear: function () {
    this.SelYear.setStyle("display", "").empty();
    this.SelYear.setStyle("background", "transparent");
    this.SelYear.set("code", this.oldDate.getFullYear());
    this.SelYear.set("value", this.oldDate.getFullYear() + this.options.yearCap);
    if (this.SelYearPopDiv) {
        return
    }
    this.SelYearPopDiv = new Element("div").addClass("selPopDiv").setStyle("display", "none").inject($(document.body));
    this.build_year()
}, getYearMonthDayNum: function (a, b) {
    var c = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    if (new Date(a, 1, 29).getDate() == 29) {
        c[1] = 29
    }
    return c[b - 1]
}, refreshDate: function (a, c) {
    var h;
    if (a != null && c != null) {
        if (this.dateInput.get("showOptions").split(",")[2] == "true") {
            this.giveDataTopopDiv_selectDay(a, c.toInt() + 1, this.oldDate.getDate())
        }
        this.oldDate.setMonth(c);
        this.oldDate.setFullYear(a)
    } else {
        if (c) {
            if (this.dateInput.get("showOptions").split(",")[2] == "true") {
                h = this.oldDate.getDate();
                var f = this.oldDate.getFullYear();
                var b = c.toInt() + 1;
                var g = this.getYearMonthDayNum(f, b);
                if (h > g) {
                    h = g
                }
                this.giveDataTopopDiv_selectDay(f, b, h)
            }
            this.oldDate.setDate(h);
            this.oldDate.setMonth(c)
        } else {
            if (a) {
                if (this.dateInput.get("showOptions").split(",")[2] == "true") {
                    this.giveDataTopopDiv_selectDay(a, this.oldDate.getMonth().toInt() + 1, this.oldDate.getDate())
                }
                this.oldDate.setFullYear(a)
            }
        }
    }
    this.build_popCloseBtn()
}, mtbody: null, ytbody: null, yctbody: null, build_popSelectMonth: function () {
    this.SelMonth.setStyle("display", "").empty();
    this.SelMonth.setStyle("background", "transparent");
    this.SelMonth.set("code", this.oldDate.getMonth());
    this.SelMonth.set("value", this.options.monthNames[this.oldDate.getMonth()]);
    if (this.SelMonthPopDiv) {
        return
    }
    this.SelMonthPopDiv = new Element("div").addClass("selPopDiv").setStyle("display", "none").inject($(document.body));
    var h = new Element("table").set({cellpadding: "3", cellspacing: "0", nowrap: "nowrap", width: "80px"}).inject(this.SelMonthPopDiv);
    this.mtbody = new Element("tbody").inject(h);
    var f = new Element("tr");
    var j = new Element("td").addClass("yttd");
    j.addEvent("click", function (m) {
        var l = m.target;
        var k = l.get("code");
        this.SelMonthPopDiv.setStyle("display", "none");
        this.SelMonth.set("code", k);
        this.SelMonth.set("value", l.get("text"));
        this.SelMonth.setStyle("background", "transparent");
        this.refreshDate(null, k);
        this.giveOutValue()
    }.bind(this));
    j.addEvent("mouseover", function (m) {
        var l = new Event(m);
        var k = $(l.target);
        k.addClass("td_mouseover")
    });
    j.addEvent("mouseout", function (m) {
        var l = new Event(m);
        var k = $(l.target);
        k.removeClass("td_mouseover")
    });
    for (var c = 0; c < 6; c++) {
        var a = f.clone().inject(this.mtbody);
        var b = j.clone().inject(a);
        b.set({text: this.options.monthNames[c], code: c});
        b.cloneEvents(j);
        var g = j.clone().inject(a);
        g.set({text: this.options.monthNames[c + 6], code: c + 6});
        g.cloneEvents(j)
    }
    f.destroy();
    j.destroy()
}, build_year: function () {
    this.SelYearPopDiv.empty();
    var a = new Element("table").set({cellpadding: "3", cellspacing: "0", nowrap: "nowrap", width: "80px"}).inject(this.SelYearPopDiv);
    this.ytbody = new Element("tbody").inject(a);
    var m = new Element("tr");
    var g = new Element("td").addClass("yttd");
    g.addEvent("click", function (t) {
        this.SelYearPopDiv.setStyle("display", "none");
        var u = t.target.get("text");
        this.SelYear.set("code", u);
        this.SelYear.set("value", u + this.options.yearCap);
        this.SelYear.setStyle("background", "transparent");
        this.refreshDate(u);
        this.giveOutValue()
    }.bind(this));
    g.addEvent("mouseover", function (v) {
        var u = new Event(v);
        var t = $(u.target);
        t.addClass("td_mouseover")
    });
    g.addEvent("mouseout", function (v) {
        var u = new Event(v);
        var t = $(u.target);
        t.removeClass("td_mouseover")
    });
    var j = this.SelYear.get("code") / 1;
    var b = this.options.yearNames.beginYear.toInt();
    var q = this.options.yearNames.endYear.toInt();
    for (var k = 0; k < 5; k++) {
        var s = m.clone().inject(this.ytbody);
        var c = g.clone().inject(s);
        c.set("text", j - 5 + k);
        c.cloneEvents(g);
        var p = g.clone().inject(s);
        var r = j + k;
        if (r > q) {
            r = b - 1 + k
        }
        p.set("text", r);
        p.cloneEvents(g)
    }
    var n = new Element("table").set({id: "asdf", nowrap: "nowrap", width: "80px"}).inject(this.SelYearPopDiv);
    this.yctbody = new Element("tbody").inject(n);
    var f = m.clone().inject(this.yctbody);
    var o = g.clone().addClass("yttd").inject(f);
    o.cloneEvents(g, "mouseover");
    o.cloneEvents(g, "mouseout");
    o.set("text", "←");
    o.addEvent("click", function () {
        a.getElements("td.yttd").each(function (u, t) {
            u.set("text", u.get("text") / 1 - 10)
        })
    }.bind(this));
    var l = g.clone().inject(f);
    l.cloneEvents(g, "mouseover");
    l.cloneEvents(g, "mouseout");
    l.set("text", "×");
    l.addEvent("click", function () {
        this.SelYearPopDiv.setStyle("display", "none");
        this.SelYear.setStyle("background", "transparent")
    }.bind(this));
    var h = g.clone().inject(f);
    h.cloneEvents(g, "mouseover");
    h.cloneEvents(g, "mouseout");
    h.set("text", "→");
    h.addEvent("click", function () {
        a.getElements("td.yttd").each(function (u, t) {
            u.set("text", u.get("text") / 1 + 10)
        })
    }.bind(this));
    m.destroy();
    g.destroy()
}, build_popSelectDate: function () {
    var a = new Element("tr").inject(this.DivTbody);
    this.build_popTRWeek(a);
    this.build_popTRDays(this.DivTbody, this.oldDate.getFullYear(), this.oldDate.getMonth(), this.oldDate.getDate())
}, build_popSelectHour: function () {
    this.SelHour.setStyle("display", "").empty();
    for (var a = 0; a < 24; a++) {
        var b = new Element("option", {value: a}).appendText(a);
        b.inject(this.SelHour);
        if (this.oldDate.getHours() == a) {
            b.selected = true
        }
    }
    this.SelHour.addEvent("change", function (g) {
        var f = g.target;
        var c = f.getSelected()[0].value;
        this.oldDate.setHours(c)
    }.bind(this))
}, build_popSelectMinute: function () {
    this.SelMinute.setStyle("display", "").empty();
    for (var a = 0; a < 60; a++) {
        var b = new Element("option", {value: a}).appendText(a);
        b.inject(this.SelMinute);
        if (this.oldDate.getMinutes() == a) {
            b.selected = true
        }
    }
    this.SelMinute.addEvent("change", function (g) {
        var f = g.target;
        var c = f.getSelected()[0].value;
        this.oldDate.setMinutes(c)
    }.bind(this))
}, build_popSelectSecond: function () {
    this.SelSecond.setStyle("display", "").empty();
    for (var a = 0; a < 60; a++) {
        var b = new Element("option", {value: a}).appendText(a);
        b.inject(this.SelSecond);
        if (this.oldDate.getSeconds() == a) {
            b.selected = true
        }
    }
    this.SelSecond.addEvent("change", function (g) {
        var f = g.target;
        var c = f.getSelected()[0].value;
        this.oldDate.setSeconds(c)
    }.bind(this))
}, build_popTRWeek: function (c) {
    for (var a = 0; a < this.options.weekNames.length; a++) {
        var b = new Element("th").appendText(this.options.weekNames[a]);
        b.inject(c)
    }
    this.buildWeek = true
}, build_popTRDays: function (f, h, g, a) {
    this.testMonthDaysFebruary(h);
    var c = (1 - (7 + new Date(h, g, 1).getDay() - this.getWeekStartDay()) % 7);
    var j;
    while (c <= this.options.monthDays[g]) {
        j = new Element("tr", {name: "dayTr"});
        for (i = 0; i < 7; i++) {
            if ((c <= this.options.monthDays[g]) && (c > 0)) {
                var b = new Element("td").appendText(c).inject(j);
                b.addEvent("mouseover", function () {
                    $(this).addClass("dp_roll")
                });
                b.addEvent("mouseout", function () {
                    $(this).removeClass("dp_roll")
                });
                b.addEvent("click", function (m) {
                    var k = this.options.monthDays.filter(function (o, n) {
                        if (this.SelMonth.get("code") == n) {
                            return o
                        }
                    }.bind(this))[0];
                    var l = m.target;
                    if (this.options.dateControl == "minDay") {
                        if (l.innerHTML.toInt() != 1) {
                            this.dateInput.getParent("div").set("title", "只能是当前选择月的月初");
                            this.dateInput.set("ovalue", "").set("value", "").focus();
                            return
                        } else {
                            this.dateInput.getParent("div").set("title", "")
                        }
                    }
                    if (this.options.dateControl == "maxDay") {
                        if (l.innerHTML.toInt() != k) {
                            this.dateInput.getParent("div").set("title", "只能是当前选择月的月末");
                            this.dateInput.set("ovalue", "").set("value", "").focus();
                            return
                        } else {
                            this.dateInput.getParent("div").set("title", "")
                        }
                    }
                    this.oldDate.setDate(l.innerHTML.toInt());
                    this.giveOutValue();
                    this.execGridOnFinished()
                }.bind(this))
            } else {
                b = new Element("td", {"class": "dp_empty"}).inject(j)
            }
            if ((c == this.oldDate.getDate()) && (g == this.oldDate.getMonth()) && (h == this.oldDate.getFullYear())) {
                b.addClass("dp_selected")
            }
            if ((c == new Date().getDate()) && (g == new Date().getMonth()) && (h == new Date().getFullYear())) {
                b.addClass("dp_today")
            }
            c++
        }
        j.inject(f)
    }
}, testMonthDaysFebruary: function (a) {
    if (this.isLeapYear(a)) {
        this.options.monthDays[1] = 29
    } else {
        this.options.monthDays[1] = 28
    }
}, isLeapYear: function (a) {
    return(a % 4 == 0 && a % 100 != 0) || (a % 400 == 0)
}, getWeekStartDay: function () {
    return 7
}, giveDataTopopDiv: function (a) {
    this.giveDataTopopDiv_selectYear(a.getFullYear());
    this.giveDataTopopDiv_selectMonth(a.getMonth().toInt());
    this.giveDataTopopDiv_selectHour(a.getHours());
    this.giveDataTopopDiv_selectMinute(a.getMinutes());
    this.giveDataTopopDiv_selectSecond(a.getSeconds())
}, giveDataTopopDiv_selectYear: function (a) {
}, giveDataTopopDiv_selectMonth: function (a) {
}, giveDataTopopDiv_selectHour: function (a) {
    this.SelHour.getSelected.selected = false;
    this.SelHour.getElement("option[value=" + a + "]").selected = true
}, giveDataTopopDiv_selectMinute: function (a) {
    this.SelMinute.getSelected.selected = false;
    this.SelMinute.getElement("option[value=" + a + "]").selected = true
}, giveDataTopopDiv_selectSecond: function (a) {
    this.SelSecond.getSelected.selected = false;
    this.SelSecond.getElement("option[value=" + a + "]").selected = true
}, giveDataTopopDiv_selectDay: function (b, c, a) {
    this.remove_popTRDays(this.DivTbody);
    this.build_popTRDays(this.DivTbody, b, c.toInt() - 1, a)
}, remove_popTRDays: function (a) {
    a.getElements("tr[name=dayTr]").each(function (c, b) {
        c.destroy()
    })
}, giveOutValue: function () {
    this.dateInput.value = SwordDataFormat.formatDateToString(this.oldDate, this.dateInput.get("dataformat"));
    this.dateInput.set("realvalue", this.dateInput.value)
}, getValue: function (c) {
    var b, a = c.get("dataformat");
    if ($defined(c.get("realvalue"))) {
        b = c.get("realvalue")
    } else {
        b = c.get("value")
    }
    if (c.get("returnRealValue") == "false") {
        b = SwordDataFormat.formatStringToString(b, a, this.submitDateformat)
    } else {
        b = $defined(c.get("value")) ? c.get("value") : ""
    }
    return b
}, getShowValue: function (c, b) {
    var a = c.get("dataformat") || this.defaultdataformat;
    if (!$chk(b)) {
        if (c.get("showCurDate") == "true") {
            return SwordDataFormat.formatDateToString(new Date(), a)
        } else {
            return b
        }
    }
    if (b.split(".").length == 2) {
        b = b.split(".")[0]
    }
    return SwordDataFormat.formatStringToString(b, this.submitDateformat, a)
}, getRealValue: function (c, b) {
    if (!$chk(b)) {
        return b
    }
    if (b.split(".").length == 2) {
        b = b.split(".")[0]
    }
    var a = c.get("dataformat");
    if (c.get("returnRealValue") == "false") {
        b = SwordDataFormat.formatStringToString(b, a, this.submitDateformat)
    }
    return b
}, clear: function () {
    this.dateInput.destroy();
    this.dateBtn.destroy();
    this.datepopDiv.fade("out")
}, hand_Input1: function (a) {
    var g = a.target;
    try {
        var j = a.code;
        if (((j > 47) && (j < 58)) || ((j > 96) && (j < 106))) {
            var c = g.value;
            var f = String.fromCharCode(j);
            if (c.length == 0) {
                if (["1", "2"].contains(f)) {
                    g.value = (f == "1") ? 199 : 20
                }
                return false
            } else {
                if (c.length == 1) {
                    if (c == 1) {
                        g.value = 19
                    } else {
                        g.value = c + f
                    }
                    return false
                } else {
                    if (c.length == 3) {
                        g.value = c + f + "-";
                        return false
                    } else {
                        if (c.length == 4) {
                            if (parseInt(f) > 1) {
                                g.value = c.substring(0, 4) + "-0" + f + "-";
                                return false
                            } else {
                                g.value = c.substring(0, 4) + "-" + f;
                                return false
                            }
                        } else {
                            if (c.length == 5) {
                                if (parseInt(f) > 1) {
                                    g.value = c.substring(0, 5) + "0" + f + "-";
                                    return false
                                }
                            } else {
                                if (c.length == 6) {
                                    if (parseInt(c.substring(5, 6) + f) > 12) {
                                        g.value = c.substring(0, 5) + "12-"
                                    } else {
                                        if (parseInt(c.substring(5, 6) + f) == 0) {
                                            g.value = c + 1 + "-"
                                        } else {
                                            g.value = c + f + "-"
                                        }
                                    }
                                    return false
                                } else {
                                    if (c.length == 7) {
                                        if (c.substring(5, 7) == "02" && parseInt(f) > 2) {
                                            g.value = c + "-";
                                            return false
                                        } else {
                                            if (c.substring(5, 7) != "02" && parseInt(f) > 3) {
                                                g.value = c.substring(0, 7) + "-0" + f;
                                                return false
                                            } else {
                                                g.value = c.substring(0, 7) + "-" + f;
                                                return false
                                            }
                                        }
                                    } else {
                                        if (c.length == 8) {
                                            if (c.substring(5, 7) == "02" && parseInt(f) > 2) {
                                                return false
                                            } else {
                                                if (parseInt(f) > 3) {
                                                    g.value = c.substring(0, 8) + "0" + f;
                                                    return false
                                                }
                                            }
                                        } else {
                                            if (c.length == 9) {
                                                var b = c.substring(8, 9) + f;
                                                var l = parseInt(b);
                                                var k = parseInt(this._getDays(c.substring(0, 4), c.substring(5, 7)));
                                                if (l > k) {
                                                    g.value = c.substring(0, 8) + k
                                                } else {
                                                    if (l == 0) {
                                                        g.value = c + 1
                                                    } else {
                                                        g.value = c + f
                                                    }
                                                }
                                                return false
                                            } else {
                                                if (c.length >= 10) {
                                                    g.value = (c + f).substring(0, 10);
                                                    return false
                                                } else {
                                                    return true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else {
            return(j == 8 || j == 37 || j == 39 || (a.control && j == 86) || (a.shift && j == 36))
        }
    } catch (h) {
    }
}, hand_Input: function (a) {
    var k = a.target;
    try {
        var o = a.code;
        var f = k.value;
        var n = this.getCursortPosition(k);
        var p = f.length;
        var r = document.selection.createRange().text.length;
        var u = this.dateInput.get("showOptions").split(",");
        var h = this.options.dateControl;
        if ((o >= 96) && (o < 106)) {
            o = o - 48
        }
        var j = String.fromCharCode(o);
        if (((o > 47) && (o < 58))) {
            if (n == p && r == 0) {
                if (p == 2) {
                    if (u[0] == "false" && u[1] == "true" && u[2] == "false") {
                        return false
                    }
                } else {
                    if (p == 3) {
                        var g = "";
                        if (u[1] == "true") {
                            g = "-"
                        }
                        var m = f + j;
                        if (m.toInt() < this.options.yearNames.beginYear.toInt()) {
                            k.value = this.options.yearNames.beginYear + g
                        } else {
                            if (m.toInt() > this.options.yearNames.endYear.toInt()) {
                                k.value = (this.options.yearNames.endYear - 1) + g
                            } else {
                                k.value = f + j + g
                            }
                        }
                        return false
                    } else {
                        if (p == 4) {
                            if (u[1] == "true") {
                                if (parseInt(j) > 1 && u[2] == "true") {
                                    k.value = f.substring(0, 4) + "-0" + j + "-";
                                    return false
                                } else {
                                    k.value = f.substring(0, 4) + "-0" + j;
                                    return false
                                }
                            } else {
                                return false
                            }
                        } else {
                            if (p == 5) {
                                if (parseInt(j) > 1) {
                                    var u = this.dateInput.get("showOptions").split(",");
                                    var g = "";
                                    if (u[2] == "true") {
                                        g = "-"
                                    }
                                    k.value = f + "0" + j + g;
                                    return false
                                }
                            } else {
                                if (p == 6) {
                                    var u = this.dateInput.get("showOptions").split(",");
                                    var g = "";
                                    if (u[2] == "true") {
                                        g = "-"
                                    }
                                    var b = (f.substring(5, 6) + j).toInt();
                                    if (b > 12) {
                                        k.value = f.substring(0, 5) + "12" + g
                                    } else {
                                        if (b == 0) {
                                            k.value = f + 1 + g
                                        } else {
                                            k.value = f + j + g
                                        }
                                    }
                                    return false
                                } else {
                                    if (p == 7) {
                                        if (u[2] == "true") {
                                            if (f.substring(5, 7) == "02" && parseInt(j) > 2) {
                                                k.value = f + "-";
                                                return false
                                            } else {
                                                if (f.substring(5, 7) != "02" && parseInt(j) > 3) {
                                                    k.value = f.substring(0, 7) + "-0" + j;
                                                    return false
                                                } else {
                                                    k.value = f.substring(0, 7) + "-" + j;
                                                    return false
                                                }
                                            }
                                        } else {
                                            return false
                                        }
                                    } else {
                                        if (p == 8) {
                                            if (f.substring(5, 7) == "02" && parseInt(j) > 2) {
                                                k.value = f.substring(0, 8) + "0" + j;
                                                return false
                                            } else {
                                                if (parseInt(j) > 3) {
                                                    k.value = f.substring(0, 8) + "0" + j;
                                                    return false
                                                }
                                            }
                                        } else {
                                            if (p == 9) {
                                                var b = f.substring(8, 9) + j;
                                                var s = b.toInt();
                                                var q = parseInt(this._getDays(f.substring(0, 4), f.substring(5, 7)));
                                                if (s > q) {
                                                    k.value = f.substring(0, 8) + q;
                                                    return false
                                                } else {
                                                    if (s == 0) {
                                                        k.value = f + 1;
                                                        return false
                                                    }
                                                }
                                            } else {
                                                if (p >= 10) {
                                                    if (r < 10) {
                                                        k.value = (f + j).substring(0, 10);
                                                        return false
                                                    } else {
                                                        f = j;
                                                        k.value = "";
                                                        return true
                                                    }
                                                } else {
                                                    return true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                if (u[1] == "true") {
                    if (u[2] == "true") {
                        if (p >= 10) {
                            if (r < 10) {
                                k.value = (f + j).substring(0, 10);
                                return false
                            } else {
                                f = j;
                                k.value = "";
                                return true
                            }
                        } else {
                            return true
                        }
                    } else {
                        var c = 7;
                        if (u[0] == "false") {
                            c = 2
                        }
                        if (h == "minDay" || h == "maxDay") {
                            c = 10
                        }
                        if (p >= c) {
                            if (r < c) {
                                k.value = (f + j).substring(0, c);
                                return false
                            } else {
                                f = j;
                                k.value = "";
                                return true
                            }
                        } else {
                            return true
                        }
                    }
                } else {
                    if (u[0] == "true") {
                        if (p > 4) {
                            if (r < 4) {
                                k.value = (f + j).substring(0, 4);
                                return false
                            } else {
                                f = j;
                                k.value = "";
                                return true
                            }
                        } else {
                            return true
                        }
                    }
                }
                return true
            }
        } else {
            if (o == 229) {
                if (r > 0) {
                    k.value = "";
                    return true
                }
                if (u[1] == "true") {
                    var c = 7;
                    if (h == "minDay" || h == "maxDay") {
                        c = 10
                    }
                    if (u[2] == "true") {
                        if (p >= 10) {
                            return false
                        }
                    } else {
                        if (u[0] == "false") {
                            if (p >= 2) {
                                return false
                            }
                        } else {
                            if (p >= c) {
                                return false
                            }
                        }
                    }
                } else {
                    if (p > 3) {
                        return false
                    }
                }
            } else {
                return(o == 8 || o == 37 || o == 39 || (a.control && o == 86) || (a.shift && o == 36) || o == 229)
            }
        }
    } catch (l) {
    }
}, hand_Input_nctrl: function (b) {
    try {
        var j = b.code;
        if ((j >= 96) && (j < 106)) {
            j = j - 48
        }
        if (((j > 47) && (j < 58)) || (j == 189 && !b.shift) || (!Browser.Engine.trident && j == 45)) {
            var f = b.target, c = f.value, a = c.length, g = f.get("dataformat").length;
            var l = this.getTextRangeIndex(f);
            var k;
            if (Browser.Engine.trident) {
                k = c.substring(0, l[1]) + (j == 189 ? "-" : String.fromCharCode(j)) + c.substring(l[0], a)
            } else {
                k = c.substring(0, l[0]) + (j == 45 ? "-" : String.fromCharCode(j)) + c.substring(l[1], a)
            }
            if (a <= g - 1) {
                this.defaultValidate(k, f);
                return true
            } else {
                if (a == g) {
                    if (l[1] - l[0] == 0) {
                        return false
                    }
                    this.defaultValidate(k, f);
                    return true
                }
            }
        } else {
            return(j == 8 || j == 37 || j == 39 || (b.control && j == 86) || (b.shift && j == 36))
        }
    } catch (h) {
    }
}, _getDays: function (b, a) {
    a = parseInt(a, 10) + 1;
    return(new Date(b + "/" + a + "/0")).getDate()
}, defaultValidate: function (b, a) {
    if (this.options.autoCtrl != "true") {
        if (!a.get("rule") || !a.get("rule").contains("date")) {
            if ($chk(b) && !SwordDataFormat.isDate(b, a.get("dataformat"))) {
                this.validate.showIntimeMes(a, "格式不符合" + a.get("dataformat"));
                this.validate.showIntimeError(a)
            } else {
                if (!a.get("rule")) {
                    this.validate.showIntimeCorrect(a);
                    this.validate.tooltips.hide(a.get("name"))
                }
            }
        }
    }
}, keyEvents: function (f) {
    if (f.key == "backspace") {
        var b = f.target;
        if (b.get("readonly")) {
            return false
        }
        var k;
        var j = b.value, g = j.length;
        if (this.options.autoCtrl == "true") {
            var h = this.getCursortPosition(b);
            var a = document.selection.createRange().text.length;
            if (a == 0) {
                a = 1
            }
            j = j.substring(0, h - a) + j.substring(h, j.length);
            b.set("value", j);
            var c = b.createTextRange();
            c.collapse(true);
            c.moveEnd("character", h - a);
            c.moveStart("character", h - a);
            c.select()
        } else {
            var l = this.getTextRangeIndex(f.target);
            if (Browser.Engine.trident) {
                if (l[1] == l[0]) {
                    k = j.substring(0, l[1] - 1) + j.substring(l[1], g)
                } else {
                    k = j.substring(0, l[1]) + j.substring(l[0], g)
                }
            } else {
                if (l[1] == l[0]) {
                    k = j.substring(0, l[1] - 1) + j.substring(l[1], g)
                } else {
                    k = j.substring(0, l[0]) + j.substring(l[1], g)
                }
            }
        }
        this.defaultValidate(k, b);
        return true
    }
}, getCursortPosition: function (a) {
    var c = 0;
    if (document.selection) {
        a.focus();
        var b = document.selection.createRange();
        b.moveStart("character", -a.value.length);
        c = b.text.length
    } else {
        if (a.selectionStart || a.selectionStart == "0") {
            c = a.selectionStart
        }
    }
    return(c)
}, getTextRangeIndex: function (f) {
    var b = [];
    if ($defined(document.selection)) {
        var c = document.selection.createRange();
        var a = f.createTextRange();
        c.setEndPoint("StartToStart", a);
        b[0] = c.text.length;
        c = document.selection.createRange();
        a = f.createTextRange();
        c.setEndPoint("EndToStart", a);
        b[1] = c.text.length
    } else {
        b[0] = f.selectionStart;
        b[1] = f.selectionEnd
    }
    return b
}, getBoxEl: function (a) {
    return a.getPrevious().getElement(".swordform_item_oprate")
}, getImgEl: function (a) {
    return a.getParent().getNext()
}, disable: function (b) {
    if ($defined(b)) {
        var a = this.getImgEl(b);
        b.set("disabled", true).addClass("calendar_input_disable").setStyle("background-color", "");
        a.addClass("dateBtn_disable")
    }
}, enable: function (c) {
    if ($defined(c)) {
        var a = this.getImgEl(c);
        c.erase("disabled").removeClass("calendar_input_disable");
        a.removeClass("dateBtn_disable");
        var b = c.get("rule");
        if ($defined(b) && b.contains("must")) {
            c.setStyle("background-color", "#b5e3df")
        }
    }
}, addEventToEl: function (a) {
    if (a == "input") {
        this.dateInput.addEvent("focus", function (f) {
            var c = $(new Event(f).target);
            if (c.get("isShow") == "false") {
                return
            }
            var b = c.createTextRange();
            b.moveEnd("character", c.value.length);
            b.moveStart("character", 0);
            b.select();
            this.show(c)
        }.bind(this))
    } else {
        this.dateBtn.addEvent("click", function (f) {
            var c = $(new Event(f).target);
            if (c.hasClass("dateBtn_disable")) {
                return
            }
            if (Browser.Engine.trident4) {
                var b = c.getParent("td").getElement("input.swordform_item_oprate");
                this.dateInput = $(b);
                this.dateBtn = c.getParent("td").getElement(".dateBtn")
            } else {
                this.dateBtn = c;
                this.dateInput = this.getBoxEl(this.dateBtn)
            }
            this.show(this.dateInput)
        }.bind(this))
    }
    if (!this.windowClick) {
        window.document.addEvent("click", function (g) {
            if (this.dateInput.get("show") == "true") {
                var f = g.target;
                var c = f.parentNode;
                var b = c.parentNode;
                if (f != this.dateInput && null != this.dateBtn && null != this.datepopDiv && f != this.dateBtn && f != this.ymContainer && f != this.ymct && f != this.SelHour && f != this.SelMinute && f != this.SelSecond && c != this.ymContainer && c != this.ymct && c != this.SelHour && c != this.SelMinute && c != this.SelSecond && c != this.topDiv && f != this.topDiv && b != this.mtbody && b != this.ytbody && b != this.yctbody && b != this.monthContent && b != this.yearContent) {
                    this.hide()
                }
            }
        }.bind(this));
        this.windowClick = true
    }
}});
var SwordFileUpload = new Class({Implements: [Events, Options], name: "fileUploadCommit", options: {postData: null}, ExtraDataKey: "postData", postDataInput: null, formKey: "FileUploadCommitForm", iframeKey: "FileUploadCommitIframe", commitForm: null, commitIframe: null, initialize: function (a) {
    new Element("iframe", {id: "FileUploadCommitIframe", name: "FileUploadCommitIframe", styles: {display: "none"}}).inject(document.body)
}, initParam: function (a) {
    $extend(this.options, a);
    return this
}, commit: function (a, k) {
    this.createUploadForm();
    this.commitForm.getElements("div.uploadGroup").each(function (l) {
        l.destroy()
    });
    var f, h, c;
    $$("div.uploadGroup").each(function (l) {
        if (l.get("keepfile") != "true") {
            f = l.clone(true);
            f.getElement("input").cloneEvents(l.getElement("input"));
            h = l.getParent();
            h.insertBefore(f, l);
            c = l.retrieve("parent").getWidget(l.get("name"));
            c.resetElStatus(f);
            c.parent.fieldElHash.set(l.get("name"), f)
        } else {
            l.store("pNode", l.getParent())
        }
        l.setStyle("display", "none").inject(this.commitForm)
    }, this);
    var j;
    var g = j = this.options.postData.ctrl;
    if ($defined(g)) {
        var b = g.lastIndexOf("?");
        if (b != -1) {
            j = j.replace("?", "&")
        }
    }
    this.commitForm.set("action", "upload.sword?ctrl=" + ($defined(j) ? j : ""));
    if (a == "false") {
        this.options.postData.data = this.options.postData.data.combine([
            {sword: "attr", name: "uploadRedirect", value: "true"}
        ]);
        if ($defined(k) && k.contains("form_")) {
            this.commitForm.set("target", k.split("_")[1])
        } else {
            this.commitForm.set("target", "FileUploadCommitIframe")
        }
    }
    if ($defined(this.postDataInput)) {
        this.postDataInput.set("value", JSON.encode(this.options.postData))
    } else {
        this.postDataInput = new Element("input", {type: "hidden", name: "postData", value: JSON.encode(this.options.postData)}).inject(this.commitForm)
    }
    this.commitForm.submit();
    this.commitForm.getChildren("div.uploadGroup").each(function (l) {
        if (l.get("keepfile") == "true") {
            l.setStyle("display", "").inject(l.retrieve("pNode"))
        }
    })
}, createUploadForm: function () {
    if (!$defined(this.commitForm)) {
        this.commitForm = new Element("form", {name: this.formKey, id: this.formKey, method: "post", display: "none", encoding: "multipart/form-data", enctype: "multipart/form-data"}).inject(document.body)
    }
    return this.commitForm
}});
var SwordForm$Layout = {deflayer: {cols: 2, item: {trs: [
    [
        {name: "caption"},
        {name: "name"}
    ]
]}}, layer0: {cols: 1, item: {trs: [
    [
        {name: "caption"},
        {name: "name"}
    ]
]}}, layer1: {cols: 2, item: {trs: [
    [
        {name: "caption"},
        {name: "name"}
    ]
]}}, layer2: {cols: 3, item: {trs: [
    [
        {name: "caption"},
        {name: "name"}
    ]
]}}, layer3: {cols: 1, item: {trs: [
    [
        {name: "caption"},
        {name: "name"},
        {name: "des"}
    ]
]}}, layer4: {cols: 2, item: {trs: [
    [
        {name: "caption"},
        {name: "name"},
        {name: "des"}
    ]
]}}};
var SwordForm = new Class({Implements: [Events, Options], Extends: PageContainer, name: "SwordForm", $family: {name: "SwordForm"}, options: {sword: null, name: null, caption: null, layout: null, pNode: null, panel: "false", beanname: null, userDefine: null, onFinish: $empty, size: null, css: null, isValidate: "", vType: null, topPanel: false, btmPanel: false, requiredSign: "caption", edit: null, isShowTogdiv: false}, el: {name: null, caption: null, rule: null, des: null, desType: null, biztid: null, bizctrl: null, vType: null, scope: null, css: null, defValue: null, onValidate: null, onCreate: null, maxLength: 10000, msg: null, dataformat: null, submitformat: null, format: null, show: true, tipTitle: null, placeholder: null}, dftcss: {caption: null, text: null}, dftsize: {ButtonWidth: 75, ButtonWidth: 75, CaptionWidth: 80, TdWidth: 250, FiledWidth: 145, DesWidth: 170, VimgWidth: 17, VimgHeight: 21, VFiledWidth: 180}, getEl: function (b) {
    var c = $unlink(this.el);
    for (var a in c) {
        c[a] = b.get(a) || c[a];
        if (a == "opts") {
            c[a] = b.getChildren(">div")
        }
        if ($type(c[a]) == "function" && (/^on[A-Z]/).test(a)) {
            c[a] = new Function("param", c[a])
        }
    }
    return c
}, userSize: null, idx: 0, Vobj: null, items: null, itemsDiv: [], layer: null, defAtts: ["caption", "name", "des"], elmodel: ["div", "item", "div"], blocks: [], hiddens: [], hasFile: false, wrapDiv: null, noblock: "noblcok", lazyInitData: new Hash(), panel: null, fieldElHash: null, fieldElOrderHash: null, isHasFile: function () {
    return this.hasFile
}, initParam: function (a) {
    if (this.tooltips == null) {
        this.tooltips = pageContainer.create("SwordToolTips")
    }
    this.fieldElHash = new Hash();
    this.fieldElOrderHash = new Hash();
    this.htmlOptions(a);
    this.userSize = JSON.decode(this.options.size);
    if ($defined(this.userSize)) {
        this.dftsize = $extend(this.dftsize, this.userSize)
    }
    var b = JSON.decode(this.options.css);
    if ($defined(b)) {
        this.dftcss = $extend(this.dftcss, b)
    }
    this.blocks = a.getChildren(">div[type='block']");
    this.items = a.getChildren(">div[console!='submit'][console!='reset'][console!='button']");
    if (a.getElements("div[type='file']").length > 0) {
        this.hasFile = true
    }
    this.layer = SwordForm$Layout[this.options.layout] || SwordForm$Layout.deflayer;
    this.Vobj = pc.widgetFactory.create("SwordValidator");
    this.options.vType = this.options.vType || "intime";
    this.Vobj.initParam(this.options.vType);
    this.createForm()
}, createForm: function () {
    this.options.pNode.set({"class": "swordfrom_div", align: "center"});
    this.wrapDiv = new Element("div", {align: "center", "class": "swordfrom_wrap_div"}).inject(this.options.pNode);
    if (this.options.topPanel == "true") {
        var div = new Element("div", {"class": "swordform_panel_top"}).inject(this.wrapDiv);
        div.set("html", "<div class='l'></div><div class='r'></div>")
    }
    if (this.options.panel == "true") {
        this.panel = new SwordPanel({pNode: this.wrapDiv, caption: this.options.caption}).initParam();
        if (this.options.isShowTogdiv == "true") {
            new Element("div", {"class": "x-tool", title: "收缩", events: {click: function (e) {
                var tar = new Event(e).target;
                this.toggleFormDisplay(tar)
            }.bind(this)}}).inject(this.panel.tc, "top")
        }
    }
    if (this.options.userDefine != "true") {
        if (this.blocks.length == 0) {
            this.blocks = [this.noblock]
        }
        this.blocks.each(function (block) {
            var items, fieldset, layer;
            if (block == this.noblock) {
                layer = this.layer;
                items = this.items;
                this.items.each(function (item, index) {
                    this.itemsDiv[index] = item.clone()
                }.bind(this));
                fieldset = new FormBlockArea({pNode: this.wrapDiv, caption: "", isHide: "false", name: "", isShow: "true"}).initParam()
            } else {
                items = block.getChildren(">div");
                fieldset = new FormBlockArea({pNode: this.wrapDiv, caption: block.get("caption"), isHide: block.get("isHide"), name: block.get("name"), isShow: block.get("isShow")}).initParam();
                layer = ($defined(block.get("layout"))) ? eval(block.get("layout")) : this.layer
            }
            var itemDiv = new Element("div", {"class": "swordform_items_div", height: "auto"}).inject(fieldset);
            items = items.filter(function (its) {
                if (its.get("type") == "hidden") {
                    this.hiddens.include(its)
                }
                return its.get("type") != "hidden"
            }, this);
            var ems = items.splitForm(layer.cols);
            ems.each(function (em, idx) {
                var div = new Element("div", {"class": "swordform_row_div"}).inject(itemDiv);
                div.addClass(((idx + 1) % 2 == 0) ? "swordform_row_shuang" : "swordform_row_dan");
                em.each(function (e, index, em) {
                    if (!$chk(e.get("name")) && e.get("type") != "userdefine") {
                        return
                    }
                    var isLast = (index + 1 == em.length);
                    this._parseRow(div, e, layer, isLast)
                }.bind(this));
                em.each(function (el) {
                    if (el.get("show") == "false") {
                        this.unDisplayItem(el.get("name"))
                    }
                }.bind(this))
            }.bind(this))
        }, this);
        var hiddenDiv = new Element("div", {styles: {display: "none"}}).inject(this.wrapDiv);
        this.hiddens.each(function (hids) {
            this._parseRow(hiddenDiv, hids, this.layer)
        }, this);
        if (this.options.btmPanel == "true") {
            var div = new Element("div", {"class": "swordform_panel_btm"}).inject(this.wrapDiv);
            div.set("html", "<div class='l'></div><div class='r'></div>")
        }
        var bts = this.options.pNode.getChildren(">div[console]");
        var tr;
        bts.each(function (buton, idx) {
            if (idx == 0) {
                tr = this.createConsole(this.wrapDiv)
            }
            this.createButton(tr, buton)
        }.bind(this));
        if (jsR.config.swordForm.align == "center") {
            this.refreshForm()
        }
    } else {
        if ($defined(this.wrapDiv)) {
            if (this.options.panel == "false") {
                this.wrapDiv.setStyle("border-style", "none")
            }
            this.options.pNode.grab(this.wrapDiv, "top")
        }
        this.wrapDiv = this.options.pNode;
        this.items = this.wrapDiv.getElements("div[type][name]");
        var item, sw;
        var hiddenDiv = new Element("div", {styles: {display: "none"}}).inject(this.wrapDiv);
        for (var i = 0; i < this.items.length; i++) {
            item = this.items[i];
            sw = item.parentNode.getAttribute("sword");
            if ($chk(sw) && sw != "SwordForm") {
                continue
            }
            this.itemsDiv[i] = item.clone();
            if (item.get("type") == "hidden" && item.get("yxbj") != "false") {
                this._parseItem(hiddenDiv, item)
            } else {
                var p = item.getParent();
                this._parseItem(p, item);
                var newNode = p.getLast();
                p.insertBefore(newNode, item);
                item.setStyle("display", "none")
            }
        }
    }
    this.getFieldEls().filter(function (el) {
        return(el.get("tag").toLowerCase() != "textarea")
    }).addEvent("keyup", this.nextFocus.bind(this));
    this.lazyInitData.each(function (v, k) {
        this.getWidget(k).initData(v, "ie6")
    }.bind(this));
    if (this.options.edit == "false") {
        this.disable()
    }
}, toggleFormDisplay: function (b, c) {
    if (!b) {
        b = this.panel.tc.getElement("div.x-tool")
    }
    var f = $splat(this.wrapDiv.getElement("div.swordform_block") || this.wrapDiv.getChildren("table"));
    var a = this.wrapDiv.getElement("div[sword=SwordToolBar]");
    if (a) {
        f.include(a)
    }
    if (b.hasClass("x-tool-s") && !c) {
        b.set("title", "收缩");
        b.removeClass("x-tool-s");
        this.panel.tc.getParent().setStyle("border-bottom", "none");
        f.each(function (h, g) {
            if (h.hasClass("x-tool-dis") && h.getStyle("display") == "none") {
                h.setStyle("display", "");
                h.removeClass("x-tool-dis")
            }
        }.bind(this))
    } else {
        b.set("title", "展开");
        b.addClass("x-tool-s");
        this.panel.tc.getParent().setStyle("border-bottom", "1px #7F9DB9 solid");
        f.each(function (h, g) {
            if (h.getStyle("display") != "none") {
                h.setStyle("display", "none");
                h.addClass("x-tool-dis")
            }
        }.bind(this))
    }
}, refreshForm: function () {
    var a = 0;
    var b = this.options.pNode.getElements("div.swordform_row_div");
    b.each(function (g, c) {
        this.reSizeRow(g);
        var f = 0;
        g.getElements(".swordform_item_div").each(function (k, h) {
            var j;
            if (k.getFirst() && k.getFirst().get("tag") == "table") {
                j = k.getFirst().getWidth().toInt()
            } else {
                j = k.getWidth().toInt()
            }
            f += j
        }.bind(this));
        if (f > a) {
            a = f
        }
    }.bind(this));
    b.setStyle("width", a)
}, _parseRow: function (h, c, b, g) {
    var j = new Element("div", {"class": "swordform_item_div", idx: this.idx}).inject(h);
    this.idx = this.idx + 1;
    var f = new Element("table", {"class": "swordform_item_table", cellspacing: 0, cellpadding: 0, border: 0}).inject(j);
    var a = new Element("tbody").inject(f);
    b.item.trs.each(function (k) {
        var l = new Element("tr", {"class": "swordform_item_tr"}).inject(a);
        k.each(function (r) {
            var s = new Element("td", {"class": "swordform_item_" + r.name + "_td", colspan: $defined(r.colspan) ? r.colspan : 1, rowspan: $defined(r.rowspan) ? r.rowspan : 1}).inject(l);
            var m = this.elmodel[this.defAtts.indexOf(r.name)];
            if (m == "item") {
                if ($defined(c.get("cols"))) {
                    var q = c.get("cols") / 1;
                    s.setStyle("width", (this.dftsize.TdWidth * q + this.dftsize.CaptionWidth * (q - 1)))
                } else {
                    s.setStyle("width", this.dftsize.TdWidth)
                }
                if (g) {
                    s.setStyle("border-right", 0)
                }
                this._parseItem(s, c)
            } else {
                if (r.name == "des" && c.get("desType") != null) {
                    var n = $(c.get("desType"));
                    n.clone().cloneEvents(n).inject(s)
                } else {
                    var o = new Element(m, {"for": c.get("name"), text: c.get(r.name), "class": "swordform_item_text_" + r.name}).inject(s);
                    if (r.name == "caption") {
                        var p = c.get("rule");
                        if ($chk(this.dftcss.caption) && $defined(this.dftcss.caption)) {
                            o.set("style", this.dftcss.caption)
                        }
                        o.setStyle("width", this.dftsize.CaptionWidth);
                        o.set("text", c.get(r.name));
                        if ($defined("rule") && $chk(p)) {
                            if (p.indexOf("must") > -1 && this.options.requiredSign == "caption") {
                                o.innerHTML += "<span style='color:red'>*</span>"
                            }
                        }
                    }
                }
            }
        }.bind(this))
    }.bind(this))
}, _itemSwitch: function (C, f, c) {
    var a = this.options.pNode.getElement("div[name='" + C + "']");
    var j = this.itemsDiv.filter(function (p) {
        return p.get("name") == C
    })[0].attributes;
    var l = {};
    for (var x = j.length; x > 0;) {
        var B = j[--x].nodeName;
        if (/^on/.test(B)) {
            l[B] = j[x].nodeValue
        }
    }
    var y = a.clone(true);
    a.set("type", f);
    a.set(l);
    a.set(c);
    if (this.options.requiredSign == "caption" && this.options.userDefine != "true") {
        var k = a.get("rule");
        var g = this.wrapDiv.getElement("div[for='" + C + "']");
        if (g) {
            var q = g.getElement("span");
            if ($defined(k)) {
                if (k.indexOf("must") > -1) {
                    if (!q) {
                        g.innerHTML += "<span style='color:red'>*</span>"
                    }
                } else {
                    if (q) {
                        q.destroy()
                    }
                }
            } else {
                if (q) {
                    q.destroy()
                }
            }
        }
    }
    if (this.options.userDefine == "true" && this.options.requiredSign == "caption" && $defined(c.rule)) {
        var k = c.rule;
        var r = this.wrapDiv.getElement("*[span=" + C + "]");
        if (r && k.indexOf("must") == -1) {
            var w = r.getElement("span.red");
            if (w) {
                w.destroy()
            }
        }
    }
    var n = this.wrapDiv.getElement("*[name='" + C + "']");
    if (n.get("tag") == "td") {
        n = n.getElement("input[name='" + C + "']")
    }
    var b = n.retrieve("data");
    var t = n.get("value") || n.get("text");
    var A = false, u, h;
    if (n.get("widget") == "select") {
        A = true;
        u = n.retrieve("allDb");
        h = n.get("realvalue")
    }
    if (Browser.Engine.trident4) {
        var s = ["select", "calendar", "tree"].contains(n.get("widget")) ? n.getParent("table.swordform_field_wrap").getParent("td") : (n.get("tag") == "div" ? n.getParent("td").empty() : n.getParent("table.swordform_field_wrap").getParent("td").empty());
        if (["select", "calendar", "tree"].contains(n.get("widget"))) {
            var z = n.getParent("table.swordform_field_wrap");
            var o = n.getParent("table.swordform_field_wrap").getNext("div") ? n.getParent("table.swordform_field_wrap").getNext("div") : n.getParent("table.swordform_field_wrap").getPrevious("div");
            z.parentNode.removeChild(z);
            o.parentNode.removeChild(o)
        }
        this._parseItem(s, a);
        var v = s.getElement("*[name='" + C + "']");
        v.set({text: t, value: t});
        if (v.get("tag") == "input") {
            v.addEvent("keyup", this.nextFocus.bind(this))
        }
        if (A) {
            v.store("allDb", u).set("realvalue", h).store("data", b)
        }
        if (n.get("type") == "text" && n.get("format")) {
            var m = n.get("realvalue");
            v.set({realvalue: m})
        }
        if (this.options.userDefine == "true") {
            y.inject(s)
        } else {
            y = null
        }
    } else {
        var s = ["select", "calendar", "tree"].contains(n.get("widget")) ? n.getParent("table.swordform_field_wrap").getParent("td").empty() : n.getParent("td").empty();
        this._parseItem(s, a);
        var v = s.getElement("*[name='" + C + "']");
        v.set({text: t, value: t});
        if (v.get("tag") == "input") {
            v.addEvent("keyup", this.nextFocus.bind(this))
        }
        if (A) {
            v.store("allDb", u).set("realvalue", h).store("data", b)
        }
        if (n.get("type") == "text" && n.get("format")) {
            var m = n.get("realvalue");
            v.set({realvalue: m})
        }
        if (this.options.userDefine == "true") {
            y.inject(s)
        } else {
            y = null
        }
    }
}, isVal: function () {
    return(this.options.isValidate == "true") || (this.options.vType == "elafter")
}, select: function (f, b, a) {
    var c = pageContainer.getSelect();
    c.setValidate(this.Vobj);
    c.initParam(b, this);
    this.setWidget(a, c);
    return c.box
}, label: function (g, f, a) {
    this.setWidget(a, null);
    var h = new Element("div", {"class": "swordform_field_wrap"}).inject(g);
    var c = new Element("label", this.getEl(f)).set({text: f.get("defValue"), "class": "swordform_item_oprate swordform_item_label"}).inject(h);
    if (this.isVal() && $defined(f.get("rule"))) {
        Sword.utils.createElAfter(h)
    }
    var b = Sword.utils.parseCss(f.get("css"), c);
    Sword.utils.setWidth(b, null, h, c, false);
    return c
}, textarea: function (j, g, b) {
    var h = {};
    var k = this.divTable = Sword.utils.createTable(h, false, false);
    k.inject(j);
    g.pNode = h.boxtd;
    var a = new Textarea(g);
    this.setWidget(b, a);
    var f = a.initParam(this, k);
    var c = Sword.utils.parseCss(a.options.css, a.box);
    Sword.utils.setWidth(c, this.userSize, k, a.box, false);
    return f
}, selectsolely: function (b, a) {
    return this.select(b, a)
}, checkbox: function (f, b, a) {
    var g = new Element("div", {"class": "swordform_field_wrap"}).inject(f);
    b.pNode = g;
    var c = new SwordGroupFields(b);
    c.initParam(b, this);
    this.setWidget(a, c);
    return c.wrap
}, radio: function (c, b, a) {
    return this.checkbox(c, b, a)
}, multiselect: function (b, a) {
    return this.checkbox(b, a)
}, file: function (f, c, a) {
    var g = new Element("div", {"class": "swordform_field_wrap"}).inject(f);
    c.pNode = g;
    var b = new fileUpload(c).initParam(c, this);
    this.setWidget(a, b);
    if (this.isVal() && $defined(c.get("rule"))) {
        Sword.utils.createElAfter(g)
    }
    return b.wrap
}, file2: function (g, f, b) {
    var h = new Element("div", {"class": "swordform_field_wrap"}).inject(g);
    var a = initIntimeUp(h, b, f);
    this.setWidget(b, a);
    var c = a.con;
    c.addClass("swordform_item_oprate");
    c.set("widgetGetValue", "true");
    c.set("widget", "true");
    if (this.isVal() && $defined(f.get("rule"))) {
        Sword.utils.createElAfter(h)
    }
    return c
}, hidden: function (c, b, a) {
    return this.text(c, b, a)
}, password: function (c, b, a) {
    return this.text(c, b, a)
}, text: function (c, n, b) {
    this.setWidget(b, null);
    var g = {};
    var a = Sword.utils.createTable(g, false, false).inject(c);
    var f = {type: n.get("type"), sf: n.get("submitformat"), d: n.get("defValue") || "", f: n.get("format") || "", r: n.get("rule") || "", n: b, m: n.get("msg"), t: n.get("tipTitle"), b: n.get("biztid"), bc: n.get("bizctrl"), ph: n.get("placeholder")};
    if (f.ph == "true") {
        g.boxtd.innerHTML = ["<input type='", f.type, "' bizctrl='", f.bc, "' submitformat=\"", f.sf, "\" defValue='", f.d, "' tipTitle='", f.t, "' biztid='", f.b, "' msg='", f.m, "' format=\"", f.f, "\" value='", f.d, "' rule='", f.r, "' id='", (this.options.name + "_" + f.n), "' placeholder='", f.ph, "'  name='", f.n, "' class='swordform_item_oprate swordform_item_input swordform_item_input_placeholder' >"].join("")
    } else {
        g.boxtd.innerHTML = ["<input type='", f.type, "' bizctrl='", f.bc, "' submitformat=\"", f.sf, "\" defValue='", f.d, "' tipTitle='", f.t, "' biztid='", f.b, "' msg='", f.m, "' format=\"", f.f, "\" value='", f.d, "' rule='", f.r, "' id='", (this.options.name + "_" + f.n), "' placeholder='", f.ph, "'  name='", f.n, "' class='swordform_item_oprate swordform_item_input' >"].join("")
    }
    var k = g.boxtd.getChildren("input")[0];
    var l = k._getPosition().y;
    this.cellTip(k, b);
    k.addEvent("focus", function () {
        k.select();
        this.showTip(b, k)
    }.bind(this));
    k.addEvent("blur", function () {
        if (k.get("placeholder") == "true") {
            if (k.get("value") == "") {
                k.set("value", k.get("defvalue"));
                k.addClass("swordform_item_input_placeholder");
                this.Vobj.validate(k)
            } else {
                if (k.get("value") != k.get("defvalue")) {
                    this.Vobj.validate(k)
                }
            }
        }
    }.bind(this));
    k.addEvent((Browser.Engine.trident || Browser.Engine.webkit) ? "keydown" : "keypress", function (o) {
        if (k.get("placeholder") == "true" && k.get("value") == k.get("defvalue")) {
            k.set("value", "");
            k.removeClass("swordform_item_input_placeholder")
        }
    }.bind(this));
    if ((n.get("rule") || "").indexOf("must") > -1 && this.options.requiredSign == "field") {
        new Element("span", {styles: {color: "red", "float": "right"}, html: "*"}).inject(g.boxtd)
    }
    if ((n.get("rule") || "").indexOf("must") > -1 && this.options.requiredSign == "caption" && this.options.userDefine == "true") {
        var j = this.wrapDiv.getElement("*[span=" + b + "]");
        if (j) {
            var m = j.getElement("span.red");
            if (!m) {
                j.grab(new Element("span", {"class": "red", html: "*"}), "top")
            }
        }
    }
    if (this.isVal() && $defined(n.get("rule"))) {
        Sword.utils.createElAfter(a)
    }
    var h = Sword.utils.parseCss(n.get("css"), k);
    Sword.utils.setWidth(h, this.userSize, a, k, false);
    return k
}, SwordSubmit: function (f, b, a) {
    var c = pageContainer.create("SwordSubmit");
    c.initParam(b)
}, date: function (g, b, a) {
    var f = pageContainer.getCalendar();
    f.setValidate(this.Vobj);
    var c = f.initParam(b, this);
    this.setWidget(a, f);
    return f.dateInput
}, pulltree: function (g, f, b) {
    var a = pageContainer.create("SwordTree");
    this.setWidget(b, a);
    pc.setWidget4loaddata(b, a);
    a.setValidate(this.Vobj);
    f.setProperty("select", "true");
    a.initParam(f, this);
    a.initData(f, this);
    var c = a.select.selBox;
    if (this.isVal() && $defined(f.get("rule"))) {
        Sword.utils.createElAfter(c.getParent().getParent(), c)
    }
    return c
}, validatecode: function (f, c, a) {
    var b = pageContainer.getValidateCode();
    b.initParam(c)
}, userdefine: function (c, b, a) {
    if (c.getPrevious() && !$defined(b.get("caption"))) {
        c.getPrevious().destroy()
    }
    c.setStyle("width", "");
    var f = new Element("div", {"class": "swordform_userdefine_wrap"}).inject(c);
    b.getChildren().each(function (g) {
        g.clone(true).inject(f);
        g.setStyle("display", "none")
    }.bind(this));
    f.getElements("div[type][name]").each(function (h) {
        this._parseItem(f, h);
        var g = f.getLast();
        h.getParent().insertBefore(g, h);
        h.destroy();
        g.setStyle("float", "left")
    }.bind(this));
    if (this.isVal() && $defined(b.get("rule"))) {
        Sword.utils.createElAfter(f)
    }
}, _parseItem: function (h, g) {
    var b = g.get("type");
    var c = g.get("name");
    if (!$defined(b)) {
        b = "text"
    }
    var f;
    h.store("space", this.wrapDiv);
    g.pNode = h;
    f = this[b](h, g, c);
    var a = ($defined(g.get("biztid")) || $defined(g.get("bizctrl")));
    if ($defined(f)) {
        if (Browser.Engine.trident) {
            if (Browser.Engine.trident4) {
                sword_convertHTML(f, g);
                this.addFormatEvent(f);
                if (!a && $defined(g.get("rule")) && g.get("rule") != "" && b != "select" && b != "date") {
                    this.Vobj._add(f)
                }
            } else {
                this.addFormatEvent(f);
                sword_convertHTML(f, g);
                if (!a && $defined(g.get("rule")) && g.get("rule") != "" && b != "select" && b != "date") {
                    this.Vobj._add(f)
                }
            }
        } else {
            if (!a && $defined(g.get("rule")) && g.get("rule") != "" && b != "select" && b != "date") {
                this.Vobj._add(f)
            }
            this.addFormatEvent(f);
            sword_convertHTML(f, g)
        }
        if (a) {
            f.addEvent("blur", function (k) {
                var j = new Event(k).target;
                this.validate($(j).get("name"))
            }.bind(this))
        }
        if (g.get("nfidx")) {
            this.fieldElOrderHash.set(g.get("nfidx") / 1, f)
        }
        if (f.hasClass("swordform_item_oprate")) {
            this.fieldElHash.set(g.get("name"), f)
        }
        if (!a && $defined(g.get("rule")) && g.get("rule").contains("must") && !(f.disabled || g.get("disable") == "true")) {
            this.getFieldEl(c).setStyle("background-color", "#b5e3df")
        }
        if (["text", "textarea"].contains(b) && (f.disabled || g.get("disable") == "true")) {
            this.disable(c)
        }
        if (g.get("show") == "false") {
            f.setStyle("display", "none")
        }
    }
}, bizValidate: function (a) {
    var c = a.get("rule");
    if (c) {
        if (!this.Vobj.validate(a)) {
            return
        }
    }
    if (!$defined(a.get("value"))) {
        return
    }
    var b = this.getReq({tid: a.get("biztid"), ctrl: a.get("bizctrl"), widgets: [this.getSubmitData()]});
    var f;
    pc.postReq({async: false, req: b, onSuccess: function (g) {
        if (g.success) {
            f = true;
            a.removeClass("invalid");
            this.Vobj.intimeValidate_Biz(a, g.valiMsg || "校验成功!", true)
        } else {
            f = false;
            a.addClass("invalid");
            this.Vobj.intimeValidate_Biz(a, g.valiMsg || "校验失败!", false)
        }
    }.bind(this), onError: function () {
        f = false;
        if (this.options.vType == "elafter") {
        } else {
        }
    }});
    return f
}, getExtraAtt: function () {
    return this.item.trs.flatten().filter(function (a) {
        return(!this.defAtts.contains(a.name))
    }, this)
}, createConsole: function (g) {
    var b = new Element("div", {"class": "swordform_btns_ct"}).inject(g, "bottom");
    var f = new Element("div", {"class": "swordform_panel_btns swordform_panel_btns_center"}).inject(b);
    var c = new Element("table", {cellspacing: "0"}).inject(f);
    var a = new Element("tbody").inject(c);
    return new Element("tr").inject(a)
}, createButton: function (b, l) {
    var f = new Element("td", {"class": "swordform_panel_btn_td"}).inject(b);
    var m = new Element("table", {"class": "swordform_btn_wrap swordform_btn", styles: {width: "75px"}, cellspacing: "0", cellpadding: "0", border: "0"}).inject(f);
    var g = new Element("tbody").inject(m);
    var k = new Element("tr").inject(g);
    var c = new Element("td", {"class": "swordform_btn_left", html: "<i>&nbsp;</i>"}).inject(k);
    var j = new Element("td", {"class": "swordform_btn_center"}).inject(k);
    var a = new Element("em").inject(j);
    var h = new Element("button", {"class": "swordform_btn_text", tid: l.get("tid"), ctrl: l.get("ctrl"), click: l.get("onClick"), onClickBefore: l.get("onClickBefore"), onClickAfter: l.get("onClickAfter"), console: l.get("console"), isRedirect: l.get("isRedirect"), notClearProperties: l.get("notClearProperties")}).inject(a).appendText(l.getAttribute("caption"));
    h.set({events: {mouseover: function (o) {
        var n = new Event(o).target.getParent(".swordform_btn_wrap");
        n.addClass("swordform_btn_over")
    }, mouseout: function (o) {
        var n = new Event(o).target.getParent(".swordform_btn_wrap");
        n.removeClass("swordform_btn_over")
    }}});
    h.addEvent("click", function (r) {
        var n = new Event(r).target;
        var q = n.get("onClickBefore");
        var p = n.get("click");
        var u = n.get("onclickAfter");
        if ($defined(q)) {
            this.getFunc(q)[0]()
        }
        if ($defined(p) && $chk(p) && n.get("console") != "reset") {
            if ($defined(p)) {
                this.getFunc(p)[0]()
            }
            if ($defined(u)) {
                this.getFunc(u)[0]()
            }
        } else {
            if (n.get("console") == "submit") {
                if (!this.validate()) {
                    return
                }
                var o = this.getReq({tid: n.get("tid"), ctrl: n.get("ctrl"), widgets: [this.getSubmitData()]});
                if (this.hasFile && n.get("isRedirect") != "false") {
                    var t = this.getUploadCommit().initParam({postData: o});
                    t.commit()
                } else {
                    pc.postReq({req: o, onSuccess: function (v) {
                        if (u) {
                            this.getFunc(u)[0](o, v)
                        }
                    }.bind(this), onError: function (v) {
                        if (u) {
                            this.getFunc(u)[0](o, v)
                        }
                    }.bind(this)})
                }
            } else {
                if (n.get("console") == "reset") {
                    var s = n.get("notClearProperties");
                    this.reset(s);
                    if ($defined(u)) {
                        this.getFunc(u)[0]()
                    }
                } else {
                    if ($defined(p)) {
                        this.getFunc(p)[0]()
                    }
                    if ($defined(u)) {
                        this.getFunc(u)[0]()
                    }
                }
            }
        }
    }.bind(this));
    new Element("td", {"class": "swordform_btn_right", html: "<i>&nbsp;</i>"}).inject(k)
}, initData: function (f) {
    if (!$chk(f)) {
        return
    }
    var c = this.getFieldEls();
    if (f.sword == "SwordForm") {
        var b = f.data;
        c.each(function (g) {
            if ($chk(f.data[g.get("name")])) {
                if (["true", "select", "calendar"].contains(g.get("widget"))) {
                    this.getWidget(g.get("name")).initData((f.data[g.get("name")].value), g)
                } else {
                    if (g.get("widget") == "tree") {
                        var o = f.data[g.get("name")].value;
                        if ($chk(o)) {
                            if (o.contains("code") && o.contains("caption")) {
                                if (o.contains(";") || o.contains("checkPath")) {
                                    var n = o.split(";");
                                    var l;
                                    var k;
                                    var j;
                                    n.each(function (q, r) {
                                        var s = q.split("|");
                                        if (r == 0) {
                                            l = s[1].split(":")[1] + ",";
                                            k = s[0].split(":")[1] + ",";
                                            j = s[2].split(":")[1] + "|"
                                        } else {
                                            l = l + s[1].split(":")[1] + ",";
                                            k = k + s[0].split(":")[1] + ",";
                                            j = j + s[2].split(":")[1] + "|"
                                        }
                                    });
                                    g.set("value", l.substring(0, l.length - 1));
                                    g.set("realvalue", k.substring(0, k.length - 1));
                                    g.set("checkPath", j.substring(0, j.length - 1))
                                } else {
                                    var p = o.split("|");
                                    if (o.contains("codePath")) {
                                        g.set("codePath", p[2].substring("codePath,".length))
                                    }
                                    g.set("value", p[1].split(",")[1]);
                                    g.set("realvalue", p[0].split(",")[1])
                                }
                            } else {
                                var m = this.getWidget(g.get("name"));
                                var p = o.split(",");
                                m.select.show();
                                m.select.hide();
                                var h = [];
                                p.each(function (q) {
                                    var s = new Hash();
                                    s.set(m.options.cascadeSign.id, q);
                                    var r = m.getTreeNode(s);
                                    if ($chk(r)) {
                                        h.include(r)
                                    }
                                });
                                if (h) {
                                    m.setSelectedNode(h)
                                } else {
                                    m.setSelectValue(f.data[g.get("name")].value)
                                }
                            }
                        }
                    } else {
                        if (!$dateFmt(f.data[g.get("name")].value, g)) {
                            if (g.get("placeholder") == "true") {
                                if ($chk(f.data[g.get("name")].value)) {
                                    g.set("value", f.data[g.get("name")].value);
                                    g.set("text", f.data[g.get("name")].value);
                                    g.removeClass("swordform_item_input_placeholder");
                                    g.set("oValue", g.get("value"))
                                } else {
                                    if (!$chk(g.get("value"))) {
                                        g.set("value", g.get("defvalue"))
                                    }
                                }
                            } else {
                                g.set("value", f.data[g.get("name")].value);
                                g.set("text", f.data[g.get("name")].value);
                                g.set("oValue", g.get("value"))
                            }
                        }
                    }
                }
                this.initFormatVal(g)
            }
        }.bind(this));
        this.fireEvent("onFinish", f)
    } else {
        var a = this.getWidget(f.name.split(".")[1]);
        if ($defined(a)) {
            a.initOptionsData(f.data)
        }
    }
}, getSubmitData: function () {
    var b = {beanname: this.options.beanname, sword: this.options.sword, name: this.options.name, data: {}};
    var a = this.getFieldEls();
    a.each(function (c) {
        if (c.get("widgetGetValue") == "true") {
            b.data[c.get("name")] = {value: this.getWidget(c.get("name")).getValue(c) || ""}
        } else {
            if (c.get("widget") == "select") {
                b.data[c.get("name")] = {value: c.get("realvalue") || ""}
            } else {
                b.data[c.get("name")] = {value: c.get("realvalue") || c.get("value")}
            }
        }
    }, this);
    return b
}, getGridData: function (a) {
    var b = {beanname: this.options.beanname, sword: "SwordGrid", name: a || "", trs: [
        {tds: this.getSubmitData().data}
    ]};
    return b
}, getFormData: function () {
    var a = this.getSubmitData().data;
    var b = new Hash();
    for (var c in a) {
        b.include(c, a[c].value)
    }
    return b
}, validate: function (a) {
    var g = $chk(a) ? [this.getFieldEl(a)] : this.getFieldEls();
    var c = true;
    for (var b = 0; b < g.length; b++) {
        if ($defined(g[b].get("rule"))) {
            if (!this.Vobj.validate(g[b])) {
                c = false
            }
            if ($defined(g[b].get("biztid")) || $defined(g[b].get("bizctrl"))) {
                if (c && !this.bizValidate(g[b])) {
                    c = false
                }
            }
        } else {
            if ($defined(g[b].get("biztid")) || $defined(g[b].get("bizctrl"))) {
                if (!this.bizValidate(g[b])) {
                    c = false
                }
            }
        }
        if (!c) {
            try {
                if (!$chk(a)) {
                    g[b].focus()
                }
                if (g[b].get("readonly") && (Browser.Engine.trident4 || Browser.Engine.trident5)) {
                    $(document.body).scrollTo(0, g[b]._getPosition().y - 20)
                }
            } catch (f) {
            }
            break
        }
    }
    return c
}, getField: function (b) {
    var a = this.getWidget(b);
    if (a && $type(a) != "SwordSelect") {
        return this.getWidget(b)
    }
    return this.getFieldEl(b)
}, getFieldEl: function (a) {
    return this.fieldElHash.get(a)
}, destroyFieldEl: function (a) {
    if (!$defined(a)) {
        this.fieldElHash.empty()
    }
    a = $splat(a);
    a.each(function (b) {
        this.fieldElHash.erase(b)
    }.bind(this))
}, getFieldEls: function () {
    return $$(this.fieldElHash.getValues())
}, getFieldElNames: function () {
    return this.fieldElHash.getKeys()
}, nextFocus: function (j) {
    j = Event(j);
    if (j.key == "enter") {
        var b = null;
        if (this.options.userDefine != "true") {
            var a = j.target.getParent(".swordform_item_div").getAttribute("idx").toInt() + 1;
            var k = null;
            while (b == null) {
                try {
                    k = this.options.pNode.getElements(".swordform_item_div[idx='" + (a) + "']")[0];
                    if (!k) {
                        return
                    }
                    b = k.getElement(".swordform_item_oprate");
                    if (!this.focusable(b)) {
                        b = null
                    }
                    a++
                } catch (j) {
                    break
                }
            }
        } else {
            var f = j.target.get("name");
            var c = this.fieldElOrderHash.keyOf(this.getFieldEl(f)) / 1;
            var g = this.fieldElOrderHash.getKeys().length;
            if (c && c != g) {
                while (c != null && b == null) {
                    b = this.fieldElOrderHash.get(c + 1);
                    if (!this.focusable(b)) {
                        b = null
                    }
                    if (c == g - 1) {
                        c = null
                    } else {
                        c++
                    }
                }
            } else {
                var h = this.getFieldEls();
                var a = this.getFieldElNames().indexOf(f) + 1;
                while (a != h.length && a != null && b == null) {
                    b = h[a];
                    if (!this.focusable(b)) {
                        b = null
                    }
                    if (a == h.length - 1) {
                        a = null
                    } else {
                        a++
                    }
                }
            }
        }
        if ($defined(b)) {
            b.focus();
            b.click()
        } else {
            j.target.blur()
        }
    }
}, isHide: function (a) {
    return a.getHeight() == 0 && a.getWidth() == 0
}, focusable: function (a) {
    return !(this.isHide(a) || a.get("disabled") || a.get("readonly") || a.get("_show") == "false" || ["file", "hidden"].contains(a.get("type")) || !["input", "textarea", "file"].contains(a.get("tag")))
}, toggleBlock: function (a) {
    var b = this.options.pNode.getElements(".swordform_block[name='" + a + "']")[0];
    if ($defined(b)) {
        if (b.getStyle("display") == "none") {
            b.setStyle("display", "")
        } else {
            b.setStyle("display", "none")
        }
    }
}, hideBlock: function (a) {
    var b = this.options.pNode.getElements(".swordform_block[name='" + a + "']")[0];
    if ($defined(b)) {
        b.setStyle("display", "none")
    }
}, showBlock: function (a) {
    var b = this.options.pNode.getElements(".swordform_block[name='" + a + "']")[0];
    if ($defined(b)) {
        b.setStyle("display", "")
    }
}, unDisplayItem: function (a) {
    if ($type(a) == "string") {
        a = [a]
    }
    a = a || [];
    a.each(function (c, b) {
        var f = this.getFieldEl(c);
        if ($defined(f) && (f.get("_show") == "true" || !f.get("_show"))) {
            f.set("_show", "false");
            var g = f.getParent("div.swordform_item_div");
            if (g) {
                if (g.getParent().getChildren().length == 1) {
                    g.getParent().setStyle("display", "none")
                }
                g.setStyle("display", "none");
                this.reSizeRow(g.getParent())
            } else {
                if (f.getParent("table.swordform_field_wrap")) {
                    f.getParent("table.swordform_field_wrap").setStyle("display", "none")
                }
            }
        }
    }.bind(this))
}, displayItem: function (a) {
    if ($type(a) == "string") {
        a = [a]
    }
    a = a || [];
    a.each(function (c, b) {
        var f = this.getFieldEl(c);
        if ($defined(f) && (f.get("_show") == "false" || !f.get("_show"))) {
            f.set("_show", "true");
            f.setStyle("display", "");
            var g = f.getParent("div.swordform_item_div");
            if (g) {
                if (g.getParent().getChildren().length == 1) {
                    g.getParent().setStyle("display", "")
                }
                g.setStyle("display", "");
                this.reSizeRow(g.getParent())
            } else {
                if (f.getParent("table.swordform_field_wrap")) {
                    f.getParent("table.swordform_field_wrap").setStyle("display", "")
                }
            }
        }
    }.bind(this))
}, setValue: function (m, k) {
    var a = this.getFieldEl(m);
    if (!$defined(a)) {
        return
    }
    if (["true", "select", "tree", "calendar"].contains(a.get("widget"))) {
        if (a.get("widget") == "tree") {
            if (k.contains("code") && k.contains("caption")) {
                if (k.contains(";") || k.contains("checkPath")) {
                    var j = k.split(";");
                    var g;
                    var f;
                    var c;
                    j.each(function (n, o) {
                        var p = n.split("|");
                        if (o == 0) {
                            g = p[1].split(":")[1] + ",";
                            f = p[0].split(":")[1] + ",";
                            c = p[2].split(":")[1] + "|"
                        } else {
                            g = g + p[1].split(":")[1] + ",";
                            f = f + p[0].split(":")[1] + ",";
                            c = c + p[2].split(":")[1] + "|"
                        }
                    });
                    a.set("value", g.substring(0, g.length - 1));
                    a.set("realvalue", f.substring(0, f.length - 1));
                    a.set("checkPath", c.substring(0, c.length - 1))
                } else {
                    var l = k.split("|");
                    if (k.contains("codePath")) {
                        a.set("codePath", l[2].substring("codePath,".length))
                    }
                    a.set("value", l[1].split(",")[1]);
                    a.set("realvalue", l[0].split(",")[1])
                }
            } else {
                var h = this.getWidget(a.get("name"));
                var l = k.split(",");
                h.select.show();
                h.select.hide();
                var b = [];
                l.each(function (n) {
                    var p = new Hash();
                    p.set(h.options.cascadeSign.id, n);
                    var o = h.getTreeNode(p);
                    if ($chk(o)) {
                        b.include(o)
                    }
                });
                if (b) {
                    h.setSelectedNode(b)
                } else {
                    h.setSelectValue(d.data[a.get("name")].value)
                }
            }
        } else {
            this.getWidget(m).initData(k, a)
        }
    } else {
        if (a.get("placeholder") == "true") {
            if ($chk(k) && k != a.get("defvalue")) {
                if (a.get("tag") == "label") {
                    a.set({text: k, value: k})
                } else {
                    a.set("value", k)
                }
                a.removeClass("swordform_item_input_placeholder")
            } else {
                a.set("value", a.get("defvalue"))
            }
        } else {
            if (a.get("tag") == "label") {
                a.set({text: k, value: k})
            } else {
                a.set("value", k)
            }
        }
    }
    this.initFormatVal(a)
}, getValue: function (b) {
    var a = this.getField(b);
    if ($type(a) != "element") {
        return a.getValue(this.getFieldEl(b))
    }
    if (a.get("tag").toLowerCase() == "label") {
        return a.get("realvalue") || a.get("text")
    }
    return a.retrieve("allDb") || a.get("realvalue") || a.get("value")
}, getTextValue: function (a) {
    return $(this.options.name + "_" + a).value
}, setTextValue: function (a, b) {
    $(this.options.name + "_" + a).value = b
}, reSizeRow: function (c) {
    if (!$defined(c)) {
        return
    }
    var b = c.getHeight();
    var a = 0;
    c.getElements(".swordform_item_table").each(function (g) {
        var f = g.getSize().y;
        if (a == 0) {
            a = f
        } else {
            a = (a < f) ? f : a
        }
    });
    if (a > b) {
        c.setStyle("height", a)
    }
}, clearField: function (a) {
    var b = this.getFieldEl(a);
    if (!$defined(b)) {
        return
    }
    if (b.get("widget") == "true" || b.get("widget") == "calendar") {
        var c = this.getWidget(a);
        if ($defined(c) && $defined(c.reset)) {
            c.reset()
        } else {
            b.set("value", "");
            if (b.getAttribute("realvalue")) {
                b.set("code", "");
                b.set("realvalue", "");
                b.set("oValue", "")
            }
            if (b.get("oValue")) {
                b.set("oValue", "")
            }
            this.Vobj.clearElTip(b)
        }
    } else {
        if (b.retrieve("allDb")) {
            b.store("allDb", null)
        }
        b.set("value", "");
        if (b.getAttribute("realvalue")) {
            b.set("code", "");
            b.set("realvalue", "");
            b.set("oValue", "")
        }
        this.Vobj.clearElTip(b)
    }
}, reset: function (f, b) {
    f = f || [];
    var a = (b) ? ".swordform_item_oprate[type!='hidden']" : ".swordform_item_oprate";
    var c = this.options.pNode.getElements(a);
    c.each(function (g) {
        if (f.indexOf(g.get("name")) == -1) {
            if (g.get("widget") == "true" || g.get("widget") == "calendar") {
                var j = this.getWidget(g.get("name"));
                if ($defined(j) && $defined(j.reset)) {
                    j.reset()
                } else {
                    g.set("value", "");
                    if (g.getAttribute("realvalue")) {
                        g.set("code", "");
                        g.set("realvalue", "");
                        g.set("oValue", "")
                    }
                    if (g.get("oValue")) {
                        g.set("oValue", "")
                    }
                    this.Vobj.clearElTip(g)
                }
            } else {
                if (g.retrieve("allDb")) {
                    g.store("allDb", null)
                }
                g.set("value", "");
                if (g.getAttribute("realvalue")) {
                    g.set("code", "");
                    g.set("realvalue", "");
                    g.set("oValue", "")
                }
                this.Vobj.clearElTip(g)
            }
        } else {
            var h = g.get("defValue");
            if (h != null) {
                if (g.get("placeholder") == "true") {
                    g.addClass("swordform_item_input_placeholder")
                }
                this.setValue(g.get("name"), h)
            }
            this.Vobj.clearElTip(g)
        }
    }.bind(this))
}, resetAll: function (f, b) {
    f = f || [];
    var a = (b) ? ".swordform_item_oprate[type!='hidden']" : ".swordform_item_oprate";
    var c = this.options.pNode.getElements(a);
    c.each(function (g) {
        if (f.indexOf(g.get("name")) == -1) {
            if (g.get("widget") == "true" || g.get("widget") == "calendar") {
                var j = this.getWidget(g.get("name"));
                if ($defined(j) && $defined(j.reset)) {
                    if (g.getElement("div[defvalue]")) {
                        return
                    }
                    j.reset()
                } else {
                    g.set("value", "");
                    g.set("text", "");
                    if (g.getAttribute("realvalue")) {
                        g.set("code", "");
                        g.set("realvalue", "")
                    }
                    if (g.get("oValue")) {
                        g.set("oValue", "")
                    }
                }
            } else {
                if (g.retrieve("allDb")) {
                    g.store("allDb", null)
                }
                g.set("value", "");
                g.set("text", "");
                g.set("oValue", "");
                if (g.getAttribute("realvalue")) {
                    g.set("code", "");
                    g.set("realvalue", "")
                }
            }
            var h = g.get("defValue");
            if (h != null) {
                if (g.get("placeholder") == "true") {
                    g.addClass("swordform_item_input_placeholder")
                }
                this.setValue(g.get("name"), h)
            }
        }
    }.bind(this))
}, getSubmitData4Grid: function () {
    var b = {beanname: this.options.beanname, sword: this.options.sword, name: this.options.name, data: {}};
    var a = this.getFieldEls();
    a.each(function (c) {
        if (c.get("widgetGetValue") == "true") {
            b.data[c.get("name")] = {value: this.getWidget(c.get("name")).getValue(c)}
        } else {
            b.data[c.get("name")] = {value: c.get("value")}
        }
    }, this);
    return b
}, addFormatEvent: function (a) {
    if (!$defined(a)) {
        return
    }
    if (a.get("tag") == "label" || (a.get("tag") == "input" && a.get("type") == "text")) {
    } else {
        return
    }
    if (!a.get("format") && !a.get("submitformat") && !a.get("tipTitle")) {
        return
    }
    this.initFormatVal(a);
    if (a.get("tag") == "label") {
        return
    }
    a.addEvents({focus: function () {
        if (a.get("tag") == "label") {
            a.set("text", a.get("oValue"))
        } else {
            a.set("value", a.get("oValue"))
        }
    }.bind(this), blur: function () {
        if (a.get("tipTitle")) {
            this.tooltips.hide(a.get("name"))
        }
        this.initFormatVal(a);
        this.validate(a.get("name"))
    }.bind(this)})
}, initFormatVal: function (a) {
    if (!a.get("format") && !a.get("submitformat")) {
        return
    } else {
        a.set("oValue", (a.get("tag") == "label") ? a.get("text") : a.get("value"));
        a.set("realvalue", this.getFormatVal(a, "submitformat"));
        a.set(((a.get("tag") == "label") ? "text" : "value"), this.getFormatVal(a))
    }
}, getFormatVal: function (a, b) {
    var c = a.get(b);
    if (!$defined(b)) {
        c = a.get("format")
    }
    if (!$defined(c)) {
        return a.get("oValue")
    }
    return sword_fmt.formatText(a, (a.get("tag") == "label") ? a.get("text") : a.get("value"), "", c).value
}, cancelVal: function () {
    this.Vobj.cancelV()
}, activeVal: function () {
    this.Vobj.activeV()
}, deleteSelectOptions: function (c) {
    var b = this.getFieldEl(c);
    if ($chk(b.get("dataname"))) {
        pc.deleteDataByDataName(b.get("dataname"))
    }
    if ($chk(b.get("name"))) {
        pc.deleteDataByWidgetName(b.get("name"))
    }
    var a = this.getWidget(c).CacheData;
    if (a && a.has(c)) {
        a.erase(c)
    }
}, disable: function (a) {
    if ($type(a) == "string") {
        a = [a]
    }
    a = a || [];
    if (a.length == 0) {
        a = this.getFieldElNames()
    }
    a.each(function (f, c) {
        var b = this.getWidget(f);
        if ($defined(b)) {
            if ($defined(b.disable)) {
                b.disable(this.getFieldEl(f))
            }
            if ($type(b) == "SwordTree" && $defined(b.select.disable)) {
                b.select.disable(this.getFieldEl(f))
            }
            if ($chk(b.box) && b.box.type == "textarea") {
                b.box.set("disabled", "true").addClass("swordform_item_input_disable").setStyle("background-color", "")
            }
        } else {
            this.getFieldEl(f).set("disabled", "true").addClass("swordform_item_input_disable").setStyle("background-color", "")
        }
    }.bind(this))
}, enable: function (a) {
    if ($type(a) == "string") {
        a = [a]
    }
    a = a || [];
    if (a.length == 0) {
        a = this.getFieldElNames()
    }
    a.each(function (f, c) {
        var b = this.getWidget(f);
        if ($defined(b)) {
            if ($defined(b.enable)) {
                b.enable(this.getFieldEl(f))
            }
            if ($type(b) == "SwordTree" && $defined(b.select.enable)) {
                b.select.enable(this.getFieldEl(f))
            }
            if ($chk(b.box) && b.box.type == "textarea") {
                b.box.erase("disabled").removeClass("swordform_item_input_disable");
                if ($defined(b.box.get("rule")) && b.box.get("rule").contains("must")) {
                    b.box.setStyle("background-color", "#b5e3df")
                }
            }
        } else {
            var g = this.getFieldEl(f);
            g.erase("disabled").removeClass("swordform_item_input_disable");
            if (!g.get("bizrule") && $defined(g.get("rule")) && g.get("rule").contains("must")) {
                g.setStyle("background-color", "#b5e3df")
            }
        }
    }.bind(this))
}, cellTip: function (a, b) {
}, showTip: function (b, a) {
    if ($chk(a.get("tipTitle"))) {
        this.tooltips.show(b, a, {flag: "top", className: "warning", autoHidden: false})
    }
}});
var fileUpload = new Class({Implements: [Events, Options], name: "fileUpload", options: {pNode: null, name: null, rule: null, css: null, isMulti: "true", maxSize: 0, size: null, keepfile: "false"}, initialize: function (a) {
    this.htmlOptions(a)
}, uploadButton: null, uploadContent: null, uploadTempContent: null, uploadLoading: null, selectFile: null, uploadForm: null, iframeKey: "FileUploadCommitIframe", wrap: null, innerWrap: null, parent: null, box: null, initParam: function (b, a) {
    this.parent = a;
    this.wrap = new Element("div", {name: this.options.name, "class": "uploadGroup formselect-list swordform_item_oprate", widgetGetValue: "true", rule: this.options.rule, widget: true, keepfile: this.options.keepfile, styles: {"float": "left"}}).inject(this.options.pNode);
    this.wrap.store("parent", a);
    this.innerWrap = new Element("div", {"class": "formselect-list-inner"}).inject(this.wrap);
    this.parseFileRow("init");
    sword_convertHTML(this.box, b);
    if (b.get("size")) {
        this.options.size = b.get("size");
        this.box.set("size", this.options.size)
    }
    return this
}, reset: function () {
    this.innerWrap.getElements("input[type='file']").each(function (a) {
        a.set("value", "")
    })
}, disable: function (a) {
    a.getElements("input").set("disabled", true)
}, enable: function (a) {
    a.getElements("input").set("disabled", false)
}, resetElStatus: function (a) {
    this.wrap = a.store("parent", this.parent);
    this.innerWrap = this.wrap.getFirst();
    this.innerWrap.getElements("input[type='button']").each(function (b) {
        if (b.get("value") == "增加") {
            this.box = b.addEvent("click", function () {
                this.parseFileRow("add");
                this.parent.reSizeRow(this.options.pNode.getParents("div.swordform_row_div")[0])
            }.bind(this))
        } else {
            if (b.get("value") == "取消") {
                b.addEvent("click", function (c) {
                    new Event(c).target.getParent("div").destroy();
                    this.parent.reSizeRow(this.options.pNode.getParents("div.swordform_row_div")[0])
                }.bind(this))
            }
        }
    }.bind(this))
}, getValue: function () {
    var a = "";
    this.wrap.getElements("input[type='file']").each(function (b) {
        a = ((a == "") ? a : (a + ",")) + b.get("value")
    });
    return a
}, parseFileRow: function (c) {
    var g = new Element("div", {"class": "formselect-list-item"}).inject(this.innerWrap);
    var a = new Element("input", {type: "file", name: this.options.name, rule: this.options.rule}).inject(g);
    this.box = a;
    if (this.options.size != null) {
        this.box.set("size", this.options.size)
    }
    var f = new Element("span", {"class": "fileuploadloaded"}).inject(g);
    if (c == "init" && this.options.isMulti == "true") {
        var b = new Element("input", {type: "button", value: "增加", events: {click: function () {
            if (this.options.maxSize > 0 && this.innerWrap.getChildren().length >= this.options.maxSize) {
                alert("您最多只能上传" + this.options.maxSize + "个文件。");
                return
            }
            this.parseFileRow("add");
            this.parent.reSizeRow(this.options.pNode.getParents("div.swordform_row_div")[0])
        }.bind(this)}}).inject(g)
    } else {
        if (c == "add") {
            var b = new Element("input", {type: "button", value: "取消", events: {click: function (h) {
                new Event(h).target.getParent("div").destroy();
                this.parent.reSizeRow(this.options.pNode.getParents("div.swordform_row_div")[0])
            }.bind(this)}}).inject(g)
        }
    }
}, initData: function () {
}, loading: function () {
    var c = this.selectFile.getPosition();
    if (this.uploadContent.getStyle("display") == "none") {
        this.uploadContent.setStyles({display: "", height: "35px"});
        this.uploadLoading.setStyles({display: "", left: c.x + 10, top: c.y + this.selectFile.getHeight(), width: "300px", height: "35px"})
    } else {
        var f = this.uploadContent.getPosition();
        var a = this.uploadContent.getWidth();
        var b = this.uploadContent.getHeight();
        this.uploadLoading.setStyles({display: "", left: f.x, top: f.y, width: a + 5, height: b + 35})
    }
}, endLoding: function () {
    this.uploadLoading.setStyle("display", "none")
}, setupSize: function (a) {
    var b = new Array("B", " KB", " MB", " GB", " TB", " PB", " EB", " ZB", " YB");
    var c = 0;
    while (a >= 1024) {
        a = a / 1024;
        c++
    }
    if (c > 0) {
        return a.toFixed(2) + b[c]
    } else {
        return a + b[c]
    }
}});
var FormBlockArea = new Class({Implements: [Events, Options], name: "formblock", options: {pNode: null, caption: null, isHide: null, name: null, isShow: null}, initialize: function (a) {
    this.setOptions(a)
}, legendFx: null, fieldset: null, legend: null, initParam: function () {
    var c = new Element("div", {"class": "swordform_block", name: this.options.name}).inject(this.options.pNode);
    var a = new Element("div", {"class": "swordform_block_top"}).inject(c);
    a.set("html", "<div class='l'></div><div class='r'></div>");
    var f = new Element("div", {"class": "swordform_block_center"}).inject(c);
    var b = new Element("div", {"class": "ll"}).inject(f);
    var h = new Element("div", {"class": "rr"}).inject(b);
    var g = new Element("div", {"class": "swordform_block_bottom"}).inject(c);
    g.set("html", "<div class='l'></div><div class='r'></div>");
    if (this.options.isShow == "false") {
        c.setStyle("display", "none")
    }
    return h
}});
var SwordPanel = new Class({Implements: [Events, Options], name: "SwordPanel", options: {pNode: null, caption: null}, tc: null, initialize: function (a) {
    this.setOptions(a)
}, initParam: function () {
    var a = new Element("div", {"class": "swordform-panel-box"}).inject(this.options.pNode);
    var b = new Element("div", {"class": "swordform-panel-tl"}).inject(a);
    var c = new Element("div", {"class": "swordform-panel-tr"}).inject(a);
    this.tc = new Element("div", {"class": "swordform-panel-title"}).appendText(this.options.caption || "").inject(a);
    return this
}, updateTitle: function (a) {
    this.tc.set("text", a)
}});
var Textarea = new Class({Implements: [Events, Options], name: "textarea", options: {css: null, scroll: false, pNode: null, name: null, rule: null, bizValidate: "false", biztid: null, bizctrl: null, msg: null, defValue: null, edit: null, maxLength: null}, defWidth: 500, defHeight: 120, box: null, countSpan: null, parent: null, initialize: function (a) {
    this.htmlOptions(a)
}, initParam: function (a) {
    this.parent = a;
    this.box = new Element("textarea", {"class": "swordform_item_oprate swordform_item_textarea", name: this.options.name, rule: this.options.rule, bizValidate: this.options.bizValidate, biztid: this.options.biztid, bizctrl: this.options.bizctrl, msg: this.options.msg, widget: "true"}).inject(this.options.pNode);
    if ((this.options.rule || "").indexOf("must") > -1 && a.options.requiredSign == "field") {
        new Element("span", {styles: {color: "red", "float": "left"}, html: "*"}).inject(this.options.pNode)
    }
    if (this.options.edit == "false") {
        this.box.set("readonly", true)
    }
    if (a.isVal() && $defined(this.options.rule)) {
        Sword.utils.createElAfter(this.options.pNode)
    }
    if ($defined(this.options.maxLength)) {
        var b = new Element("div", {html: "您还可以输入<span class='textarea_maxLength_count'>" + this.options.maxLength + "</span>字", "class": "textarea_maxLength_wrap"}).inject(this.options.pNode);
        this.countSpan = b.getElement("span.textarea_maxLength_count");
        this.box.addEvent("blur", this.maxLengthCount.bind(this));
        this.box.addEvent("change", this.maxLengthCount.bind(this));
        this.box.addEvent("keyup", this.maxLengthCount.bind(this))
    }
    if ($defined(this.options.defValue)) {
        this.initData(this.options.defValue)
    }
    return this.box
}, maxLengthCount: function (e) {
    if (this.getStringUTFLength(this.getValue()) > this.options.maxLength / 1) {
        if (e) {
            try {
                with (window.event || e) {
                    cancelBubble = true;
                    keyCode = 0;
                    returnValue = false
                }
            } catch (ex) {
            }
        }
        this.box.set("value", this.leftUTFString(this.getValue(), this.options.maxLength / 1))
    }
    var len = this.options.maxLength / 1 - this.getStringUTFLength(this.getValue());
    this.countSpan.set("text", (len >= 0) ? len : 0);
    if (len == 0) {
        this.countSpan.getParent().setStyle("color", "red")
    } else {
        this.countSpan.getParent().setStyle("color", "#333")
    }
}, leftUTFString: function (c, a) {
    if (this.getStringUTFLength(c) <= a) {
        return c
    }
    var b = c.substring(0, a);
    while (this.getStringUTFLength(b) > a) {
        b = b.substring(0, b.length - 1)
    }
    return b
}, getStringUTFLength: function (b) {
    var a = b.replace(/[\u4e00-\u9fa5]/g, "  ");
    return a.length
}, initData: function (a) {
    if (!$defined(a)) {
        a = ""
    }
    a = a.replace(/&apos;/g, "'");
    this.box.set("value", a);
    if ($defined(this.options.maxLength)) {
        this.maxLengthCount()
    }
    return this.box
}, getValue: function () {
    return this.box.get("value")
}, reset: function () {
    this.initData("");
    this.parent.Vobj.clearElTip(this.box)
}, focus: function () {
    this.box.focus()
}});
var SwordGroupFields = new Class({Implements: [Events, Options], name: "groupfields", options: {tag: null, pNode: null, data: null, dataname: null, validate: null, name: null, rule: null, type: null, colWidth: null, col: 1, onClickBefore: null, onClickAfter: null, sbmitcontent: null, msg: null, defValue: null, disable: "false"}, initialize: function (a) {
    this.htmlOptions(a)
}, wrap: null, innerWrap: null, parent: null, initParam: function (b, a) {
    this.parent = a;
    this.options.validate = a.Vobj;
    this.options.tag = b.get("type");
    this.options.opts = b.getChildren(">div");
    this.wrap = new Element("div", {name: this.options.name, "class": "formselect-list swordform_item_oprate", rule: this.options.rule, widget: "true", msg: this.options.msg, widgetGetValue: "true", ruleType: this.options.type + "Group"}).inject(this.options.pNode);
    this.innerWrap = new Element("div", {defValue: this.options.defValue, "class": "formselect-list-inner"}).inject(this.wrap);
    if ((this.options.rule || "").indexOf("must") > -1 && a.options.requiredSign == "field") {
        new Element("span", {styles: {color: "red", "float": "left"}, html: "*"}).inject(this.options.pNode)
    }
    if (this.options.opts.length > 0) {
        this.initOptionsData(this.options.opts)
    }
    if (a.isVal() && $defined(this.options.rule)) {
        Sword.utils.createElAfter(this.options.pNode)
    }
    if (this.options.disable == "true") {
        this.disable()
    }
    return this
}, initalizeData: null, initalized: false, initData: function (b) {
    if ((Browser.Engine.trident4 || Browser.Engine.trident5) && arguments.length == 1) {
        this.parent.lazyInitData.set(this.options.name, b);
        return
    }
    var a = this.innerWrap.get("defValue");
    if (b == "" && $defined(a)) {
        b = a
    }
    if (b.indexOf(",") == -1) {
        b = b + ",1"
    }
    b = b.toHash();
    if ($type(b) == "hash") {
        this.initalizeData = b;
        this.reset();
        b.each(function (f, c) {
            if (f / 1 == 1) {
                var g = this.innerWrap.getElement("input[value='" + c + "']");
                if (g) {
                    g.set("checked", true);
                    g.getParent().addClass("formselect-selected")
                }
            }
        }, this)
    }
    this.parent.lazyInitData.erase(this.options.name);
    this.initalizeData = null
}, initOptionsData: function (a) {
    this.clearOptions();
    a.each(function (h, b) {
        var j = new Element("div", {"class": "formselect-list-item"}).inject(this.innerWrap);
        if ($defined(this.options.colWidth)) {
            j.setStyles({width: this.options.colWidth})
        }
        var g, f;
        if ($type(h) == "element") {
            g = h.get("code");
            f = h.get("caption")
        } else {
            g = h.code;
            f = h.caption
        }
        j.set({code: g, caption: f});
        if (this.options.tag != "multiselect") {
            var c = new Element("input", {type: this.options.type, rule: this.options.rule, ruleType: this.options.type + "Group", name: this.options.name}).inject(j);
            c.setStyle("cursor", "pointer");
            j.addEvent("click", function (l) {
                if (this.options.disable == "true") {
                    return
                }
                var k = new Event(l).target;
                if (this.options.rule) {
                    this.options.validate.tooltips.hide(this.options.name);
                    this.options.validate.intimeValidate(k)
                }
                if (["div", "span"].contains(k.get("tag"))) {
                    return
                }
                if ($defined(this.options.onClickBefore)) {
                    this.getFunc(this.options.onClickBefore)[0](g, f, k)
                }
                if (c.get("type") == "checkbox") {
                    if (c.get("checked")) {
                        if (k != c) {
                            if (!$chk(c.get("disabled"))) {
                                c.set("checked", false)
                            }
                            c.getParent().removeClass("formselect-selected")
                        } else {
                            c.getParent().addClass("formselect-selected")
                        }
                    } else {
                        if (k != c) {
                            if (!$chk(c.get("disabled"))) {
                                c.set("checked", true)
                            }
                            c.getParent().addClass("formselect-selected")
                        } else {
                            c.getParent().removeClass("formselect-selected")
                        }
                    }
                } else {
                    if (!$chk(c.get("disabled"))) {
                        this.reset();
                        c.getParent().addClass("formselect-selected");
                        c.set("checked", true)
                    }
                }
                if ($defined(this.options.onClickAfter)) {
                    this.getFunc(this.options.onClickAfter)[0](g, f, k)
                }
            }.bind(this));
            if (this.options.rule) {
                this.options.validate._add(c)
            }
            c.set("value", g)
        } else {
            j.addEvent("click", function () {
                if (this.options.disable == "true") {
                    return
                }
                if ($defined(this.options.onClickBefore)) {
                    this.getFunc(this.options.onClickBefore)[0](g, f)
                }
                j.getParent().getElements("div").each(function (k) {
                    k.removeClass("formselect-selected")
                }, this);
                j.addClass("formselect-selected");
                if ($defined(this.options.onClickAfter)) {
                    this.getFunc(this.options.onClickAfter)[0](g, f)
                }
            }.bind(this))
        }
        new Element("span", {text: f, title: f}).inject(j);
        this.parent.reSizeRow(this.options.pNode.getParents("div.swordform_row_div")[0])
    }, this);
    if (this.initalizeData != null) {
        this.initData(this.initalizeData, "ie6")
    }
    if (this.options.defValue != null) {
        this.initData(this.options.defValue)
    }
    return this
}, validate: function () {
}, getValue: function (c) {
    var a = "", b;
    this.wrap.getElements("div.formselect-list-item").filter(function (f) {
        b = f.getElements("input")[0];
        if (c == false) {
            return($defined(b)) ? b.get("checked") != true : !f.hasClass("formselect-selected")
        }
        return($defined(b)) ? b.get("checked") == true : f.hasClass("formselect-selected")
    }).each(function (f) {
        if (a == "") {
            a += this.genarateContent({code: f.get("code"), caption: f.get("caption")})
        } else {
            a += "," + this.genarateContent({code: f.get("code"), caption: f.get("caption")})
        }
    }.bind(this));
    return a
}, getAllValue: function (c) {
    var a = [], b;
    this.wrap.getElements("div.formselect-list-item").filter(function (f) {
        b = f.getElements("input")[0];
        if (c == false) {
            return($defined(b)) ? b.get("checked") != true : !f.hasClass("formselect-selected")
        }
        return($defined(b)) ? b.get("checked") == true : f.hasClass("formselect-selected")
    }).each(function (f) {
        a.include({code: f.get("code"), caption: f.get("caption")})
    }.bind(this));
    return a
}, genarateContent: function (b) {
    var a = this.options.sbmitcontent;
    if (!$defined(a)) {
        a = "{code}"
    }
    return a.substitute(b)
}, reset: function () {
    this.wrap.getElements("div.formselect-list-item").each(function (a) {
        if (a.getElement("input")) {
            a.getElement("input").set("checked", false)
        }
        a.removeClass("formselect-selected")
    })
}, getChildrenEl: function () {
    return this.innerWrap.getElements("input[name=" + this.options.name + "][type=" + this.options.type + "]")
}, disable: function () {
    this.options.disable = "true";
    this.getChildrenEl().set("disabled", true)
}, enable: function () {
    this.options.disable = "false";
    this.getChildrenEl().set("disabled", false)
}, clearOptions: function () {
    this.innerWrap.getElements("*").each(function (a) {
        a.destroy()
    })
}});
var frameLayer1 = {oldOptions: {north: {styles: {position: "absolute", left: 0, top: 0, width: 1400, height: 52, zIndex: 0}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "false", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}, west: {styles: {position: "absolute", left: 0, top: 57, width: 300, height: 645}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "true", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}, westDragDiv: {styles: {position: "absolute", left: 300, top: 57, width: 5, height: 645}, el: null}, center: {styles: {position: "absolute", left: 305, top: 57, width: 890, height: 645}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "true", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}, eastDragDiv: {styles: {position: "absolute", left: 1195, top: 57, width: 5, height: 645}, el: null}, east: {styles: {position: "absolute", left: 1200, top: 57, width: 200, height: 645}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "true", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}, southDragDiv: {styles: {position: "absolute", left: 0, top: 702, width: 1400, height: 5}, el: null}, south: {styles: {position: "absolute", left: 0, top: 707, width: 1400, height: 150}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "true", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}}, newOptions: {north: {styles: {position: "absolute", left: 0, top: 0, width: 1400, height: 52}}, west: {styles: {position: "absolute", left: 0, top: 57, width: 300, height: 645}}, westDragDiv: {styles: {position: "absolute", left: 300, top: 57, width: 5, height: 645}}, center: {styles: {position: "absolute", left: 305, top: 57, width: 890, height: 645}}, eastDragDiv: {styles: {position: "absolute", left: 1195, top: 57, width: 5, height: 645}}, east: {styles: {position: "absolute", left: 1200, top: 57, width: 200, height: 645}}, southDragDiv: {styles: {position: "absolute", left: 0, top: 702, width: 1400, height: 5}}, south: {styles: {position: "absolute", left: 0, top: 707, width: 1400, height: 150}}}};
var frameLayer2 = {oldOptions: {north: {styles: {position: "absolute", left: 0, top: 0, width: 1400, height: 62, zIndex: 0}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "false", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}, west: {styles: {position: "absolute", left: 0, top: 96, width: 300, height: 760}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "true", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}, westDragDiv: {styles: {position: "absolute", left: 300, top: 96, width: 5, height: 760}, el: null}, center: {styles: {position: "absolute", left: 305, top: 96, width: 1095, height: 760}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "true", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}}, newOptions: {north: {styles: {position: "absolute", left: 0, top: 0, width: 1400, height: 62}}, west: {styles: {position: "absolute", left: 0, top: 96, width: 300, height: 760}}, westDragDiv: {styles: {position: "absolute", left: 300, top: 96, width: 5, height: 760}}, center: {styles: {position: "absolute", left: 305, top: 96, width: 1095, height: 760}}}};
var frameLayer3 = {oldOptions: {west: {styles: {position: "absolute", left: 0, top: 0, width: 300, height: 857}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "true", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}, westDragDiv: {styles: {position: "absolute", left: 300, top: 0, width: 5, height: 857}, el: null}, center: {styles: {position: "absolute", left: 305, top: 0, width: 1095, height: 857}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "true", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}}, newOptions: {west: {styles: {position: "absolute", left: 0, top: 0, width: 300, height: 857}}, westDragDiv: {styles: {position: "absolute", left: 300, top: 0, width: 5, height: 857}}, center: {styles: {position: "absolute", left: 305, top: 0, width: 1095, height: 857}}}};
var frameLayer4 = {oldOptions: {north: {styles: {position: "absolute", left: 0, top: 0, width: 1400, height: 112, zIndex: 0}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "false", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}, west: {styles: {position: "absolute", left: 0, top: 97, width: 250, height: 725}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "true", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}, westDragDiv: {styles: {position: "absolute", left: 250, top: 97, width: 5, height: 725}, el: null}, center: {styles: {position: "absolute", left: 255, top: 97, width: 1145, height: 725}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "true", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}, south: {styles: {position: "absolute", left: 0, top: 827, width: 1400, height: 30}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "true", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}}, newOptions: {north: {styles: {position: "absolute", left: 0, top: 0, width: 1400, height: 92}}, west: {styles: {position: "absolute", left: 0, top: 97, width: 300, height: 725}}, westDragDiv: {styles: {position: "absolute", left: 300, top: 97, width: 5, height: 725}}, center: {styles: {position: "absolute", left: 305, top: 97, width: 1095, height: 725}}, south: {styles: {position: "absolute", left: 0, top: 827, width: 1400, height: 30}}}};
var frameLayer5 = {oldOptions: {north: {styles: {position: "absolute", left: 0, top: 0, width: 1400, height: 120, zIndex: 0}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "false", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}, center: {styles: {position: "absolute", left: 0, top: 125, width: 1195, height: 697}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "true", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}, eastDragDiv: {styles: {position: "absolute", left: 1195, top: 125, width: 5, height: 697}, el: null}, east: {styles: {position: "absolute", left: 1200, top: 125, width: 200, height: 697}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "true", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}, southDragDiv: {styles: {position: "absolute", left: 0, top: 822, width: 1400, height: 5}, el: null}, south: {styles: {position: "absolute", left: 0, top: 827, width: 1400, height: 30}, el: null, elSwordWidgetHash: new Hash(), scrollDiv: null, scrollDivBtn: null, scrollBtn: null, isScroll: "true", isFix: "false", fixLength: 0, elTween: null, scrollDivTween: null, scrollRegionAboveFlag: false}}, newOptions: {north: {styles: {position: "absolute", left: 0, top: 0, width: 1400, height: 80}}, center: {styles: {position: "absolute", left: 0, top: 85, width: 1195, height: 697}}, eastDragDiv: {styles: {position: "absolute", left: 1195, top: 85, width: 5, height: 697}}, east: {styles: {position: "absolute", left: 1200, top: 85, width: 200, height: 697}}, southDragDiv: {styles: {position: "absolute", left: 0, top: 822, width: 1400, height: 5}}, south: {styles: {position: "absolute", left: 0, top: 827, width: 1400, height: 30}}}};
var SwordFrame = new Class({Implements: [Options, Events], Extends: PageContainer, options: {pNode: null, name: "SwordFrame", panelScrollSize: 22, dragDivSize: 5, el: null, width: 1400, height: 857, layout: null}, dimensionOptions: frameLayer1, widthRate: 1, heightRate: 1, cloneDiv: null, initialize: function (a) {
    this.setOptions(a)
}, initParam: function (node) {
    this.htmlOptions(node);
    this.options.pNode = $(document.body).setStyles({overflow: "hidden", height: "100%", width: "100%"});
    $(document.body).set("scroll", "no");
    if ($defined(this.options.layout)) {
        this.dimensionOptions = eval(this.options.layout)
    }
    this.parseNode(node);
    this.refresh();
    this.addRegionEvent()
}, initData: function () {
}, parseNode: function (a) {
    this.options.el = a;
    a.getChildren("div").each(function (b) {
        var c = b.get("region");
        if ($defined(c)) {
            this.buildRegion(b, c);
            if (c != "center") {
                this.buildScrollBtn(b, c);
                this.buildScrollDiv(b, c);
                this.buildDragDiv(b, c)
            }
        }
    }.bind(this))
}, prepareRegionOptions: function (b, c) {
    for (var a in this.dimensionOptions.oldOptions[c].styles) {
        if ($defined(b.get(a)) && a != "position") {
            this.dimensionOptions.oldOptions[c].styles[a] = b.get(a);
            this.dimensionOptions.newOptions[c].styles[a] = b.get(a)
        }
        if ($defined(b.get("isFix")) && b.get("isFix") == "true" && $defined(b.get("fixLength"))) {
            this.dimensionOptions.oldOptions[c]["isFix"] = "true";
            this.dimensionOptions.oldOptions[c]["fixLength"] = b.get("fixLength")
        }
    }
}, buildRegion: function (a, b) {
    this.prepareRegionOptions(a, b);
    this.buildElSwordWidgetHash(a, b);
    a.setStyles({position: this.dimensionOptions.oldOptions[b].styles.position, left: this.dimensionOptions.oldOptions[b].styles.left, top: this.dimensionOptions.oldOptions[b].styles.top, width: this.dimensionOptions.oldOptions[b].styles.width, height: this.dimensionOptions.oldOptions[b].styles.height, "z-index": this.dimensionOptions.oldOptions[b].styles.zIndex});
    this.dimensionOptions.oldOptions[b].el = a;
    this.dimensionOptions.oldOptions[b].elTween = new Fx.Tween(this.dimensionOptions.oldOptions[b].el, {duration: 200, transition: Fx.Transitions.linear})
}, buildElSwordWidgetHash: function (a, b) {
    a.getChildren("div[swordType=SwordFramePanel]").each(function (c) {
        var f = pageContainer.create("SwordFramePanel");
        f.initParam(c);
        this.dimensionOptions.oldOptions[b].elSwordWidgetHash.set(c.get("id"), f)
    }.bind(this));
    a.getChildren("div[swordType=SwordFrameTab]").each(function (f) {
        var c = pageContainer.create("SwordFrameTab");
        c.initParam(f);
        this.dimensionOptions.oldOptions[b].elSwordWidgetHash.set(f.get("id"), c)
    }.bind(this))
}, buildScrollBtn: function (a, b) {
    if (this.dimensionOptions.oldOptions[b].isScroll == "true") {
        this.dimensionOptions.oldOptions[b].scrollBtn = new Element("div", {"class": "x-tool x-tool-collapse-" + b, styles: {position: "absolute", "z-index": 1}}).inject(a);
        this.refreshScrollBtn(b);
        this.dimensionOptions.oldOptions[b].scrollBtn.addEvent("click", function (c) {
            this.scrollRegionOutDiv(b)
        }.bind(this))
    }
}, buildScrollDiv: function (a, b) {
    this.dimensionOptions.oldOptions[b].scrollDiv = new Element("div", {"class": "x-layout-collapsed x-layout-collapsed-" + b, styles: {position: "absolute", "z-index": 1, visibility: "visible", display: "block"}}).inject(a.getParent());
    this.refreshScrollDiv(b);
    this.dimensionOptions.oldOptions[b].scrollDivTween = new Fx.Tween(this.dimensionOptions.oldOptions[b].scrollDiv, {duration: 500, transition: Fx.Transitions.linear});
    this.dimensionOptions.oldOptions[b].scrollDiv.addEvent("click", function (c) {
        if (!this.dimensionOptions.oldOptions[b].scrollRegionAboveFlag) {
            this.scrollRegionInAboveDiv(b)
        } else {
            this.scrollRegionOutAboveDiv(b)
        }
    }.bind(this));
    this.dimensionOptions.oldOptions[b].scrollDivBtn = new Element("div", {"class": "x-tool x-tool-expand-" + b}).inject(this.dimensionOptions.oldOptions[b].scrollDiv);
    this.dimensionOptions.oldOptions[b].scrollDivBtn.addEvent("click", function (c) {
        this.scrollRegionInDiv(b);
        c.stopPropagation()
    }.bind(this))
}, buildDragDiv: function (a, b) {
    if ($defined(this.dimensionOptions.oldOptions[b + "DragDiv"])) {
        this.dimensionOptions.oldOptions[b + "DragDiv"].el = new Element("div", {"class": "x-layout-split", styles: {position: this.dimensionOptions.oldOptions[b + "DragDiv"].styles.position, width: this.dimensionOptions.oldOptions[b + "DragDiv"].styles.width, height: this.dimensionOptions.oldOptions[b + "DragDiv"].styles.height, top: this.dimensionOptions.oldOptions[b + "DragDiv"].styles.top, left: this.dimensionOptions.oldOptions[b + "DragDiv"].styles.left, "z-index": 10002}, events: {mousedown: function (c) {
            if (!new Event(c).rightClick) {
                this.cloneDiv = new Element("div", {id: "yuantongaaaaaa", styles: {position: "absolute", width: document.body.getScrollSize().x, height: document.body.getScrollSize().y, top: 0, left: 0, background: "white", "z-index": 5555, filter: "Alpha(opacity=0)", opacity: 0.5}}).inject(document.body);
                this.cloneDiv.addEvent("mouseup", function () {
                    this.dimensionOptions.oldOptions[b + "DragDiv"].el.fireEvent("mouseup", this)
                }.bind(this))
            }
        }.bind(this), mouseup: function () {
            if ($defined(this.cloneDiv)) {
                this.cloneDiv.destroy()
            }
        }.bind(this)}}).inject(this.options.el);
        new Drag(this.dimensionOptions.oldOptions[b + "DragDiv"].el, {handle: this.dimensionOptions.oldOptions[b + "DragDiv"].el, onStart: function () {
        }.bind(this), onDrag: function () {
            this.dimensionOptions.oldOptions[b + "DragDiv"].el.setStyle("background-color", "gray");
            this.onJudgeDragDiv(b)
        }.bind(this), onComplete: function () {
            this.dimensionOptions.oldOptions[b + "DragDiv"].el.setStyle("background-color", "");
            this.completeDragDiv(b);
            var f = document.getElementById("yuantongaaaaaa");
            if (f != null) {
                f.parentNode.removeChild(f)
            }
            var c = this.cloneDiv.getParent();
            if ($defined(c)) {
                if ($defined(c.get("tag"))) {
                    this.cloneDiv.destroy();
                    this.cloneDiv = null
                }
            }
        }.bind(this)});
        if (b == "north" || b == "south") {
            this.dimensionOptions.oldOptions[b + "DragDiv"].el.addClass("x-splitbar-v")
        } else {
            if (b == "west" || b == "east") {
                this.dimensionOptions.oldOptions[b + "DragDiv"].el.addClass("x-splitbar-h")
            }
        }
    }
}, onJudgeDragDiv: function (a) {
    switch (a) {
        case"west":
            this.dimensionOptions.oldOptions[a + "DragDiv"].el.setStyles({top: this.dimensionOptions.oldOptions[a].el.getStyle("top").toFloat()});
            break;
        case"east":
            this.dimensionOptions.oldOptions[a + "DragDiv"].el.setStyles({top: this.dimensionOptions.oldOptions[a].el.getStyle("top").toFloat()});
            break;
        case"north":
            this.dimensionOptions.oldOptions[a + "DragDiv"].el.setStyles({left: this.dimensionOptions.oldOptions[a].el.getStyle("left").toFloat()});
            break;
        case"south":
            this.dimensionOptions.oldOptions[a + "DragDiv"].el.setStyles({left: this.dimensionOptions.oldOptions[a].el.getStyle("left").toFloat()});
            break;
        default:
            break
    }
}, completeDragDiv: function (f) {
    switch (f) {
        case"west":
            var c = this.dimensionOptions.newOptions[f + "DragDiv"].styles.left - this.dimensionOptions.oldOptions[f + "DragDiv"].el.getStyle("left").toFloat();
            this.dimensionOptions.newOptions[f + "DragDiv"].styles.left = this.dimensionOptions.oldOptions[f + "DragDiv"].el.getStyle("left").toFloat();
            var a = this.dimensionOptions.newOptions.west.styles.width;
            this.dimensionOptions.newOptions.west.styles.width = a - c < 0 ? 0 : a - c;
            this.dimensionOptions.oldOptions.west.el.setStyle("width", this.dimensionOptions.newOptions.west.styles.width);
            this.refreshScrollBtn("west");
            this.dimensionOptions.newOptions.center.styles.left = this.dimensionOptions.newOptions.center.styles.left - c;
            this.dimensionOptions.newOptions.center.styles.width = this.dimensionOptions.newOptions.center.styles.width + c;
            this.dimensionOptions.oldOptions.center.el.setStyles({left: this.dimensionOptions.newOptions.center.styles.left, width: this.dimensionOptions.newOptions.center.styles.width});
            break;
        case"east":
            var c = this.dimensionOptions.newOptions[f + "DragDiv"].styles.left - this.dimensionOptions.oldOptions[f + "DragDiv"].el.getStyle("left").toFloat();
            this.dimensionOptions.newOptions[f + "DragDiv"].styles.left = this.dimensionOptions.oldOptions[f + "DragDiv"].el.getStyle("left").toFloat();
            this.dimensionOptions.newOptions.east.styles.width = this.dimensionOptions.newOptions.east.styles.width + c;
            this.dimensionOptions.oldOptions.east.el.setStyle("width", this.dimensionOptions.newOptions.east.styles.width);
            this.dimensionOptions.newOptions.east.styles.left = this.dimensionOptions.newOptions.east.styles.left - c;
            this.dimensionOptions.oldOptions.east.el.setStyle("left", this.dimensionOptions.newOptions.east.styles.left);
            this.refreshScrollBtn("east");
            this.dimensionOptions.newOptions.center.styles.width = this.dimensionOptions.newOptions.center.styles.width - c;
            this.dimensionOptions.oldOptions.center.el.setStyles({width: this.dimensionOptions.newOptions.center.styles.width});
            break;
        case"north":
            var b = this.dimensionOptions.newOptions[f + "DragDiv"].styles.top - this.dimensionOptions.oldOptions[f + "DragDiv"].el.getStyle("top").toFloat();
            this.dimensionOptions.newOptions[f + "DragDiv"].styles.top = this.dimensionOptions.oldOptions[f + "DragDiv"].el.getStyle("top").toFloat();
            if ($defined(this.dimensionOptions.oldOptions.center.el)) {
                this.dimensionOptions.newOptions.center.styles.height = this.dimensionOptions.newOptions.center.styles.height + b;
                this.dimensionOptions.oldOptions.center.el.setStyle("height", this.dimensionOptions.newOptions.center.styles.height);
                this.dimensionOptions.newOptions.center.styles.top = this.dimensionOptions.newOptions.center.styles.top - b;
                this.dimensionOptions.oldOptions.center.el.setStyle("top", this.dimensionOptions.newOptions.center.styles.top);
                this.refreshOtherRefHeight("center", -b)
            }
            if ($defined(this.dimensionOptions.oldOptions.west.el)) {
                this.dimensionOptions.newOptions.west.styles.height = this.dimensionOptions.newOptions.west.styles.height + b;
                this.dimensionOptions.oldOptions.west.el.setStyle("height", this.dimensionOptions.newOptions.west.styles.height);
                this.dimensionOptions.oldOptions.west.scrollDiv.setStyle("height", this.dimensionOptions.newOptions.west.styles.height);
                this.dimensionOptions.oldOptions.westDragDiv.el.setStyle("height", this.dimensionOptions.newOptions.west.styles.height);
                this.dimensionOptions.newOptions.west.styles.top = this.dimensionOptions.newOptions.west.styles.top - b;
                this.dimensionOptions.oldOptions.west.el.setStyle("top", this.dimensionOptions.newOptions.west.styles.top);
                this.dimensionOptions.oldOptions.west.scrollDiv.setStyle("top", this.dimensionOptions.newOptions.west.styles.top);
                this.dimensionOptions.oldOptions.westDragDiv.el.setStyle("top", this.dimensionOptions.newOptions.west.styles.top);
                this.refreshOtherRefHeight("west", -b)
            }
            if ($defined(this.dimensionOptions.oldOptions.east.el)) {
                this.dimensionOptions.newOptions.east.styles.height = this.dimensionOptions.newOptions.east.styles.height + b;
                this.dimensionOptions.oldOptions.east.el.setStyle("height", this.dimensionOptions.newOptions.east.styles.height);
                this.dimensionOptions.oldOptions.east.scrollDiv.setStyle("height", this.dimensionOptions.newOptions.east.styles.height);
                this.dimensionOptions.oldOptions.eastDragDiv.el.setStyle("height", this.dimensionOptions.newOptions.east.styles.height);
                this.dimensionOptions.newOptions.east.styles.top = this.dimensionOptions.newOptions.east.styles.top - b;
                this.dimensionOptions.oldOptions.east.el.setStyle("top", this.dimensionOptions.newOptions.east.styles.top);
                this.dimensionOptions.oldOptions.east.scrollDiv.setStyle("top", this.dimensionOptions.newOptions.east.styles.top);
                this.dimensionOptions.oldOptions.eastDragDiv.el.setStyle("top", this.dimensionOptions.newOptions.east.styles.top);
                this.refreshOtherRefHeight("east", -b)
            }
            if ($defined(this.dimensionOptions.oldOptions.north.el)) {
                this.dimensionOptions.newOptions.north.styles.height = this.dimensionOptions.newOptions.north.styles.height - b;
                this.dimensionOptions.oldOptions.north.el.setStyle("height", this.dimensionOptions.newOptions.north.styles.height);
                this.refreshOtherRefHeight("north", b)
            }
            this.refreshScrollBtn("west");
            this.refreshScrollBtn("east");
            this.refreshScrollBtn("north");
            break;
        case"south":
            var b = this.dimensionOptions.newOptions[f + "DragDiv"].styles.top - this.dimensionOptions.oldOptions[f + "DragDiv"].el.getStyle("top").toFloat();
            this.dimensionOptions.newOptions[f + "DragDiv"].styles.top = this.dimensionOptions.oldOptions[f + "DragDiv"].el.getStyle("top").toFloat();
            if ($defined(this.dimensionOptions.oldOptions.center.el)) {
                this.dimensionOptions.newOptions.center.styles.height = this.dimensionOptions.newOptions.center.styles.height - b;
                this.dimensionOptions.oldOptions.center.el.setStyle("height", this.dimensionOptions.newOptions.center.styles.height);
                this.refreshOtherRefHeight("center", b)
            }
            if ($defined(this.dimensionOptions.oldOptions.west.el)) {
                this.dimensionOptions.newOptions.west.styles.height = this.dimensionOptions.newOptions.west.styles.height - b;
                this.dimensionOptions.oldOptions.west.el.setStyle("height", this.dimensionOptions.newOptions.west.styles.height);
                this.dimensionOptions.oldOptions.west.scrollDiv.setStyle("height", this.dimensionOptions.newOptions.west.styles.height);
                this.dimensionOptions.oldOptions.westDragDiv.el.setStyle("height", this.dimensionOptions.newOptions.west.styles.height);
                this.refreshOtherRefHeight("west", b)
            }
            if ($defined(this.dimensionOptions.oldOptions.east.el)) {
                this.dimensionOptions.newOptions.east.styles.height = this.dimensionOptions.newOptions.east.styles.height - b;
                this.dimensionOptions.oldOptions.east.el.setStyle("height", this.dimensionOptions.newOptions.east.styles.height);
                this.dimensionOptions.oldOptions.east.scrollDiv.setStyle("height", this.dimensionOptions.newOptions.east.styles.height);
                this.dimensionOptions.oldOptions.eastDragDiv.el.setStyle("height", this.dimensionOptions.newOptions.east.styles.height);
                this.refreshOtherRefHeight("east", b)
            }
            if ($defined(this.dimensionOptions.oldOptions.south.el)) {
                this.dimensionOptions.newOptions.south.styles.top = this.dimensionOptions.newOptions.south.styles.top - b;
                this.dimensionOptions.oldOptions.south.el.setStyle("top", this.dimensionOptions.newOptions.south.styles.top);
                this.dimensionOptions.newOptions.south.styles.height = this.dimensionOptions.newOptions.south.styles.height + b;
                this.dimensionOptions.oldOptions.south.el.setStyle("height", this.dimensionOptions.newOptions.south.styles.height);
                this.refreshOtherRefHeight("south", -b)
            }
            this.refreshScrollBtn("west");
            this.refreshScrollBtn("east");
            this.refreshScrollBtn("south");
            break;
        default:
            break
    }
}, refresh: function () {
    this.widthRate = $(document.body).getSize().x / this.options.width;
    this.heightRate = $(document.body).getSize().y / this.options.height;
    for (var a in this.dimensionOptions.newOptions) {
        this.refreshOptionsElRegionAndDragDiv(a);
        this.refreshScrollDiv(a);
        this.refreshScrollBtn(a);
        this.refreshScrollRegionAboveFlag(a)
    }
    this.refreshFix()
}, refreshOptionsElRegionAndDragDiv: function (b) {
    for (var a in this.dimensionOptions.newOptions[b].styles) {
        if (a != "position") {
            if (a == "left" || a == "width") {
                this.dimensionOptions.newOptions[b].styles[a] = this.dimensionOptions.oldOptions[b].styles[a] * this.widthRate
            } else {
                if (a == "top" || a == "height") {
                    this.dimensionOptions.newOptions[b].styles[a] = this.dimensionOptions.oldOptions[b].styles[a] * this.heightRate
                }
            }
            this.dimensionOptions.oldOptions[b].el.setStyle(a, this.dimensionOptions.newOptions[b].styles[a])
        }
    }
    if (!b.contains("DragDiv")) {
        this.dimensionOptions.oldOptions[b].el.set("heightRate", this.heightRate);
        this.dimensionOptions.oldOptions[b].el.set("widthRate", this.widthRate)
    }
}, refreshFix: function () {
    var c = this.dimensionOptions.oldOptions;
    var f = this.dimensionOptions.newOptions;
    var a = 0;
    var b = 0;
    if ($defined(c.north) && c.north["isFix"] == "true") {
        a = c.north["fixLength"] - f.north.styles.height;
        c.north.el.setStyle("height", (c.north["fixLength"]).toFloat());
        if ($defined(c.west) && $defined(c.west.el)) {
            c.west.el.setStyle("top", Math.max(0, f.west.styles.top + a));
            c.west.el.setStyle("height", Math.max(0, f.west.styles.height - a))
        }
        if ($defined(c.westDragDiv) && $defined(c.westDragDiv.el)) {
            c.westDragDiv.el.setStyle("top", Math.max(0, f.westDragDiv.styles.top + a));
            c.westDragDiv.el.setStyle("height", Math.max(0, f.westDragDiv.styles.height - a))
        }
        if ($defined(c.east) && $defined(c.east.el)) {
            c.east.el.setStyle("top", Math.max(0, f.west.styles.top + a));
            c.east.el.setStyle("height", Math.max(0, f.west.styles.height - a))
        }
        if ($defined(c.eastDragDiv) && $defined(c.eastDragDiv.el)) {
            c.eastDragDiv.el.setStyle("top", Math.max(0, f.eastDragDiv.styles.top + a));
            c.eastDragDiv.el.setStyle("height", Math.max(0, f.eastDragDiv.styles.height - a))
        }
        if ($defined(c.center.el) && $defined(c.center.el)) {
            c.center.el.setStyle("top", Math.max(0, f.center.styles.top + a));
            c.center.el.setStyle("height", Math.max(0, f.center.styles.height - a))
        }
    }
    if ($defined(c.south) && c.south["isFix"] == "true") {
        b = c.south["fixLength"] - f.south.styles.height;
        c.south.el.setStyle("top", Math.max(0, f.south.styles.top - b));
        c.south.el.setStyle("height", Math.max(0, c.south["fixLength"]));
        if ($defined(c.west) && $defined(c.west.el)) {
            c.west.el.set("heightMinus", b + a);
            c.west.el.setStyle("height", Math.max(0, f.west.styles.height - b - a))
        }
        if ($defined(c.westDragDiv) && $defined(c.westDragDiv.el)) {
            c.westDragDiv.el.setStyle("height", Math.max(0, f.westDragDiv.styles.height - b - a))
        }
        if ($defined(c.east) && $defined(c.east.el)) {
            c.east.el.set("heightMinus", b + a);
            c.east.el.setStyle("height", Math.max(0, f.west.styles.height - b - a))
        }
        if ($defined(c.eastDragDiv) && $defined(c.eastDragDiv.el)) {
            c.eastDragDiv.el.setStyle("height", Math.max(0, f.eastDragDiv.styles.height - b - a))
        }
        if ($defined(c.center.el) && $defined(c.center.el)) {
            c.center.el.set("heightMinus", b + a);
            c.center.el.setStyle("height", Math.max(0, f.center.styles.height - b - a))
        }
    }
    if ($defined(c.west) && $defined(c.west.scrollDiv)) {
        c.west.scrollDiv.setStyles({height: c.west.el.getStyle("height"), top: c.west.el.getStyle("top")})
    }
    if ($defined(c.east) && $defined(c.east.scrollDiv)) {
        c.east.scrollDiv.setStyles({height: c.east.el.getStyle("height"), top: c.east.el.getStyle("top")})
    }
}, refreshScrollDiv: function (a) {
    if (!a.contains("DragDiv") && a != "center") {
        switch (a) {
            case"west":
                this.dimensionOptions.oldOptions[a].scrollDiv.setStyles({width: this.options.panelScrollSize, height: this.dimensionOptions.newOptions[a].styles.height, left: this.dimensionOptions.newOptions[a].styles.left - this.options.panelScrollSize.toFloat() - 10, top: this.dimensionOptions.newOptions[a].styles.top});
                break;
            case"east":
                this.dimensionOptions.oldOptions[a].scrollDiv.setStyles({width: this.options.panelScrollSize, height: this.dimensionOptions.newOptions[a].styles.height, left: this.dimensionOptions.newOptions[a].styles.left.toFloat() + this.dimensionOptions.newOptions[a].styles.width.toFloat() + 10, top: this.dimensionOptions.newOptions[a].styles.top});
                break;
            case"north":
                this.dimensionOptions.oldOptions[a].scrollDiv.setStyles({height: this.options.panelScrollSize, width: this.dimensionOptions.newOptions[a].styles.width, left: this.dimensionOptions.newOptions[a].styles.left, top: this.dimensionOptions.newOptions[a].styles.top.toFloat() - this.options.panelScrollSize.toFloat() - 10});
                break;
            case"south":
                this.dimensionOptions.oldOptions[a].scrollDiv.setStyles({height: this.options.panelScrollSize, width: this.dimensionOptions.newOptions[a].styles.width, left: this.dimensionOptions.newOptions[a].styles.left, top: this.dimensionOptions.newOptions[a].styles.top.toFloat() + this.dimensionOptions.newOptions[a].styles.height.toFloat() + 10});
                break;
            default:
                break
        }
    }
}, refreshScrollBtn: function (a) {
    if (!a.contains("DragDiv") && a != "center" && this.dimensionOptions.oldOptions[a].isScroll == "true") {
        this.dimensionOptions.oldOptions[a].scrollBtn.setStyle("left", this.dimensionOptions.newOptions[a].styles.width - 25);
        this.dimensionOptions.oldOptions[a].scrollBtn.setStyle("top", 5)
    }
}, refreshScrollRegionAboveFlag: function (a) {
    this.dimensionOptions.oldOptions[a].scrollRegionAboveFlag = false
}, refreshOtherRefHeight: function (f, b) {
    var c = this.dimensionOptions.oldOptions[f].el.getElements("div[sword='SwordFrameTab']");
    c.each(function (h) {
        var g = pageContainer.getWidget(h.get("name"));
        g.refreshTabContentByNum(b)
    }.bind(this));
    var a = this.dimensionOptions.oldOptions[f].el.getElements("div[sword='SwordFramePanel']");
    a.each(function (h) {
        var g = pageContainer.getWidget(h.get("name"));
        g.refreshPanelContentByNum(b)
    }.bind(this))
}, addRegionEvent: function () {
    if (Browser.Engine.trident) {
        this.tempRegion = new Element("div", {styles: {width: "100%", height: "100%"}}).inject(document.body);
        this.tempRegion.addEvent("resize", function () {
            this.refresh()
        }.bind(this))
    } else {
        window.addEvent("resize", function () {
            this.refresh()
        }.bind(this))
    }
}, scrollRegionOutDiv: function (a) {
    this.dimensionOptions.oldOptions[a].scrollBtn.setStyle("display", "block");
    if ($defined(this.dimensionOptions.oldOptions[a + "DragDiv"])) {
        this.dimensionOptions.oldOptions[a + "DragDiv"].el.setStyle("z-index", "-1")
    }
    switch (a) {
        case"west":
            this.dimensionOptions.oldOptions[a].elTween.start("left", this.dimensionOptions.newOptions[a].styles.left, this.dimensionOptions.newOptions[a].styles.left - this.dimensionOptions.newOptions[a].styles.width);
            this.dimensionOptions.oldOptions[a].scrollDivTween.start("left", this.dimensionOptions.newOptions[a].styles.left - this.options.panelScrollSize, this.dimensionOptions.newOptions[a].styles.left);
            this.dimensionOptions.oldOptions.center.el.setStyles({left: this.dimensionOptions.oldOptions.center.el.getStyle("left").toFloat() - this.dimensionOptions.newOptions[a].styles.width + this.options.panelScrollSize, width: this.dimensionOptions.oldOptions.center.el.getStyle("width").toFloat() + this.dimensionOptions.newOptions[a].styles.width - this.options.panelScrollSize});
            break;
        case"east":
            this.dimensionOptions.oldOptions[a].elTween.start("left", this.dimensionOptions.newOptions[a].styles.left, this.dimensionOptions.newOptions[a].styles.left + this.dimensionOptions.newOptions[a].styles.width);
            this.dimensionOptions.oldOptions[a].scrollDivTween.start("left", this.dimensionOptions.newOptions[a].styles.left + this.dimensionOptions.newOptions[a].styles.width, this.dimensionOptions.newOptions[a].styles.left + this.dimensionOptions.newOptions[a].styles.width - this.options.panelScrollSize);
            this.dimensionOptions.oldOptions.center.el.setStyles({width: this.dimensionOptions.oldOptions.center.el.getStyle("width").toFloat() + this.dimensionOptions.newOptions[a].styles.width - this.options.panelScrollSize});
            break;
        case"north":
            this.dimensionOptions.oldOptions[a].elTween.start("top", this.dimensionOptions.newOptions[a].styles.top, this.dimensionOptions.newOptions[a].styles.top - this.dimensionOptions.newOptions[a].styles.height);
            this.dimensionOptions.oldOptions[a].scrollDivTween.start("top", this.dimensionOptions.newOptions[a].styles.top - this.options.panelScrollSize, this.dimensionOptions.newOptions[a].styles.top);
            if ($defined(this.dimensionOptions.oldOptions.center.el)) {
                this.dimensionOptions.oldOptions.center.el.setStyles({top: this.dimensionOptions.oldOptions.center.el.getStyle("top").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize, height: this.dimensionOptions.oldOptions.center.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize});
                this.refreshOtherRefHeight("center", -this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize)
            }
            if ($defined(this.dimensionOptions.oldOptions.west.el)) {
                this.dimensionOptions.oldOptions.west.el.setStyles({top: this.dimensionOptions.oldOptions.west.el.getStyle("top").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize, height: this.dimensionOptions.oldOptions.west.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize});
                this.refreshOtherRefHeight("west", -this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize);
                this.dimensionOptions.oldOptions.west.scrollDiv.setStyles({top: this.dimensionOptions.oldOptions.west.scrollDiv.getStyle("top").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize, height: this.dimensionOptions.oldOptions.west.scrollDiv.getStyle("height").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize});
                this.dimensionOptions.oldOptions.westDragDiv.el.setStyles({top: this.dimensionOptions.oldOptions.westDragDiv.el.getStyle("top").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize, height: this.dimensionOptions.oldOptions.westDragDiv.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize})
            }
            if ($defined(this.dimensionOptions.oldOptions.east.el)) {
                this.dimensionOptions.oldOptions.east.el.setStyles({top: this.dimensionOptions.oldOptions.east.el.getStyle("top").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize, height: this.dimensionOptions.oldOptions.east.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize});
                this.refreshOtherRefHeight("east", -this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize);
                this.dimensionOptions.oldOptions.east.scrollDiv.setStyles({top: this.dimensionOptions.oldOptions.east.scrollDiv.getStyle("top").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize, height: this.dimensionOptions.oldOptions.east.scrollDiv.getStyle("height").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize});
                this.dimensionOptions.oldOptions.eastDragDiv.el.setStyles({top: this.dimensionOptions.oldOptions.eastDragDiv.el.getStyle("top").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize, height: this.dimensionOptions.oldOptions.eastDragDiv.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize})
            }
            break;
        case"south":
            this.dimensionOptions.oldOptions[a].elTween.start("top", this.dimensionOptions.newOptions[a].styles.top, this.dimensionOptions.newOptions[a].styles.top + this.dimensionOptions.newOptions[a].styles.height);
            this.dimensionOptions.oldOptions[a].scrollDivTween.start("top", this.dimensionOptions.newOptions[a].styles.top + this.dimensionOptions.newOptions[a].styles.height, this.dimensionOptions.newOptions[a].styles.top + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize);
            if ($defined(this.dimensionOptions.oldOptions.center)) {
                if ($defined(this.dimensionOptions.oldOptions.center.el)) {
                    this.dimensionOptions.oldOptions.center.el.setStyles({height: this.dimensionOptions.oldOptions.center.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize});
                    this.refreshOtherRefHeight("center", -this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize)
                }
            }
            if ($defined(this.dimensionOptions.oldOptions.west)) {
                if ($defined(this.dimensionOptions.oldOptions.west.el)) {
                    this.dimensionOptions.oldOptions.west.el.setStyles({height: this.dimensionOptions.oldOptions.west.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize});
                    this.refreshOtherRefHeight("west", -this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize);
                    this.dimensionOptions.oldOptions.west.scrollDiv.setStyles({height: this.dimensionOptions.oldOptions.west.scrollDiv.getStyle("height").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize});
                    this.dimensionOptions.oldOptions.westDragDiv.el.setStyles({height: this.dimensionOptions.oldOptions.westDragDiv.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize})
                }
            }
            if ($defined(this.dimensionOptions.oldOptions.east)) {
                if ($defined(this.dimensionOptions.oldOptions.east.el)) {
                    this.dimensionOptions.oldOptions.east.el.setStyles({height: this.dimensionOptions.oldOptions.east.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize});
                    this.refreshOtherRefHeight("east", -this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize);
                    this.dimensionOptions.oldOptions.east.scrollDiv.setStyles({height: this.dimensionOptions.oldOptions.east.scrollDiv.getStyle("height").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize});
                    this.dimensionOptions.oldOptions.eastDragDiv.el.setStyles({height: this.dimensionOptions.oldOptions.eastDragDiv.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize})
                }
            }
            break;
        default:
            break
    }
}, scrollRegionInDiv: function (a) {
    this.dimensionOptions.oldOptions[a].scrollBtn.setStyle("display", "block");
    if ($defined(this.dimensionOptions.oldOptions[a + "DragDiv"])) {
        this.dimensionOptions.oldOptions[a + "DragDiv"].el.setStyle("z-index", "10002")
    }
    switch (a) {
        case"west":
            this.dimensionOptions.oldOptions[a].elTween.start("left", this.dimensionOptions.newOptions[a].styles.left - this.dimensionOptions.newOptions[a].styles.width, this.dimensionOptions.newOptions[a].styles.left);
            this.dimensionOptions.oldOptions[a].scrollDivTween.start("left", this.dimensionOptions.newOptions[a].styles.left, this.dimensionOptions.newOptions[a].styles.left - this.options.panelScrollSize - 10);
            this.dimensionOptions.oldOptions.center.el.setStyles({left: this.dimensionOptions.oldOptions.center.el.getStyle("left").toFloat() + this.dimensionOptions.newOptions[a].styles.width - this.options.panelScrollSize, width: this.dimensionOptions.oldOptions.center.el.getStyle("width").toFloat() - this.dimensionOptions.newOptions[a].styles.width + this.options.panelScrollSize});
            break;
        case"east":
            this.dimensionOptions.oldOptions[a].elTween.start("left", this.dimensionOptions.newOptions[a].styles.left + this.dimensionOptions.newOptions[a].styles.width, this.dimensionOptions.newOptions[a].styles.left);
            this.dimensionOptions.oldOptions[a].scrollDivTween.start("left", this.dimensionOptions.newOptions[a].styles.left + this.dimensionOptions.newOptions[a].styles.width - this.options.panelScrollSize, this.dimensionOptions.newOptions[a].styles.left + this.dimensionOptions.newOptions[a].styles.width + 10);
            this.dimensionOptions.oldOptions.center.el.setStyles({width: this.dimensionOptions.oldOptions.center.el.getStyle("width").toFloat() - this.dimensionOptions.newOptions[a].styles.width + this.options.panelScrollSize});
            break;
        case"north":
            this.dimensionOptions.oldOptions[a].elTween.start("top", this.dimensionOptions.newOptions[a].styles.top - this.dimensionOptions.newOptions[a].styles.height, this.dimensionOptions.newOptions[a].styles.top);
            this.dimensionOptions.oldOptions[a].scrollDivTween.start("top", this.dimensionOptions.newOptions[a].styles.top, this.dimensionOptions.newOptions[a].styles.top - this.options.panelScrollSize - 10);
            if ($defined(this.dimensionOptions.oldOptions.center.el)) {
                this.dimensionOptions.oldOptions.center.el.setStyles({top: this.dimensionOptions.oldOptions.center.el.getStyle("top").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize, height: this.dimensionOptions.oldOptions.center.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize});
                this.refreshOtherRefHeight("center", this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize)
            }
            if ($defined(this.dimensionOptions.oldOptions.west.el)) {
                this.dimensionOptions.oldOptions.west.el.setStyles({top: this.dimensionOptions.oldOptions.west.el.getStyle("top").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize, height: this.dimensionOptions.oldOptions.west.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize});
                this.dimensionOptions.oldOptions.west.scrollDiv.setStyles({top: this.dimensionOptions.oldOptions.west.scrollDiv.getStyle("top").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize, height: this.dimensionOptions.oldOptions.west.scrollDiv.getStyle("height").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize});
                this.dimensionOptions.oldOptions.westDragDiv.el.setStyles({top: this.dimensionOptions.oldOptions.westDragDiv.el.getStyle("top").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize, height: this.dimensionOptions.oldOptions.westDragDiv.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize});
                this.refreshOtherRefHeight("west", this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize)
            }
            if ($defined(this.dimensionOptions.oldOptions.east.el)) {
                this.dimensionOptions.oldOptions.east.el.setStyles({top: this.dimensionOptions.oldOptions.east.el.getStyle("top").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize, height: this.dimensionOptions.oldOptions.east.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize});
                this.dimensionOptions.oldOptions.east.scrollDiv.setStyles({top: this.dimensionOptions.oldOptions.east.scrollDiv.getStyle("top").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize, height: this.dimensionOptions.oldOptions.east.scrollDiv.getStyle("height").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize});
                this.dimensionOptions.oldOptions.eastDragDiv.el.setStyles({top: this.dimensionOptions.oldOptions.eastDragDiv.el.getStyle("top").toFloat() + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize, height: this.dimensionOptions.oldOptions.eastDragDiv.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize});
                this.refreshOtherRefHeight("east", this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize)
            }
            break;
        case"south":
            this.dimensionOptions.oldOptions[a].elTween.start("top", this.dimensionOptions.newOptions[a].styles.top + this.dimensionOptions.newOptions[a].styles.height, this.dimensionOptions.newOptions[a].styles.top);
            this.dimensionOptions.oldOptions[a].scrollDivTween.start("top", this.dimensionOptions.newOptions[a].styles.top + this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize, this.dimensionOptions.newOptions[a].styles.top + this.dimensionOptions.newOptions[a].styles.height + 10);
            if ($defined(this.dimensionOptions.oldOptions.center)) {
                if ($defined(this.dimensionOptions.oldOptions.center.el)) {
                    this.dimensionOptions.oldOptions.center.el.setStyles({height: this.dimensionOptions.oldOptions.center.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize});
                    this.refreshOtherRefHeight("center", this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize)
                }
            }
            if ($defined(this.dimensionOptions.oldOptions.west)) {
                if ($defined(this.dimensionOptions.oldOptions.west.el)) {
                    this.dimensionOptions.oldOptions.west.el.setStyles({height: this.dimensionOptions.oldOptions.west.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize});
                    this.dimensionOptions.oldOptions.west.scrollDiv.setStyles({height: this.dimensionOptions.oldOptions.west.scrollDiv.getStyle("height").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize});
                    this.dimensionOptions.oldOptions.westDragDiv.el.setStyles({height: this.dimensionOptions.oldOptions.westDragDiv.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize});
                    this.refreshOtherRefHeight("west", this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize)
                }
            }
            if ($defined(this.dimensionOptions.oldOptions.east)) {
                if ($defined(this.dimensionOptions.oldOptions.east.el)) {
                    this.dimensionOptions.oldOptions.east.el.setStyles({height: this.dimensionOptions.oldOptions.east.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize});
                    this.dimensionOptions.oldOptions.east.scrollDiv.setStyles({height: this.dimensionOptions.oldOptions.east.scrollDiv.getStyle("height").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize});
                    this.dimensionOptions.oldOptions.eastDragDiv.el.setStyles({height: this.dimensionOptions.oldOptions.eastDragDiv.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[a].styles.height + this.options.panelScrollSize});
                    this.refreshOtherRefHeight("east", this.dimensionOptions.newOptions[a].styles.height - this.options.panelScrollSize)
                }
            }
            break;
        default:
            break
    }
}, scrollRegionOutAboveDiv: function (a) {
    this.dimensionOptions.oldOptions[a].el.setStyle("z-index", 1);
    this.dimensionOptions.oldOptions[a].scrollRegionAboveFlag = false;
    this.dimensionOptions.oldOptions[a].scrollBtn.setStyle("display", "block");
    switch (a) {
        case"west":
            this.dimensionOptions.oldOptions[a].elTween.start("left", this.dimensionOptions.newOptions[a].styles.left + this.options.panelScrollSize, this.dimensionOptions.newOptions[a].styles.left - this.dimensionOptions.newOptions[a].styles.width);
            break;
        case"east":
            this.dimensionOptions.oldOptions[a].elTween.start("left", this.dimensionOptions.newOptions[a].styles.left - this.options.panelScrollSize, this.dimensionOptions.newOptions[a].styles.left + this.dimensionOptions.newOptions[a].styles.width);
            break;
        case"north":
            this.dimensionOptions.oldOptions[a].elTween.start("top", this.dimensionOptions.newOptions[a].styles.top + this.options.panelScrollSize, this.dimensionOptions.newOptions[a].styles.top - this.dimensionOptions.newOptions[a].styles.height);
            break;
        case"south":
            this.dimensionOptions.oldOptions[a].elTween.start("top", this.dimensionOptions.newOptions[a].styles.top - this.options.panelScrollSize, this.dimensionOptions.newOptions[a].styles.top + this.dimensionOptions.newOptions[a].styles.height);
            break;
        default:
            break
    }
}, scrollRegionInAboveDiv: function (a) {
    this.dimensionOptions.oldOptions[a].el.setStyle("z-index", 10);
    this.dimensionOptions.oldOptions[a].scrollRegionAboveFlag = true;
    this.dimensionOptions.oldOptions[a].scrollBtn.setStyle("display", "none");
    switch (a) {
        case"west":
            this.dimensionOptions.oldOptions[a].elTween.start("left", this.dimensionOptions.newOptions[a].styles.left - this.dimensionOptions.newOptions[a].styles.width, this.dimensionOptions.newOptions[a].styles.left + this.options.panelScrollSize);
            break;
        case"east":
            this.dimensionOptions.oldOptions[a].elTween.start("left", this.dimensionOptions.newOptions[a].styles.left + this.dimensionOptions.newOptions[a].styles.width, this.dimensionOptions.newOptions[a].styles.left - this.options.panelScrollSize);
            break;
        case"north":
            this.dimensionOptions.oldOptions[a].elTween.start("top", this.dimensionOptions.newOptions[a].styles.top - this.dimensionOptions.newOptions[a].styles.height, this.dimensionOptions.newOptions[a].styles.top + this.options.panelScrollSize);
            break;
        case"south":
            this.dimensionOptions.oldOptions[a].elTween.start("top", this.dimensionOptions.newOptions[a].styles.top + this.dimensionOptions.newOptions[a].styles.height, this.dimensionOptions.newOptions[a].styles.top - this.options.panelScrollSize);
            break;
        default:
            break
    }
}});
var SwordFramePanel = new Class({Implements: [Options, Events], type: "SwordFramePanel", options: {pNode: null, src: null, pos: "false", left: null, top: null, width: null, height: 400, zIndex: 5000, isCloseBtn: "false", isCollapse: "false", isDrag: "false", isPin: "false", isResize: "false", title: "panel"}, panelDiv: null, panelHeaderDiv: null, panelHeaderCloseDiv: null, panelHeaderPinDiv: null, panelHeaderCollapseContentDiv: null, panelHeaderCollapseContentTween: null, panelHeaderTitleSpan: null, panelContentBodyDiv: null, panelResizeDiv: null, initialize: function (a) {
    this.setOptions(a)
}, initParam: function (a) {
    this.htmlOptions(a);
    this.options.src = a.getChildren();
    this.create(a);
    this.refreshPanelContentByRate();
    this.BuildRefreshPanelContentHeightEvent()
}, initData: function () {
}, create: function (a) {
    if ($defined(a)) {
        this.options.pNode = a.getParent()
    }
    if (!$defined(this.options.pNode)) {
        this.options.pNode = document.body
    }
    this.buildPanel();
    this.panelDiv.replaces(a)
}, buildPanel: function () {
    this.buildPanelHeader();
    this.buildPanelContent();
    this.buildPanelResizeDiv();
    this.buildPanelDrag()
}, buildPanelDrag: function () {
    if (this.options.isDrag == "true") {
        this.panelHeaderDiv.setStyle("cursor", "move");
        new Drag(this.options.pNode, {handle: this.panelHeaderDiv, onStart: function (a) {
            this.options.left = a.getPosition().x || a.getCoordinates().left;
            this.options.top = a.getPosition().y || a.getCoordinates().top
        }.bind(this), onDrag: function (a) {
            if (this.options.isDrag == "false") {
                a.setStyles({left: this.options.left, top: this.options.top})
            } else {
                a.setStyles({"z-index": 10000})
            }
        }.bind(this), onComplete: function (a) {
            if (this.options.isDrag == "false") {
                a.setStyles({left: this.options.left, top: this.options.top})
            } else {
                this.options.left = a.getPosition().x;
                this.options.top = a.getPosition().y;
                a.setStyles({"z-index": 0})
            }
        }.bind(this)})
    }
}, buildPanelHeader: function () {
    this.panelDiv = new Element("div", {"class": "x-panel"}).inject(this.options.pNode);
    if (this.options.pos == "absolute") {
        this.panelDiv.setStyles({position: "absolute", left: this.options.left, top: this.options.top, width: this.options.width, height: this.options.height, "z-index": this.options.zIndex})
    }
    this.panelHeaderDiv = new Element("div", {"class": "x-panel-header x-unselectable"}).inject(this.panelDiv);
    if (this.options.isCloseBtn == "true") {
        this.panelHeaderCloseDiv = new Element("div", {"class": "x-tool x-tool-close"}).inject(this.panelHeaderDiv);
        this.panelHeaderCloseDiv.addEvent("click", function () {
            this.panelDiv.setStyle("display", "none")
        }.bind(this))
    }
    if (this.options.isPin == "true") {
        this.panelHeaderPinDiv = new Element("div", {"class": "x-tool x-tool-pin-over"}).inject(this.panelHeaderDiv);
        this.panelHeaderPinDiv.addEvent("click", function () {
            if (this.options.isDrag == "true" && this.panelHeaderPinDiv.hasClass("x-tool-pin-over")) {
                this.options.isDrag = "false";
                this.panelHeaderPinDiv.removeClass("x-tool-pin-over");
                this.panelHeaderPinDiv.addClass("x-tool-pin")
            } else {
                this.options.isDrag = "true";
                this.panelHeaderPinDiv.removeClass("x-tool-pin");
                this.panelHeaderPinDiv.addClass("x-tool-pin-over")
            }
        }.bind(this))
    }
    if (this.options.isCollapse == "true") {
        this.panelHeaderCollapseContentDiv = new Element("div", {"class": "x-tool x-tool-toggle"}).inject(this.panelHeaderDiv);
        this.panelHeaderCollapseContentDiv.addEvent("click", function () {
            if (this.panelContentBodyDiv.getStyle("display") == "block") {
                this.panelHeaderDiv.addClass("x-panel-collapsed");
                this.panelHeaderCollapseContentTween.start("display", "block", "none")
            } else {
                this.panelHeaderDiv.removeClass("x-panel-collapsed");
                this.panelHeaderCollapseContentTween.start("display", "none", "block")
            }
        }.bind(this))
    }
    this.panelHeaderTitleSpan = new Element("div", {"class": "x-panel-header-text", text: this.options.title}).inject(this.panelHeaderDiv)
}, setTitle: function (a) {
    this.panelHeaderTitleSpan.set("text", a)
}, buildPanelContent: function () {
    var a = this.options.height.toFloat() - this.panelHeaderDiv.getSize().y.toFloat();
    if (a < 0) {
        a = 0
    }
    this.panelContentBodyDiv = new Element("div", {name: "panelContentBodyDiv", "class": "x-panel-body", styles: {width: "100%", "overflow-x": "hidden", height: a}}).inject(this.panelDiv);
    this.panelHeaderCollapseContentTween = new Fx.Tween(this.panelContentBodyDiv, {duration: 200, transition: Fx.Transitions.linear});
    this.options.src.each(function (c, b) {
        this.panelContentBodyDiv.adopt(c)
    }.bind(this))
}, buildPanelResizeDiv: function () {
    if (this.options.isResize == "true") {
        this.panelResizeDiv = new Element("div", {"class": "x-panel-bottom-resize"}).inject(this.panelContentBodyDiv);
        this.panelResizeDiv.addEvent("mousedown", function (j) {
            var b = new Element("div", {styles: {position: "absolute", "z-index": 999999, left: this.panelDiv.getPosition().x, top: this.panelDiv.getPosition().y, width: this.panelDiv.getSize().x, height: this.panelDiv.getSize().y, border: "1px solid red"}}).inject(document.body);
            var g = j.client.x;
            var f = j.client.y;
            var c = this.panelDiv.getSize().x;
            var k = this.panelDiv.getSize().y;
            var h = function (p) {
                var o = p.client.x;
                var n = p.client.y;
                b.setStyle("width", c + o - g);
                b.setStyle("height", k + n - f)
            };
            var m = h.bind(this);
            document.addEvent("mousemove", m);
            var l = function (p) {
                var n = b.getStyle("width").toFloat();
                var o = b.getStyle("height").toFloat();
                if (n < 3) {
                    n = 3
                }
                if (o < 37) {
                    o = 37
                }
                this.panelDiv.setStyles({width: n, height: o});
                this.panelContentBodyDiv.setStyles({height: o - 30});
                b.destroy();
                document.removeEvent("mousemove", m);
                document.removeEvent("mouseup", a)
            };
            var a = l.bind(this);
            document.addEvent("mouseup", a)
        }.bind(this))
    }
}, refreshPanelContentByRate: function () {
    var c = this.panelDiv.getParent();
    if ($defined(c) && c.get("tag") != "body") {
        while (true) {
            if ($defined(c.getProperty("region"))) {
                break
            } else {
                c = c.getParent()
            }
            if (c.get("tag") == "body") {
                break
            }
        }
        if (c.get("tag") != "body") {
            var b = c.getProperty("heightRate").toFloat();
            var a = 0;
            if ($defined(this.options.pNode.getProperty("heightMinus"))) {
                a = (this.options.pNode.getProperty("heightMinus")).toFloat()
            }
            var f = this.options.height * b - 30 - a;
            if (f < 0) {
                f = 0
            }
            this.panelContentBodyDiv.setStyles({height: f})
        }
    } else {
        return
    }
}, BuildRefreshPanelContentHeightEvent: function () {
    window.addEvent("resize", function (a) {
        this.refreshPanelContentByRate()
    }.bind(this))
}, refreshPanelContentByNum: function (a) {
    var b = this.panelContentBodyDiv.getStyle("height").toFloat();
    this.panelContentBodyDiv.setStyles({height: b - a})
}, collapse: function () {
    this.panelHeaderDiv.addClass("x-panel-collapsed");
    this.panelContentBodyDiv.setStyle("display", "none")
}, extend: function () {
    this.panelHeaderDiv.removeClass("x-panel-collapsed");
    this.panelContentBodyDiv.setStyle("display", "block")
}});
var SwordFrameTabItem = new Class({Implements: [Options, Events], type: "SwordFrameTabItem", options: {id: "", title: "默认的tab页卡", src: "", lsrc: "", tabContentType: "iframe", isCloseBtn: "true", tabItemWidth: 120, autoWidth: "false", isActive: "true", isShowMenuItem: ["true", "true", "true", "true"], onIframeLoaded: $empty, onClose: $empty, onSelect: $empty, onMouseon: $empty, onMouseleave: $empty, submit: null, onActive: $empty}, refSwordFrameTab: null, tabItemLI: null, tabItemInputCloseA: null, tabItemLISpanWidth: null, tabItemLISpanTitle: null, tabContent: null, tabContextMenu: null, tabItemCssWidth: 20, initialize: function (a) {
    if (!a.get) {
        a.get = function (b) {
            return this[b]
        }
    }
    this.htmlOptions(a)
}, buildItemLI: function () {
    this.tabItemLI = new Element("li", {name: "tabItem_" + this.options.id, "class": "sty_b"});
    this.tabItemLI.addEvents({mouseover: function () {
        this.fireEvent("onMouseon", [this.tabItemLI])
    }.bind(this), mouseout: function () {
        this.fireEvent("onMouseleave", [this.tabItemLI])
    }.bind(this)});
    this.tabItemLI.addEvent("contextmenu", function (j) {
        if (!this.refSwordFrameTab.windowClick) {
            window.document.addEvent("click", function (m) {
                this.refSwordFrameTab.tabItems.each(function (o, n) {
                    if ($defined(o.tabContextMenu)) {
                        o.tabContextMenu.foldFlag = false;
                        o.tabContextMenu.menuZeroLevelDiv.destroy();
                        o.tabContextMenu = null
                    }
                }.bind(this))
            }.bind(this));
            this.refSwordFrameTab.windowClick = true
        }
        var h = this.tabItemLI.getPosition().x + this.tabItemLI.getSize().x / 5;
        var g = this.tabItemLI.getPosition().y + this.tabItemLI.getSize().y / 5;
        var l = [];
        this.options.isShowMenuItem.each(function (n, m) {
            if (n == "false") {
                l.include(m + "")
            }
        });
        var c = [
            {pcode: null, code: "0", caption: i18n.tabMenuFresh, imgName: "recycle.png"},
            {pcode: null, code: "1", caption: i18n.tabMenuClose, imgName: "delete.png"},
            {pcode: null, code: "2", caption: i18n.tabMenuCloseAll, imgName: "star_red.png"},
            {pcode: null, code: "3", caption: i18n.tabMenuCloseOthers, imgName: "flag_red.png"}
        ];
        var f = c.filter(function (m) {
            return !l.contains(m.code)
        });
        var k = f || c;
        var b = [];
        k.each(function (m) {
            b.include(JSON.encode(m))
        });
        this.tabContextMenu = new SwordMenu({name: "tabContextMenu", pos: "absolute", left: h, top: g, isInput: "false", width: 200, itemWidth: "120px", dataStr: "{ 'data': [" + b.toString() + "],'name': 'SwordTreeJSON1','sword': 'SwordTree'}", dataType: "json", type: "vertical", pNode: document.body, isShow: false, onSelect: this.onSelectMenuItem.bind(this)});
        this.tabContextMenu.build();
        this.fold.delay(3000, this);
        j.preventDefault()
    }.bind(this));
    if (this.refSwordFrameTab.options.autoWidth != "true") {
        this.tabItemLI.setStyles({width: this.options.tabItemWidth})
    } else {
        this.options.tabItemWidth = 300
    }
    if (this.options.isActive == "true") {
        this.tabItemLI.addClass("sty_a")
    } else {
        this.tabItemLI.addClass("sty_b")
    }
    this.tabItemLI.addEvent("click", function () {
        if (this.options.tabContentType == "iframe" && $chk(this.options.lsrc) && !$chk(this.tabContent.get("src"))) {
            this.tabContent.set("src", this.options.lsrc);
            this.options.src = this.options.lsrc;
            this.options.lsrc = ""
        }
        this.refSwordFrameTab.activeTabItem(this.options.id);
        this.fireEvent("onSelect", [this.refSwordFrameTab, this.options.id]);
        this.fireEvent("onActive", [this.refSwordFrameTab, this.options.id])
    }.bind(this));
    this.tabItemLI.addEvent("dblclick", function () {
        this.refSwordFrameTab.fireEvent("onDbclick", [this.refSwordFrameTab, this.options.id])
    }.bind(this));
    this.tabItemLISpanWidth = new Element("div", {title: this.options.title, "class": "text"}).inject(this.tabItemLI);
    this.tabItemLISpanWidth.setStyle("padding", "0 5px");
    var a = new Element("span", {text: this.computeTitleSize(this.options.title)}).inject(this.tabItemLISpanWidth);
    if (this.refSwordFrameTab.options.autoWidth != "true") {
        if (this.options.tabItemWidth / 1 > 25) {
            a.setStyle("width", this.options.tabItemWidth - 25)
        } else {
            a.setStyle("width", 1)
        }
    }
    if (this.options.isCloseBtn == "true") {
        this.tabItemLI.addClass("sty_b");
        this.tabItemInputCloseA = new Element("div", {"class": "esc"}).inject(this.tabItemLISpanWidth, "bottom");
        if (this.refSwordFrameTab.options.autoWidth != "true") {
            this.tabItemInputCloseA.setStyle("float", "right")
        }
        this.tabItemInputCloseA.addEvent("click", function (c) {
            this.refSwordFrameTab.removeTabItem(this.options.id);
            var b = this.refSwordFrameTab.getLastTabItem();
            if ($chk(b)) {
                this.refSwordFrameTab.curTabItem = b;
                this.refSwordFrameTab.activeTabItem(this.refSwordFrameTab.curTabItem.options.id);
                this.refSwordFrameTab.scrollLeft()
            }
            c.stopPropagation()
        }.bind(this))
    }
}, computeTitleSize: function (c) {
    var b = 0;
    if (c.length > 5 && this.refSwordFrameTab.options.autoWidth != "true") {
        for (var a = 0; a < c.length; a++) {
            if (/^[\u4e00-\u9fa5]+$/i.test(c.charAt(a))) {
                b = b + 2
            } else {
                b++
            }
        }
    }
    return b > 0 ? (c.substring(0, 5) + "..") : c
}, fold: function () {
    if ($defined(this.tabContextMenu) && this.tabContextMenu.foldFlag) {
        this.tabContextMenu.menuZeroLevelDiv.destroy();
        this.tabContextMenu = null
    }
}, buildContent: function (b) {
    if (this.options.tabContentType == "iframe") {
        this.tabContent = new Element(this.options.tabContentType, {name: "tabContent_" + this.options.id, frameborder: 0, border: 0, marginwidth: 0, marginheight: 0, scrolling: "auto", allowtransparency: "yes"}).inject(b);
        this.tabContent.setStyles({width: "100%", height: "100%"});
        if (this.options.src) {
            this.tabContent.setProperty("src", this.options.src)
        } else {
            if (this.options.submit) {
                var c = this.options.submit;
                var a = "tabContent_" + this.options.id;
                c.isContinue = true;
                c.initSubmitWidget(c.container);
                c.doBeforeEvents();
                c.options.postType = "form_" + a;
                c.submit()
            }
        }
        this.refSwordFrameTab.iframeLoad = false;
        if (!Browser.Engine.trident) {
            this.tabContent.addEvent("load", function () {
                this.fireEvent("onIframeLoaded", this);
                this.refSwordFrameTab.iframeLoad = true
            }.bind(this))
        } else {
            this.tabContent.addEvent("readystatechange", function () {
                try {
                    if (this.tabContent.readyState == "complete") {
                        this.fireEvent("onIframeLoaded", this);
                        this.refSwordFrameTab.iframeLoad = true
                    }
                } catch (f) {
                }
            }.bind(this))
        }
    } else {
        if (this.options.tabContentType == "div") {
            this.tabContent = new Element(this.options.tabContentType, {name: "tabContent_" + this.options.id});
            this.tabContent.setStyles({width: "100%", height: "100%"});
            this.tabContent = $(this.options.src)
        } else {
            if (this.options.tabContentType == "innerHTML") {
                this.tabContent = new Element("div", {name: "tabContent_" + this.options.id});
                this.tabContent.setStyles({width: "100%", height: "100%"});
                this.options.src.each(function (g, f) {
                    this.tabContent.adopt(g)
                }.bind(this))
            }
        }
    }
    if (this.options.isActive == "true") {
        this.tabContent.setStyles({"z-index": 10, display: "block"})
    } else {
        this.tabContent.setStyles({"z-index": 1, display: "none"})
    }
}, onSelectMenuItem: function (a) {
    if (a.getProperty("caption") == "" + i18n.tabMenuFresh) {
        if ($defined(window.frames["tabContent_" + this.options.id])) {
            document.getElementsByName("tabContent_" + this.options.id)[0].src = this.options.src
        } else {
            alert("刷新按钮不支持div")
        }
    } else {
        if (a.getProperty("caption") == "" + i18n.tabMenuClose) {
            this.refSwordFrameTab.removeTabItem(this.options.id);
            this.refSwordFrameTab.scrollLeft()
        } else {
            if (a.getProperty("caption") == "" + i18n.tabMenuCloseOthers) {
                this.refSwordFrameTab.tabItems.each(function (c, b) {
                    if (b != this.options.id) {
                        this.refSwordFrameTab.removeTabItem(b)
                    }
                }.bind(this));
                this.refSwordFrameTab.scrollLeft()
            } else {
                if (a.getProperty("caption") == "" + i18n.tabMenuCloseAll) {
                    this.refSwordFrameTab.tabItems.each(function (c, b) {
                        this.refSwordFrameTab.removeTabItem(b)
                    }.bind(this));
                    this.refSwordFrameTab.scrollLeft()
                }
            }
        }
    }
}, active: function () {
    if ($defined(this.tabItemLI) && $defined(this.tabContent)) {
        this.tabItemLI.addClass("sty_a");
        this.tabItemLI.removeClass("sty_b");
        this.tabContent.setStyles({"z-index": 10, display: "block"})
    }
}, unactive: function () {
    if ($defined(this.tabItemLI) && $defined(this.tabContent)) {
        this.tabItemLI.addClass("sty_b");
        this.tabItemLI.removeClass("sty_a");
        this.tabContent.setStyles({"z-index": 1, display: "none"})
    }
}, add: function (a) {
    if (!$defined(this.tabItemLI) && !$defined(this.tabContent)) {
        this.buildItemLI();
        this.buildContent(a)
    }
}, remove: function () {
    if ($defined(this.tabItemLI) && $defined(this.tabContent)) {
        var a = function (c) {
            c.each(function (g) {
                if (g) {
                    if (g.contentWidow) {
                        var f = g.contentWindow.$$("iframe");
                        if (f.lenght > 0) {
                            a(f)
                        }
                    }
                    g.set("src", "");
                    g.src = "";
                    g.destroy()
                }
            }.bind(this))
        };
        var b = this.tabContent.contentWindow.$$("iframe");
        a(b);
        a = null;
        this.tabItemLI.destroy();
        this.tabContent.set("src", "");
        this.tabContent.src = "";
        this.tabContent.destroy()
    }
}});
var SwordFrameTab = new Class({Implements: [Options, Events], type: "SwordFrameTab", options: {pNode: null, pos: "false", width: null, height: 200, left: null, top: null, maxTabNum: 10, defaultSelectId: null, tabType: "scroll", tabDirection: "top", items: null, autoWidth: "false", onDbclick: $empty}, initialize: function (a) {
}, initParam: function (a) {
    this.htmlOptions(a);
    this.parseFrameTabItems(a);
    this.create(a);
    this.refreshTabContentByRate();
    this.BuildRefreshTabContentHeightEvent()
}, parseFrameTabItems: function (b) {
    var a = {};
    b.getChildren().each(function (j, f) {
        var h = j.getProperty("id");
        var c = {};
        for (var g in SwordFrameTabItem.prototype.options) {
            if (g != "id") {
                if ($defined(j.getProperty(g))) {
                    c[g] = j.getProperty(g)
                } else {
                    c[g] = SwordFrameTabItem.prototype.options[g]
                }
            }
        }
        if (!$defined(j.getProperty("tabContentType"))) {
            c.tabContentType = "innerHTML";
            c.src = j.getChildren()
        }
        a[h] = c
    });
    this.options.items = a
}, initData: function () {
}, tabItems: new Hash(), curTabItem: null, tabDiv: null, tabHeaderDiv: null, tabItemScrollLeftDiv: null, tabItemScrollRightDiv: null, tabItemContentDiv: null, tabItemContentUL: null, tabContentDiv: null, windowClick: null, iframeLoad: true, create: function (a) {
    if ($defined(a)) {
        this.options.pNode = a.getParent()
    }
    if (!$defined(this.options.pNode)) {
        this.options.pNode = document.body
    }
    this.buildTab();
    this.loadDefaultItems();
    this.tabDiv.replaces(a)
}, loadDefaultItems: function () {
    if ($defined(this.options.items)) {
        var a = new Hash(this.options.items);
        a.each(function (c, b) {
            c.id = b;
            this.addTabItem(c)
        }.bind(this))
    }
    if ($defined(this.options.defaultSelectId)) {
        if (this.tabItems.has(this.options.defaultSelectId) == true) {
            this.activeTabItem(this.options.defaultSelectId)
        }
    }
}, isScroll: function () {
    if ($defined(this.curTabItem)) {
        if (this.getDisplayTabItems().getKeys().length * this.curTabItem.options.tabItemWidth > this.tabItemContentDiv.getSize().x) {
            return true
        } else {
            return false
        }
    } else {
        return false
    }
}, activeScroll: function () {
    if (this.isScroll() == false) {
        this.tabItemScrollRightDiv.addClass("right_a");
        this.tabItemScrollLeftDiv.addClass("left_a")
    } else {
        this.tabItemScrollRightDiv.removeClass("right_a");
        this.tabItemScrollLeftDiv.removeClass("left_a")
    }
}, scrollRight: function () {
    if ($defined(this.curTabItem)) {
        if ((this.tabItemContentDiv.getSize().x) > this.getDisplayTabItems().getKeys().length * this.curTabItem.options.tabItemWidth) {
        } else {
            this.getFirstDisplayTabItem().tabItemLI.setStyle("display", "none")
        }
    }
}, scrollLeft: function () {
    if (this.getFirstTabItem() == this.getFirstDisplayTabItem()) {
    } else {
        if ($defined(this.curTabItem)) {
            this.getLastUnDisplayTabItem().tabItemLI.setStyle("display", "")
        }
    }
}, addTabItem: function (a) {
    if ($defined(this.tabItems.get(a.id))) {
        this.unactiveAllTabItem();
        this.curTabItem = this.tabItems.get(a.id);
        this.activeTabItem(this.curTabItem.options.id);
        if (this.options.tabType == "scroll") {
            this.activeScroll()
        }
    } else {
        if ($defined(this.options.maxTabNum) && this.tabItems.getKeys().length >= this.options.maxTabNum) {
            this.isTabNumOut();
            return
        } else {
            this.unactiveAllTabItem();
            if ($defined(this.curTabItem)) {
                this.curTabItem.unactive()
            }
            this.curTabItem = new SwordFrameTabItem(a);
            this.curTabItem.refSwordFrameTab = this;
            this.curTabItem.add(this.tabContentDiv);
            this.tabItems.set(a.id, this.curTabItem);
            this.curTabItem.tabItemLI.inject(this.tabItemContentUL);
            if (a.tabContentType != "iframe") {
                this.curTabItem.tabContent.inject(this.tabContentDiv)
            }
            this.curTabItem.tabContent.setStyles({height: (this.tabContentDiv.getStyle("height").toInt()) * 0.9999});
            this.activeTabItem(this.curTabItem.options.id);
            if (this.options.tabType == "scroll") {
                this.activeScroll()
            }
        }
    }
    this.fireEvent("onActive", [this.curTabItem.refSwordFrameTab, this.curTabItem.options.id])
}, isTabNumOut: function () {
    alert("为了使浏览器不至于过慢，请您关闭一些tab页卡，最好不要超过" + this.options.maxTabNum + "个!")
}, removeTabItem: function (c) {
    var b = this.tabItems.get(c);
    if (b.options.isCloseBtn == "false") {
        return
    }
    this.tabItems.erase(c);
    b.remove();
    var a = this.getLastTabItem();
    if ($defined(a)) {
        this.curTabItem.unactive();
        a.active();
        this.curTabItem = a
    } else {
        this.curTabItem = null
    }
    if (this.options.tabType == "scroll") {
        this.activeScroll()
    }
    b.fireEvent("onClose", [this, c])
}, removeCurrentTabItem: function () {
    if ($defined(this.curTabItem)) {
        this.removeTabItem(this.curTabItem.options.id)
    }
}, activeTabItem: function (a) {
    this.curTabItem.unactive();
    this.curTabItem = this.tabItems.get(a);
    this.curTabItem.active()
}, unactiveAllTabItem: function () {
    this.tabItems.each(function (b, a) {
        this.unactiveTabItem(a)
    }.bind(this))
}, setCurTabItemTitle: function (b) {
    var a = this.curTabItem.tabItemLISpanWidth.set("title", b);
    a.getElement("span").set("text", this.curTabItem.computeTitleSize.run(b, this.curTabItem))
}, unactiveTabItem: function (a) {
    this.tabItems.get(a).unactive();
    this.curTabItem = null
}, getFirstTabItem: function () {
    var a = this.tabItemContentUL.getFirst("li");
    return this.getTabItemByLi(a)
}, getDisplayTabItems: function () {
    var f = new Hash();
    var a = this.tabItemContentUL.getChildren("li");
    for (var b = 0; b < a.length; b++) {
        if (a[b].getStyle("display") != "none") {
            var c = this.getTabItemByLi(a[b]);
            f.set(c.options.id, c)
        }
    }
    return f
}, getFirstDisplayTabItem: function () {
    var a = this.tabItemContentUL.getChildren("li");
    for (var b = 0; b < a.length; b++) {
        if (a[b].getStyle("display") != "none") {
            return this.getTabItemByLi(a[b])
        }
    }
}, getLastUnDisplayTabItem: function () {
    var a = this.tabItemContentUL.getChildren("li");
    for (var b = a.length; b >= 0; b--) {
        if ($defined(a[b]) && a[b].getStyle("display") == "none") {
            return this.getTabItemByLi(a[b])
        }
    }
}, getLastTabItem: function () {
    var a = $(this.tabItemContentUL).getLast("li");
    return this.getTabItemByLi(a)
}, getPreviousTabItem: function (c) {
    var a = this.tabItemContentUL.getElement("li[name=tabItem_" + c + "]");
    var b = a.getPrevious("li");
    return this.getTabItemByLi(b)
}, getNextTabItem: function (c) {
    var a = this.tabItemContentUL.getElement("li[name=tabItem_" + c + "]");
    var b = a.getNext("li");
    return this.getTabItemByLi(b)
}, getTabItemByLi: function (a) {
    if ($defined(a)) {
        var b = a.getProperty("name");
        b = b.substring(b.indexOf("_") + 1, b.length);
        return this.tabItems.get(b)
    } else {
        return null
    }
}, buildTab: function () {
    this.buildTabItemDiv();
    this.buildTabItemHeaderDiv();
    this.buildTabItemScrollOrPlainDiv();
    this.buildTabItemULDiv();
    this.buildTabContentDiv()
}, buildTabItemDiv: function () {
    this.tabDiv = new Element("div", {name: "tabDiv", "class": "frametabDiv", styles: {height: this.options.height}}).inject($(this.options.pNode));
    if (this.options.pos == "absolute") {
        this.tabDiv.setStyles({position: "absolute", left: this.options.left, top: this.options.top, width: this.options.width, height: this.options.height, "z-index": this.options.zIndex})
    }
}, buildTabItemHeaderDiv: function () {
    this.tabHeaderDiv = new Element("div", {"class": "ftable"}).inject(this.tabDiv)
}, buildTabItemScrollOrPlainDiv: function () {
    if (this.options.tabType == "plain") {
    } else {
        if (this.options.tabType == "scroll") {
            this.tabItemScrollRightDiv = new Element("div", {"class": "right", styles: {visibility: "visible"}}).inject(this.tabHeaderDiv);
            this.tabItemScrollRightDiv.addEvent("click", function () {
                if (!this.tabItemScrollRightDiv.hasClass("right_a")) {
                    this.scrollRight()
                }
            }.bind(this));
            this.tabItemScrollLeftDiv = new Element("div", {"class": "left", styles: {visibility: "visible"}}).inject(this.tabHeaderDiv);
            this.tabItemScrollLeftDiv.addEvent("click", function () {
                this.scrollLeft()
            }.bind(this))
        }
    }
}, buildTabItemULDiv: function () {
    this.tabItemContentDiv = new Element("div", {"class": "tab_box", styles: {left: "0"}}).inject(this.tabHeaderDiv);
    this.tabItemContentUL = new Element("ul", {}).inject(this.tabItemContentDiv)
}, buildTabContentDiv: function () {
    this.tabContentDiv = new Element("div", {name: "tabContentDiv", "class": "x-tab-panel-body", styles: {height: this.options.height.toFloat() - 30, overflow: "hidden"}}).inject(this.tabDiv)
}, refreshTabContentByRate: function () {
    if ($defined(this.options.pNode) && $defined(this.options.pNode.getProperty("heightRate"))) {
        var a = 0;
        if ($defined(this.options.pNode.getProperty("heightMinus"))) {
            a = (this.options.pNode.getProperty("heightMinus")).toFloat()
        }
        var b = this.options.pNode.getProperty("heightRate").toFloat();
        this.tabDiv.setStyles({height: Math.max(0, this.options.height * b - a)});
        this.tabContentDiv.setStyles({height: Math.max(0, (this.options.height * b - 30 - a))});
        this.tabItems.each(function (f, c) {
            f.tabContent.setStyles({height: Math.max(0, (this.options.height * b - 30 - a) * 0.9999)})
        }.bind(this))
    }
}, BuildRefreshTabContentHeightEvent: function () {
    window.addEvent("resize", function (a) {
        this.refreshTabContentByRate()
    }.bind(this))
}, refreshTabContentByNum: function (a) {
    var b = this.tabDiv.getStyle("height").toFloat();
    this.tabDiv.setStyles({height: b - a});
    var c = this.tabContentDiv.getStyle("height").toFloat();
    this.tabContentDiv.setStyles({height: b - a - 30})
}, refreshTabItemById: function (a) {
    if (this.tabItems.get(a).tabContent.readyState == "complete") {
        this.tabItems.get(a).tabContent.contentWindow.location.reload()
    }
}, refreshCurrentTabItem: function () {
    this.tabItems.get(this.curTabItem.options.id).tabContent.contentWindow.location.reload()
}, getTabcontent: function (a) {
    return this.tabItems.get(a).tabContent
}, addModalTabItem: function (a) {
    this.addTabItem(a)
}});
var DelayedTask = function (f, c, a) {
    var g = this, h, b = function () {
        clearInterval(h);
        h = null;
        f.apply(c, a || [])
    };
    g.delay = function (k, m, l, j) {
        g.cancel();
        f = m || f;
        c = l || c;
        a = j || a;
        h = setInterval(b, k)
    };
    g.cancel = function () {
        if (h) {
            clearInterval(h);
            h = null
        }
    }
};
var SwordSort = new Class({Implements: [Events, Options], name: "SwordSort", options: {sortName: "", type: "string", sortflag: "asc", widget: "table", onSortBegin: null, onSortEnd: null}, initialize: function (a) {
    this.setOptions(a)
}, initParam: function (a) {
}, initData: function () {
}, sort: function (b, a) {
    this.setOptions(a);
    this.setData(b);
    if ($chk(this.options.dataStr)) {
        this.setData(JSON.decode(this.options.dataStr))
    }
    if (!$chk(this.getData())) {
        return[]
    }
    this.fireEvent("onSortBegin", this.data);
    this.getData().sort(this.compare.bind(this));
    this.fireEvent("onSortEnd", this.data);
    return this.getData()
}, compare: function (f, c) {
    var b = this.getValue(f);
    var a = this.getValue(c);
    if (b < a) {
        return(this.options.sortflag == "asc") ? -1 : 1
    } else {
        if (b > a) {
            return(this.options.sortflag == "asc") ? 1 : -1
        }
    }
    return 0
}, getValue: function (b) {
    var a = "";
    if (this.options.widget == "table") {
        if (!$chk(this.options.sortName)) {
            swordAlert("未指定排序列！！");
            return false
        }
        a = b.tds[this.options.sortName];
        if (a) {
            a = a.value
        } else {
            a = ""
        }
    }
    if (this.options.widget == "array") {
        a = b
    }
    switch (this.options.type.toLowerCase()) {
        case"int":
            return parseInt(a, 10) || 0;
        case"float":
            return parseFloat(a, 10) || 0;
        case"bool":
            return a === true || String(a).toLowerCase() == "true" ? 1 : 0;
        case"string":
        default:
            return a ? a.toString() : ""
    }
}, setData: function (a) {
    this.data = a
}, getData: function () {
    return this.data
}});
var SwordGrid = new Class({Implements: [Events, Options], Extends: PageContainer, $family: {name: "SwordGrid"}, name: "SwordGrid", options: {sword: null, name: null, caption: null, itemX: 200, itemY: 25, dataY: -1, dataX: -1, rows: 20, totalRows: 0, pageNum: 1, fenye: true, bPx: 8, minItemX: 20, showHeader: true, beanname: null, dataFontSize: null, showHeaderMenu: "true", dragWidth: jsR.config.swordGrid.dragWidth || "false", headerHeight: jsR.config.swordGrid.headerHeight || 25, toolConsole: jsR.config.swordGrid.toolConsole || "false", dragColumn: "false", autoHeight: "true", showConsole: "true", checkMoudle: "true", consoleY: "26px", headerY: -1, highQuality: "false", consoleStyle: "button", issort: "true", cache: "false", scrollX: -1, bufferView: "false", bufferDelay: 300, bufferCreateRowDelay: 50, editRows: "false", wordBreak: "false", ptid: null, type: "common", treeSignCol: null, treePcode: "pcode", treeCode: "code", treeEffect: false, extendLayer: 2, treeIt: null, vType: "intime", pNode: null, sGrid_div: null, items: null, data: null, gridData: null, fenyeType: "page", nextOrder: "row", validateShow: "false", showHJ: "false", rowCheckValidator: false, treeRootNum: "false", collapse: "false", onAfterCreateConsole: $empty, onAfterCreateRow: $empty, onBeforeCreateRow: $empty, onAfterInsertRow: $empty, onAfterCreateCell: $empty, onAfterInitData: $empty, onRowClick: $empty, onRowDbClick: $empty, onRowRightClick: $empty, onAfterCreateHeader: $empty, onAllCheckClick: $empty, treeInsert_getCode: function (f, c, b) {
    if (f == null && c == null && b / 1 == 1) {
        return 1
    } else {
        if (f == null && c != null && b / 1 == 1) {
            return c.length + 1
        } else {
            if (f != null && c != null) {
                var a = Math.pow(100, b / 1) + c.length + 1;
                var g = f.getValue(this.options.treeCode);
                return"" + g + a
            }
        }
    }
    return -1
}, treeInsert_getRootPcode: function (a) {
    return 0
}, onBeforeDelete: $empty, onAfterDelete: $empty}, headhash: new Hash(), treeInsertChild: function (b, a, c) {
    this.insertRow(b, a, c, "child")
}, treeInsertBrother: function (b, a, c) {
    this.insertRow(b, a, c, "brother")
}, createCode: function (c, b, a) {
    if ($type(this.options.treeInsert_getCode) == "function") {
        return this.options.treeInsert_getCode.run([c, b, a], this)
    } else {
        return this.getFunc(this.options.treeInsert_getCode)[0](c, b, a)
    }
}, createRootPcode: function (a) {
    if ($type(this.options.treeInsert_getRootPcode) == "function") {
        return this.options.treeInsert_getRootPcode.run([a], this)
    } else {
        return this.getFunc(this.options.treeInsert_getRootPcode)[0](a)
    }
}, tipDiv: null, getTipDiv: function () {
    if (this.tipDiv == null) {
        var f = new Element("div", {"class": "gridTipDiv"});
        var g = new Element("div", {"class": "gridTipItemDiv", name: "hiddenC", html: "" + i18n.gridHide}).inject(f);
        var c = new Element("div", {"class": "gridTipItemDiv", name: "sortAsc", html: "" + i18n.gridEsc}).inject(f);
        var a = new Element("div", {"class": "gridTipItemDiv", name: "sortDesc", html: "" + i18n.gridDesc}).inject(f);
        var b = new Element("div", {"class": "gridTipItemDiv", html: "" + i18n.gridCtrl}).inject(f);
        g.addEvent("click", function (j) {
            j.stop();
            var h = f.header_item_div.get("_for");
            this.hideColumn(h)
        }.bind(this));
        c.addEvent("click", function (j) {
            j.stop();
            var h = f.header_item_div.get("_for");
            this.sortColumn(h, "asc")
        }.bind(this));
        a.addEvent("click", function (j) {
            j.stop();
            var h = f.header_item_div.get("_for");
            this.sortColumn(h, "desc")
        }.bind(this));
        b.addEvent("click", function (h) {
            h.stop();
            this.openCtrl();
            f.setStyle("display", "none")
        }.bind(this));
        this.tipDiv = f
    }
    return this.tipDiv
}, setDataFontSize: function (a) {
    if (!$defined(a)) {
        if (this.options.dataFontSize != null) {
            this.dataDiv().setStyle("font-size", this.options.dataFontSize)
        }
        return
    }
    this.dataDiv().setStyle("font-size", a)
}, openCtrl: function () {
    var b = {sword: "SwordGrid", name: "columns", trs: []};
    this.items().each(function (g) {
        var f = {check: {value: g.get("show") == "false" ? "" : "1"}, caption: {value: g.get("caption")}, name: {value: g.get("name")}};
        b.trs[b.trs.length] = {tds: f}
    });
    var a = this.dataDiv().getStyle("font-size");
    var c = {initData: {data: [b]}, dataFontSize: a};
    swordAlertIframe(jsR.rootPath + "swordweb/widgets/SwordGrid/html/sgCtrl.html", {width: 640, height: 480, param: c, onOk: function (g, f) {
        g.each(function (k) {
            var j = k.getValue("name");
            var h = k.getValue("check");
            if (h == "1") {
                this.showColumn(j)
            } else {
                this.hideColumn(j)
            }
        }.bind(this));
        this.setDataFontSize(f)
    }.bind(this)})
}, showColumn: function (a) {
    this.getCells(a).setStyle("display", "").set("show", "true");
    this.getHeaderEl(a).setStyle("display", "").set("show", "true");
    this.getItemElByName(a).set("show", "true");
    this.buildXY()
}, hideColumn: function (a) {
    this.getCells(a).setStyle("display", "none").set("show", "false");
    this.getHeaderEl(a).setStyle("display", "none").set("show", "false");
    this.getItemElByName(a).set("show", "false");
    if ($chk(this.hjRow)) {
        this.gethjRowEl(a).setStyle("display", "none").set("show", "false")
    }
    this.buildXY()
}, sortColumn: function (b, a) {
    var j = this.getHeaderEl(b)[0];
    if (j.get("dragBoder") == "true") {
        return
    }
    if (this.totalRows() <= 0) {
        return
    }
    if ((this.isServer() && !this.isAllSave()) || (this.isPage() && (this.isInsert() || this.isDelete()))) {
        if (!confirm("当前列表中有数据没有保存，现在执行排序这部分数据将会丢失，是否继续执行排序？")) {
            return
        }
    }
    if (true) {
        var c = this.getSwordSort();
        var h = c.options.sortName;
        var g = b;
        var f = c.options.sortFlag;
        if (h != g) {
            f = "asc"
        } else {
            f == "asc" ? f = "desc" : f = "asc"
        }
        c.options.sortFlag = a || f;
        c.options.sortName = g;
        c.options.sortType = j.get("sortType");
        this.clearCache = true;
        this.loadPage(1);
        this.clearCache = false
    } else {
    }
}, dataDivFxScroll: null, checkError: function (c, a) {
    if ($type(a) == "string") {
        a = [a]
    }
    var b = this.getRowNum(c);
    a.each(function (f) {
        if (this.vObj.doValidate(c.getCell(f)).state) {
            this.removeError(b, f)
        } else {
            this.addError(b, f)
        }
    }.bind(this))
}, errorCells: new Array(), addError: function (c, b) {
    var a = "第" + c + "行|列名:" + b;
    if (this.errorCells.indexOf(a) == -1) {
        this.errorCells[this.errorCells.length] = a
    } else {
        return
    }
}, removeError: function (c, b) {
    var a = "第" + c + "行|列名:" + b;
    if (this.errorCells.indexOf(a) == -1) {
        return
    } else {
        this.errorCells.erase(a)
    }
}, removeRowError: function (b) {
    var a = this.getRowNum(b);
    var c = this.getRow(b);
    c.getChildren("div[name]").each(function (f) {
        this.removeError(a, f.get("name"))
    }.bind(this))
}, removeAllError: function () {
    this.errorCells.empty()
}, isError: function () {
    if (this.errorCells.length == 0) {
        return false
    }
    return true
}, isUpdate: function () {
    if (this.getUpdateRows().length == 0) {
        return false
    }
    return true
}, isInsert: function () {
    if (this.getInsertRows().length == 0) {
        return false
    }
    return true
}, isDelete: function () {
    if (this.getDeleteRows().length == 0) {
        return false
    }
    return true
}, isAllSave: function () {
    return !this.isUpdate() && !this.isInsert() && !this.isDelete()
}, getUpdateRows: function () {
    return this.dataDiv().getChildren('div[status="update"][row]')
}, getInsertRows: function () {
    return this.dataDiv().getChildren('div[status="insert"][row]')
}, getDeleteRows: function () {
    return this.dataDiv().getChildren('div[status="delete"][row]')
}, getCheckedEls: function (b) {
    var a = this.dataDiv().getElements('input[name="' + b + '"][type="checkbox"][checked]');
    if (a.length == 0) {
        a = this.dataDiv().getElements('input[name="' + b + '"][type="radio"][checked]')
    }
    return a
}, getStatusRows: function () {
    return this.getUpdateRows().combine(this.getInsertRows().combine(this.getDeleteRows()))
}, getStatusGirdData: function () {
    if (this.isCP()) {
        var a = new Array();
        this.data().each(function (b) {
            if ($chk(b.status)) {
                a.push(b)
            }
        }, this);
        a.combine(this.getRowsData(this.getInsertRows()));
        return{sword: this.options.sword, name: this.options.name, beanname: this.options.beanname, trs: a}
    } else {
        return this.getRowsGirdData(this.getStatusRows())
    }
}, getStatusGridData: function () {
    return this.getStatusGirdData()
}, getCurPageGirdData: function () {
    return this.getRowsGirdData(this.dataDiv().getChildren())
}, getCurPageGridData: function () {
    return this.getCurPageGirdData()
}, _inCache: function (b) {
    if ((this.rows() * (this.pageNum() - 1) - 1) < b && b < (this.rows() * this.pageNum())) {
        return true
    }
    for (var c = 0, a = this.cachePages.length; c < a; c++) {
        if ((this.rows() * (this.cachePages[c] - 1) - 1) < b && b < (this.rows() * this.cachePages[c])) {
            return true
        }
    }
    return false
}, getAllGridData: function () {
    var a = this.getCurPageGirdData();
    this.data().each(function (c, b) {
        if (!this._inCache(b)) {
            a.trs.include(c)
        }
    }, this);
    return a
}, getColumnSum: function (c, a) {
    var f = 0;
    var b = this.getAllGridData().trs;
    b.each(function (j, h) {
        var g = j.getValue(c);
        g = g ? g / 1 : 0;
        if (["delete", "insert", "update"].contains(a)) {
            if (j.status == a) {
                f += g
            }
        } else {
            f += g
        }
    });
    return f
}, getStatusRowsData: function () {
    return this.getRowsData(this.getStatusRows())
}, createNewRowNum: function () {
    return this.totalRows() + 1
}, validate: function (c) {
    if (!this.options.validateShow) {
        if (this.isError()) {
            var h = [];
            this.errorCells.each(function (j, k) {
                j = j.split(":");
                h.include(j[0] + ":" + this.headhash.get(j[1]))
            }.bind(this));
            var b = $chk(this.options.caption) ? this.options.caption : this.options.name;
            this.alertError("您要提交的表格<strong>[" + b + "]</strong>数据有错误:<br/><strong>[" + h + "]</strong><br/>请修改正确后再提交 ！")
        }
        return !this.isError()
    } else {
        if (!c) {
            this.errorCells.empty()
        }
        var g = this.options.sGrid_data_div.getElements("div.sGrid_data_row_div[status!='delete']");
        var a = false;
        var f = [];
        g.each(function (j) {
            j.getChildren().each(function (m) {
                if (m.get("rule")) {
                    if (!this.vObj.doValidate(m).state) {
                        var k = j.getElement("div[type='rowNum']") ? j.getElement("div[type='rowNum']").get("text") : j.get("rowNum");
                        var l = "第" + k + "行|列名:" + this.headhash.get(m.get("name"));
                        if (f.indexOf(l) == -1) {
                            f[f.length] = l
                        }
                        a = true
                    }
                }
            }, this)
        }, this);
        var b = $chk(this.options.caption) ? this.options.caption : this.options.name;
        if (a) {
            this.alertError("您要提交的表格<strong>[" + b + "]</strong>数据有错误:<br/><strong>[" + f + "]</strong><br/>请修改正确后再提交 ！")
        }
        return !a
    }
}, validateCheckedRow: function (c) {
    var g = this.getCheckedRow(c);
    if (g == null) {
        return true
    }
    if ($type(g) != "array") {
        g = [g]
    }
    var b = false;
    var f = [];
    g.each(function (h) {
        h.getChildren().each(function (k) {
            if (k.get("rule")) {
                if (!this.vObj.doValidate(k).state) {
                    var j = "第" + h.get("rowNum") + "行|列名:" + this.headhash.get(k.get("name"));
                    if (f.indexOf(j) == -1) {
                        f[f.length] = j
                    }
                    b = true
                }
            }
        }, this)
    }, this);
    var a = $chk(this.options.caption) ? this.options.caption : this.options.name;
    if (b) {
        this.alertError("您要提交的表格<strong>[" + a + "]</strong>数据有错误:<br/><strong>[" + f + "]</strong><br/>请修改正确后再提交 ！")
    }
    return !b
}, setText: function (n, g, h) {
    if (n.get("createInput") == "true") {
        var k = n.getElement("input[type=text]");
        k.set("value", h);
        var f = n.get("type");
        if (f == "text") {
            n.set("text", g);
            n.set("createInput", "false")
        }
    } else {
        var a = n.getLast();
        if ($chk(a) && a.get("name") == "treeSignDiv") {
            var b = n.getChildren();
            var l = [];
            b.each(function (o, j) {
                l[j] = o.clone().cloneEvents(o)
            });
            n.set("text", g);
            for (var c = l.length - 1; c >= 0; c--) {
                n.grab(l[c], "top")
            }
        } else {
            n.set("text", g);
            if (n.get("type") == "date") {
                n.set("showvalue", g);
                n.set("realvalue", h)
            }
        }
    }
    if (n.get("type") == "password") {
        var m = this.dealPassword(h);
        n.set("showvalue", m);
        n.set("text", m)
    }
}, updateCell: function (b, c, g, a) {
    var f = this.getRow(b);
    if (!f) {
        return
    }
    this.update(f, b, c, g || c, a);
    if (b.get("rule")) {
        if (b.get("type") != "password") {
            if (this.vObj.doValidate(b).state) {
                this.removeError(f.get("rowNum"), b.get("name"))
            } else {
                this.addError(f.get("rowNum"), b.get("name"))
            }
        }
    }
}, update: function (o, t, r, D, E) {
    if (!o) {
        return
    }
    var f = o.get("status") == "insert";
    var a;
    if ($type(t) == "string") {
        a = o.getCell(t)
    } else {
        a = t;
        t = a.get("name")
    }
    var q = this.getOneRowData(o);
    var G = q.tds[t];
    if (G == undefined) {
        q.tds[t] = {};
        G = q.tds[t]
    }
    if (G.originValue == undefined) {
        G.originValue = G.value || ""
    }
    var s = G.originValue;
    var H = $chk(a);
    if (H) {
        var j = a.get("type");
        if (j == "select" && E != true) {
            var g = this.getItemElByName(t);
            if (g.length > 0) {
                var F = pc.getSelect().dm2mc(a.get("switched") == "true" ? a : g[0], r);
                if ($type(F) == "object") {
                    a.set("html", F.caption);
                    a.set("code", F.code);
                    a.set("caption", F.caption);
                    a.set("realvalue", F.realvalue);
                    D = F.caption;
                    if (r && r.contains("|")) {
                        G.lazydata = r;
                        r = F.code
                    }
                } else {
                    a.set("html", r);
                    a.set("caption", r);
                    a.set("code", r);
                    a.set("realvalue", r);
                    G.lazydata = null
                }
            }
        }
        if (j == "pulltree" && E != true) {
            var w = $w(a.get("treename"));
            if (r.contains("code") && r.contains("caption")) {
                var y = r.split("|");
                if (r.contains("codePath")) {
                    a.set("codePath", y[2].substring("codePath,".length))
                }
                D = y[1].split(",")[1];
                a.set("realvalue", y[0].split(",")[1])
            } else {
                if (w.gridShow != true) {
                    w.select.show();
                    w.options.pNode.setStyle("display", "none");
                    w.select.hide();
                    w.gridShow = true;
                    this.addNextFocusEvent(w.select.selBox)
                }
                var m = r.split(",");
                if (m.length == 0) {
                    var l = new Hash();
                    l.set(w.options.cascadeSign.id, r);
                    var v = w.getTreeNode(l);
                    var C = "";
                    var n = r;
                    if (v) {
                        C = v.get("caption");
                        n = v.get(w.options.cascadeSign.id)
                    } else {
                        C = r
                    }
                    D = C;
                    a.set("realvalue", n)
                } else {
                    var B = "";
                    var c = "";
                    m.each(function (N, K, J) {
                        var M = new Hash();
                        M.set(w.options.cascadeSign.id, N);
                        var L = w.getTreeNode(M);
                        var I = (K == J.length - 1) ? "" : ",";
                        if (L) {
                            c += L.get("caption") + I;
                            B += L.get(w.options.cascadeSign.id) + I
                        } else {
                            c += N + I;
                            B += N + I
                        }
                    });
                    D = c;
                    a.set("realvalue", B)
                }
            }
        }
        if (j == "text") {
            a.set("realvalue", r)
        }
        if (j == "password") {
            a.set("realvalue", this.dealPassword(r));
            a.store("realvalue", r)
        }
        if (j == "radio") {
            if (r == "1" || r == "true") {
                a.getElement("input").set("checked", true)
            }
            if (this.isradioSetChecked) {
                this.radioSetChecked(a)
            }
        }
        var A = a.get("format");
        if ($chk(A)) {
            var z = sword_fmt.convertText(a, r).value;
            a.setSuitableValue(z, r);
            a.set("realvalue", r);
            a.set("showvalue", z)
        } else {
            if (j == "date") {
                var u = this.getCalendar().getShowValue(a, r);
                var h = sword_fmt.convertText(a, u).value;
                a.setSuitableValue(h, r);
                a.set("realvalue", r);
                a.set("showvalue", h)
            } else {
                a.setSuitableValue(D, r)
            }
        }
    }
    if (f) {
        return
    }
    var x = "";
    if (H) {
        if (a.get("type") == "select") {
            var b = a.get("code");
            if (b == null) {
                b = ""
            }
            if (s != b) {
                if (H) {
                    a.addClass("sGrid_data_cell_update_div")
                }
                x = "update"
            } else {
                if (H) {
                    a.removeClass("sGrid_data_cell_update_div")
                }
            }
        } else {
            if (a.get("type") == "date") {
                if (D == null) {
                    D = ""
                }
                if (s != D) {
                    if (H) {
                        a.addClass("sGrid_data_cell_update_div")
                    }
                    x = "update"
                } else {
                    if (H) {
                        a.removeClass("sGrid_data_cell_update_div")
                    }
                }
            } else {
                if (s != r) {
                    if (H) {
                        a.addClass("sGrid_data_cell_update_div")
                    }
                    x = "update"
                } else {
                    if (H) {
                        a.removeClass("sGrid_data_cell_update_div")
                    }
                }
            }
        }
    } else {
        if (s != r) {
            x = "update"
        }
    }
    var k = "";
    if (o.get("status") == "delete") {
        k = "delete"
    } else {
        if (x == "update") {
            k = "update"
        } else {
            for (var p in q.tds) {
                if (q.tds[p]["status"] == "update" && p != t) {
                    k = "update";
                    break
                }
            }
        }
    }
    o.set("status", k);
    if (H) {
        a.set("status", x)
    }
    G.value = r;
    G.originValue = s;
    G.status = x;
    q.status = k
}, updateRow: function (k, j) {
    var g = j.tds;
    var f = [];
    if ($chk(g)) {
        var h = k.getChildren();
        for (var c = 0; c < h.length; c++) {
            var a = h[c];
            var b = a.get("name");
            if (g[b]) {
                this.update(k, a, g[b]["value"], g[b]["showvalue"] || g[b]["value"]);
                f.push(a.get("name"))
            }
        }
        for (var b in g) {
            if (f.contains(b)) {
                continue
            }
            this.update(k, b, g[b]["value"], g[b]["showvalue"] || g[b]["value"])
        }
        k.getChildren().each(function (l) {
            if (l.get("rule")) {
                if (this.vObj.doValidate(l).state) {
                    this.removeError(k.get("rowNum"), l.get("name"))
                } else {
                    this.addError(k.get("rowNum"), l.get("name"))
                }
            }
        }, this)
    }
}, updateData: function (o, u) {
    var n = this, l = n.data().indexOf(o), q = Math.ceil((l + 1) / n.rows()), r = (l + 1) - ((q - 1) * n.rows()), p = n.cachePages.contains(q) || q == n.pageNum();
    if (p) {
        var t = n.dataDiv().getFirst("div[rowNum=" + r + "][pageNum=" + q + "]");
        if (t) {
            this.updateRow(t, u)
        }
    } else {
        var h = o;
        var k = u.tds;
        for (var b in k) {
            var a = k[b]["value"];
            var c = h.tds[b];
            if (c == undefined) {
                h.tds[b] = {};
                c = h.tds[b]
            }
            if (c.originValue == undefined) {
                c.originValue = c.value || ""
            }
            var s = c.originValue;
            var m = "";
            var j = "";
            if (s != a) {
                j = "update"
            }
            if (h.status == "delete") {
                m = "delete"
            } else {
                if (j == "update") {
                    m = "update"
                } else {
                    for (var f in h.tds) {
                        if (h.tds[f]["status"] == "update" && f != b) {
                            m = "update";
                            break
                        }
                    }
                }
            }
            c.value = a;
            c.originValue = s;
            c.status = j;
            h.status = m
        }
    }
}, useWhere: function (a) {
    if (!$chk(a)) {
        return false
    }
    if (this.dataDiv().getChildren(":not(.sGrid_data_row_delete_div)").length == 0) {
        return false
    }
    return true
}, insertRow: function (b, n, o, r, j) {
    if (!$chk(o)) {
        o = this.createNewRowNum()
    }
    if (!$chk(b)) {
        var h = {};
        var t = {tds: h, getValue: function () {
        }};
        b = t
    }
    if (!$chk(n)) {
        n = this.items()
    }
    var s = null;
    if (this.options.type == "tree") {
        if (!$chk(r)) {
            alert("树形表格请使用treeInsertChild或者treeInsertBrother来新增行。");
            return
        }
        var f = this.getCheckedRow();
        if (this.dataDiv().getChildren("div[status!=delete][row]").length <= 0) {
            var c = this.createCode(null, null, 1);
            var g = this.createRootPcode(null);
            b.tds[this.options.treeCode] = {value: c};
            b.tds[this.options.treePcode] = {value: g};
            s = this.createTreeRow(b, o - 1, null, 1, "leaf", "insert", n);
            s.inject(this.dataDiv())
        } else {
            if (f == null) {
                alert("" + i18n.gridInsert);
                return
            } else {
                if (r == "child") {
                    var p = this.getOneRowData(f);
                    var g = p.getValue(this.options.treeCode);
                    var q = f.getElement("[code=" + g + "]");
                    var m = q.get("treeLevel") / 1 + 1;
                    if (q.get("signType") == "plus") {
                        this.treeClick(q)
                    }
                    var l = this.getRowsData(this.dataDiv().getElements("[pcode=" + g + "]"));
                    var c = this.createCode(p, l, m);
                    b.tds[this.options.treeCode] = {value: c};
                    b.tds[this.options.treePcode] = {value: g};
                    s = this.createTreeRow(b, o - 1, null, m, "leaf", "insert", n);
                    s.inject(f, "after");
                    var k = q.getElement("[name=treeSignDiv]");
                    if (k.hasClass("grid_sign_leaf")) {
                        q.set("childNodesCreated", true);
                        k.removeClass("grid_sign_leaf");
                        k.addClass("grid_sign_minus");
                        q.set("signType", "minus")
                    }
                } else {
                    if (r == "brother") {
                        var a = f.getElement("[name=" + this.options.treeSignCol + "]");
                        var m = a.get("treeLevel") / 1;
                        var g = a.get("pcode");
                        var p = this.getOneRowData(this.dataDiv().getElement("[code=" + g + "]"));
                        var l = this.getRowsData(this.dataDiv().getElements("[treeLevel=" + m + "]"));
                        var c = this.createCode(p, l, m);
                        b.tds[this.options.treeCode] = {value: c};
                        b.tds[this.options.treePcode] = {value: g};
                        s = this.createTreeRow(b, o - 1, null, m, "leaf", "insert", n);
                        if (j && ["top", "bottom"].contains(j)) {
                            s.inject(this.dataDiv(), j)
                        } else {
                            s.inject(f, "before")
                        }
                    }
                }
            }
        }
    } else {
        var f;
        if (this.useWhere(j)) {
            if (["before", "after"].contains(j)) {
                f = this.getCheckedRow();
                if (!f) {
                    alert("请先选择行！");
                    return
                }
            }
        }
        s = this.createRow(o, b, n, "insert");
        if (this.useWhere(j)) {
            if (["before", "after"].contains(j)) {
                s.inject(f, j);
                this.getDataDivFxScroll().toElement(s)
            } else {
                if (["top", "bottom"].contains(j)) {
                    s.inject(this.dataDiv(), j);
                    j == "top" ? this.getDataDivFxScroll().toTop() : this.getDataDivFxScroll().toBottom()
                }
            }
        } else {
            s.inject(this.dataDiv());
            this.getDataDivFxScroll().toBottom()
        }
        s.addClass("sGrid_data_row_insert_div");
        s.getChildren().each(function (u) {
            if (u.get("rule")) {
                if (!this.vObj.doValidate(u).state) {
                    u.addClass("sGrid_data_cell_insert_error_div");
                    this.addError(s.get("rowNum"), u.get("name"));
                    u.addEvent("click", function () {
                        u.removeClass("sGrid_data_cell_insert_error_div")
                    }.bind(this))
                }
            }
        }, this)
    }
    this.options.totalRows = this.options.totalRows / 1 + 1;
    this.refreshConsole();
    this.buildXY();
    this.fireEvent("onAfterInsertRow", [b, s, n, this]);
    return s
}, insert: function (a) {
    var b = a;
    if ($type(a) != "array") {
        b = [a]
    }
    if (this.isServer()) {
    } else {
    }
    this.insertData = []
}, deleting: function (c) {
    var f = this.getRow(c);
    var a = f.get("status");
    f.addClass("sGrid_data_row_delete_div");
    this.removeRowError(c);
    if (a == "insert") {
        this.deleteRow(c);
        return null
    }
    f.set("status", "delete");
    var b = this.getRealRowNum(c);
    this.data()[b - 1]["status"] = "delete";
    f.retrieve("rowData")["status"] = "delete";
    this.deletingRowRowNum(c);
    this.buildXY();
    this.scrollHeader();
    this.rereshHjRowData();
    return f
}, dealRowNumAfterDelete: function (c) {
    if (!this.haveRowNum) {
        return
    }
    var a = c.getElement("div[type=rowNum]").get("text") / 1;
    this.deleteRs.push(a);
    var b = this.dataDiv().getElements("div[type=rowNum]");
    b.each(function (f) {
        var g = f.get("text") / 1;
        if (g > a) {
            f.set("text", g - 1)
        }
    })
}, deleteRs: [], rollback: function (a) {
    if ($type(a) == "array") {
        a.each(function (b) {
            this.rollbackRow(b)
        }, this)
    } else {
        this.rollbackRow(a)
    }
}, rollbackRow: function (b) {
    var a = b.get("status");
    if (a == "update") {
        b.getChildren('*[status="update"]').each(function (c) {
            var f = this.getCellOriginValue(c);
            this.updateCell(c, f)
        }, this)
    } else {
        if (a == "insert") {
        } else {
            if (a == "delete") {
            }
        }
    }
}, getCellOriginValue: function (a) {
    var f = a.get("name");
    var c = this.getOneRowData(a);
    var b = c.tds[f];
    if (b == undefined) {
        return""
    }
    if (b.originValue == undefined) {
        return b.value || ""
    }
    return b.originValue
}, commit: function (a) {
    if (arguments.length == 0) {
        a = this.getStatusRows()
    }
    if ($type(a) == "array") {
        a.each(function (b) {
            this.commitRow(b)
        }, this)
    } else {
        this.commitRow(a)
    }
    this.data().each(function (f, c) {
        if (!this._inCache(c)) {
            var b = f.status;
            if ($chk(b)) {
                f.status = ""
            }
        }
    }, this)
}, commitRow: function (b) {
    var a = b.get("status");
    if (a == "update") {
        this.commitUpdateRow(b)
    } else {
        if (a == "insert") {
            this.commitInsertRow(b)
        } else {
            if (a == "delete") {
                this.commitDeleteRow(b)
            }
        }
    }
}, commitUpdateRow: function (l) {
    var j = this.getOneRowData(l);
    var f = j.tds;
    for (var a in f) {
        var b = f[a]["status"];
        if (b == "update") {
            var k = "";
            var h = l.getCell(a);
            if ($defined(h)) {
                var g = h.get("type");
                if (g == "select") {
                    k = h.get("code") || ""
                } else {
                    if (g == "date") {
                        k = h.get("text") || ""
                    } else {
                        if (g == "checkbox" || g == "radio") {
                            k = h.getElement("input[type=" + g + "]").get("checked") ? "1" : "0"
                        } else {
                            if (g == "file2") {
                                var c = h.retrieve("up");
                                k = c.getValue();
                                f[a].tmp = undefined
                            } else {
                                if (g == "password") {
                                    k = h.retrieve("realvalue") || ""
                                } else {
                                    k = h.get("realvalue") || ""
                                }
                            }
                        }
                    }
                }
            } else {
                k = f[a]["value"]
            }
            f[a]["originValue"] = k;
            f[a]["status"] = ""
        }
    }
    j.status = "";
    l.set("status", "")
}, commitInsertRow: function (c) {
    var b = this.data().length;
    var a = this.getOneRowData(c);
    a.status = "";
    c.store("rowData", a);
    this.data().push(a);
    c.set("rowNum", b + 1);
    c.set("status", "");
    c.removeClass("sGrid_data_row_insert_div");
    this.createRebuildButton()
}, commitDeleteRow: function (a) {
    a.set("status", "");
    this.deleteRow(a)
}, fenyeType: function () {
    return this.options.fenyeType
}, isServer: function () {
    if (this.fenyeType() == "server") {
        return true
    }
    return false
}, isPage: function () {
    return !this.isServer()
}, itemX: function () {
    return this.options.itemX / 1
}, itemY: function () {
    return this.options.itemY / 1
}, dataY: function () {
    return this.options.dataY / 1
}, panel: function () {
    return this.options.panel
}, header: function () {
    return this.options.sGrid_header_div
}, dataDiv: function () {
    return this.options.sGrid_data_div
}, console: function () {
    return this.options.sGrid_console_div
}, consoleItems: function () {
    return this.options.consoleItems
}, sGrid_div: function () {
    return this.options.sGrid_div
}, earseEvent: function (b, a) {
    a.each(function (g) {
        var c = b.get(g);
        if (c) {
            if (Browser.Engine.trident4 || Browser.Engine.trident5) {
                c += "";
                c = c.substring(c.indexOf("{") + 1, c.lastIndexOf("}"))
            }
            b.set("_" + g, c);
            b.erase(g)
        }
    })
}, items: function () {
    var a = this.options.pNode.getChildren(">div:not([console])[name]");
    if (this.intiItems) {
        return a
    }
    this.intiItems = true;
    a.each(function (c) {
        var b = c.get("type");
        this.earseEvent(c, ["onblur", "onclick"]);
        if ((["edit", "detail", "delete", "deleting"].contains(c.get("act")) && !["a"].contains(b)) || ["button"].contains(b)) {
            c.set("buttonEl", "true")
        } else {
            c.set("dataEl", "true")
        }
        c.addClass("sGrid_data_row_item_div");
        c.set("style", c.get("css"));
        c.setStyle("width", this.getItemX(c))
    }, this);
    this.getLastShowItemEl().setStyle("border-right", "none");
    return a
}, getItemElByName: function (a) {
    return this.options.pNode.getChildren("div:not([console])[name=" + a + "]'")
}, getLastShowItemEl: function () {
    var a = this.options.pNode.getChildren("div:not([console]):not([show=false])[name]");
    return a[a.length - 1]
}, rows: function () {
    if (this.options.fenye == "false") {
        return this.options.totalRows / 1
    }
    return this.options.rows / 1
}, pageNum: function () {
    return this.options.pageNum / 1
}, data: function () {
    if (!$chk(this.options.data)) {
        this.options.data = []
    }
    return this.options.data
}, getHeaderCheckboxs: function () {
    return this.header().getElements("input[type=checkbox]")
}, getHeaderCheckboxs_checked: function () {
    return this.header().getElements("input[type=checkbox][checked]")
}, getHeaderCheckboxs_noneChecked: function () {
    return this.header().getElements("input[type=checkbox]:not([checked])")
}, getHeaderCheckboxByName: function (a) {
    var b = this.header().getElement("div[_for=" + a + "]");
    if (b) {
        return b.getElement("input[type=checkbox]")
    }
    return null
}, allInCache: function () {
    if (!this.cache()) {
        return false
    }
    if (this.cachePages.length == this.totalPage()) {
        return true
    }
    if ((this.cachePages.length == this.totalPage() - 1) && !(this.cachePages.contains(this.pageNum()))) {
        return true
    }
    return false
}, totalRows: function () {
    return this.options.totalRows / 1
}, totalPage: function () {
    var b = this.totalRows() % this.rows();
    var a = (this.totalRows() / this.rows()).toInt();
    if (b != 0) {
        a++
    }
    return a
}, consolePage: function () {
    return this.options.sGrid_console_page_lable
}, consoleTotalPage: function () {
    return this.options.sGrid_console_totalPage_lable
}, consoleTotalRows: function () {
    return this.options.sGrid_console_totalRows_lable
}, consoleRows: function () {
    return this.options.sGrid_console_rows_lable
}, initialize: function () {
}, getCalculatedRowHeight: function () {
    return this.options.itemY + 1
}, getVisibleRowCount: function () {
    var b = this.getCalculatedRowHeight(), a = this.scrollDiv.clientHeight + this.itemY();
    return(a < 1) ? 0 : Math.ceil(a / b)
}, getVisibleRows: function () {
    var a = this.getVisibleRowCount(), b = this.scrollDiv.scrollTop, c = (b === 0 ? 0 : Math.floor(b / this.getCalculatedRowHeight()) - 1);
    return{first: Math.max(c, 0), last: Math.min(c + a - 1, this.options.fenye == "false" ? (this.totalRows() - 1) : (this.rows() - 1))}
}, scrollHeader: function () {
    this.header().setStyle("top", this.scrollDiv.getScrollTop());
    if (this.hjRow) {
        this.scrollHjRow()
    }
}, autoScroll: false, nextRowScroll: false, dealScroll: function () {
    if (!this.autoScroll) {
        this.dealScroll4FloatBox()
    }
    this.scrollHeader();
    if (this.options.bufferView != "true") {
        return
    }
    if (!this.renderTask) {
        this.renderTask = new DelayedTask(this.bufferCreatRow, this)
    }
    this.renderTask.delay(this.options.bufferDelay / 1)
}, dealScroll4FloatBox: function () {
    var c = this.getCheckedRow();
    if (c) {
        var b = c.getElement("input[type=text]");
        if (b) {
            var a = b.retrieve("widgetObj");
            if (a && !this.nextRowScroll) {
                a.hide();
                if (a.execGridOnFinished) {
                    a.execGridOnFinished()
                }
            }
            if (this.nextRowScroll) {
                this.nextRowScroll = false
            }
        }
    }
}, bufferCreatRow: function () {
    var a = this.getVisibleRows();
    this.delayCreateBufferRow.delay(this.options.bufferCreateRowDelay / 1, this, [this.dataDiv().childNodes, a.first, a.last, a.first])
}, delayCreateBufferRow: function (c, g, a, b) {
    var f = c[b];
    if (f.childNodes.length == 0) {
        this.createRow(b + 1, f.retrieve("rowData"), this.createRowItems, null, f)
    }
    b++;
    if (b <= a) {
        this.delayCreateBufferRow.delay(this.options.bufferCreateRowDelay / 1, this, [c, g, a, b])
    }
}, initParam: function (h) {
    this.htmlOptions(h);
    var j = pc.widgetFactory.create("SwordValidator");
    j.initParam(this.options.vType);
    this.vObj = j;
    if (!window.tooltips) {
        window.tooltips = pageContainer.create("SwordToolTips")
    }
    this.celltooltips = window.tooltips;
    this.options.pNode.getChildren("div[type=userdefine]").setStyle("display", "none");
    this.options.pNode.getChildren("div[type=pulltree]").each(function (c) {
        $w(c.get("treename")).addEvent("onFinish", function () {
            if (!c.get("notFirst")) {
                $w(c.get("treename")).options.pNode.setStyle("display", "none");
                c.set("notFirst", "true")
            }
        })
    });
    this.options.consoleItems = this.options.pNode.getChildren(">div[console]");
    var n = new Element("div", {"class": "sGrid_div"}).inject(this.options.pNode);
    this.options.sGrid_div = n;
    if (this.options.caption) {
        this.createPanel(n, this.options.caption)
    }
    this.createToolConsole(n);
    this.scrollDiv = new Element("div", {styles: {overflow: "auto", width: "100%"}, events: {scroll: this.dealScroll.bind(this)}}).inject(this.sGrid_div());
    if (this.options.wordBreak == "true") {
        var o = (Browser.Engine.trident4 || Browser.Engine.trident5) ? "wordBreak_ie67" : "wordBreak";
        this.scrollDiv.addClass(o)
    }
    if (Browser.Engine.trident4 || Browser.Engine.trident5) {
        this.scrollDiv.setStyle("position", "relative");
        if (this.options.scrollX == -1) {
            this.scrollDiv.setStyle("overflow-x", "hidden")
        }
        var p = this.items();
        var l = p.length;
        var b = 0;
        for (var m = 0; m < l; m++) {
            var s = p[m];
            var k = s.get("x");
            var g = /^\d+(.\d+)?%$/;
            if (k != null && k != 0 && g.test(k)) {
                var r = Number(k.substring(0, k.length - 1));
                b = b + r;
                if (b > 99) {
                    var q = r - (b - 98);
                    q < 0 ? q = 0 + "%" : q = q + "%";
                    s.set("x", q);
                    s.setStyle("width", q);
                    break
                }
            }
        }
    }
    var a = new Element("div", {"class": "sGrid_header_div"}).inject(this.scrollDiv);
    if (this.options.wordBreak != "true") {
        a.setStyle("height", "25px")
    }
    if (this.options.headerY != -1) {
        a.setStyle("height", this.options.headerY)
    }
    this.options.sGrid_header_div = a;
    var t = new Element("div", {"class": "sGrid_data_div"}).inject(this.scrollDiv);
    this.options.sGrid_data_div = t;
    var f = new Element("div", {"class": "sGrid_console_div", styles: {height: this.options.consoleY}}).inject(this.sGrid_div());
    this.options.sGrid_console_div = f;
    if (this.options.showConsole != "true") {
        f.setStyle("display", "none")
    }
    this.setDataFontSize();
    this.buildHeadr();
    this.createHjRow();
    this.buildConsole();
    this.buildXY();
    this.changeTableState()
}, changeTableState: function () {
    if (this.options.collapse == "true") {
        this.collapseTable()
    }
}, createHjRow: function () {
    if (this.options.showHJ == "true") {
        var a = this.options.sGrid_header_div.clone(false);
        a.removeClass("sGrid_header_div").addClass("sGrid_hj_row_div");
        this.items().each(function (c, b) {
            var f = c.clone();
            if (f.get("show") != "false") {
                f.removeClass("sGrid_data_row_item_div").addClass("sGrid_hj_row_item_div").setProperties({html: "-", realvalue: "-", title: "-", showvalue: "-", type: "label"}).inject(a)
            }
            if (f.get("isHjLabel") == "true") {
                f.setProperties({html: "合计", title: "合计"}).setStyle("text-align", "center").removeProperties("realvalue", "showvalue")
            }
        });
        a.setStyles({height: 25, "border-top": 0}).inject(this.dataDiv(), "after");
        if (this.options.scrollX > "100%") {
            a.setStyle("width", this.options.scrollX)
        }
        if (Browser.Engine.trident6 || Browser.Engine.trident7) {
            this.hjRow = a.clone();
            this.hjRow.inject(a, "after");
            this.scrollHjRow()
        } else {
            this.hjRow = a
        }
    }
}, rereshHjRowData: function () {
    if (this.hjRow) {
        this.hjRow.getElements("div").each(function (c, a) {
            var g = c.get("name");
            if (c.get("hj") && g) {
                var b = this.hjRow.getElement("div[name='" + g + "']");
                b.setStyle("text-align", "right");
                c.get("format") ? b.set("format", c.get("format")) : null;
                var f = html = this.getHj(g) || "";
                if (b.get("format")) {
                    f = sword_fmt.convertText(b, f).value
                }
                b.set({text: f, realvalue: html || "", title: f, isHj: "true"})
            }
        }.bind(this))
    }
}, scrollHjRow: function () {
    var c = this.scrollDiv.getHeight();
    var b = this.scrollDiv.getScrollHeight();
    var a;
    if (Browser.Engine.trident4 || Browser.Engine.trident5) {
        if (c <= b) {
            a = c - b + this.scrollDiv.getScrollTop();
            if (this.options.scrollX > "100%") {
                a = a - 17
            }
            this.hjRow.setStyle("top", a)
        } else {
            this.hjRow.setStyle("top", 0)
        }
    } else {
        if (c < b) {
            a = c - b + this.scrollDiv.getScrollTop() - 25;
            if (this.options.scrollX > "100%") {
                a = a - 17
            }
            this.hjRow.setStyle("top", a)
        } else {
            this.hjRow.setStyle("top", -25)
        }
    }
}, setX: function (g, a) {
    var f = this.getHeaderEl(g)[0];
    var b = this.getItemElByName(g)[0];
    f.setStyle("width", a);
    if ($chk(this.hjRow)) {
        var c = this.gethjRowEl(g)[0];
        c.setStyle("width", a);
        c.set("x", a)
    }
    this.dataDiv().getElements(".sGrid_data_row_item_div[name=" + g + "]").setStyle("width", a);
    b.set("x", a);
    b.setStyle("width", a);
    this.buildX()
}, getDragMaxX: function () {
    var a = 0;
    this.header().getChildren().getWidth().each(function (c) {
        a += c
    });
    var b = this.header().getWidth();
    return b - a - b * 0.01
}, getNextShow: function (a) {
    return a.getNext(":not([show=false])")
}, getNextMaxX: function (a) {
    return this.getNextShow(a) ? this.getNextShow(a).getWidth() - 20 : 0
}, getBorderDiv: function () {
    if (!$chk(this.borderDiv)) {
        this.borderDiv = new Element("div", {"class": "sGrid_border_div"}).inject(document.body);
        this.borderDiv.drag = new Drag.Move(this.borderDiv, {snap: 0, onComplete: function (c) {
            var f = c.headerItemDiv;
            var n = c.stManager;
            var l = c.maxX;
            var g = n.getNextShow(f);
            var h = f.getWidth() - 1;
            var p = g ? g.getWidth() - 1 : 0;
            var m = c._getPosition().x - f._getPosition().x;
            var o = f.get("_for");
            var k = g.get("_for");
            var b = m;
            var a = 0;
            var j = n.getItemElByName(f.get("_for"))[0];
            if (j.get("x")) {
                if (j.get("x").contains("%")) {
                    m = m / n.header().getWidth() * 100 + "%"
                }
            }
            if (b < h) {
                a = (p + (h - b)) / n.header().getWidth() * 100 + "%";
                if (n.options.pNode.get("scrollx") && parseInt(n.options.pNode.get("scrollx")) > 100) {
                    a = p + (h - b)
                }
                if (g) {
                    g.setStyle("width", a);
                    n.getNextShow(j).set("x", a).setStyle("width", a)
                }
            } else {
                a = (p - (b - h - l)) / n.header().getWidth() * 100 + "%";
                if (n.options.pNode.get("scrollx") && parseInt(n.options.pNode.get("scrollx")) > 100) {
                    a = p + (h - b)
                }
                if (g) {
                    g.setStyle("width", a);
                    n.getNextShow(j).set("x", a).setStyle("width", a)
                }
            }
            f.setStyle("width", m);
            n.dataDiv().getElements(".sGrid_data_row_item_div[name=" + f.get("_for") + "]").each(function (q) {
                q.setStyle("width", m);
                if (a != 0 && g) {
                    n.getNextShow(q).setStyle("width", a)
                }
            });
            j.set("x", m);
            j.setStyle("width", m);
            if (n.hjRow) {
                fhjCell = n.hjRow.getElement("div[name='" + o + "']");
                fhjCell.setStyle("width", m);
                shjCell = n.hjRow.getElement("div[name='" + k + "']");
                shjCell.setStyle("width", a)
            }
            n.buildX();
            c.setStyle("display", "none");
            if (Browser.Engine.trident4 || Browser.Engine.trident5) {
                n.getHeaderMaskDiv().setStyle("display", "none")
            }
        }, onDrop: function (a, b) {
        }, onCancel: function (a) {
            a.setStyle("display", "none")
        }, onStart: function (b) {
            if (!Browser.Engine.trident4 && !Browser.Engine.trident5) {
                return
            }
            var a = b.stManager;
            a.getHeaderMaskDiv().setStyles({left: a.header().getPosition().x, top: a.header().getPosition().y, width: a.header().getWidth(), display: ""})
        }})
    }
    return this.borderDiv
}, getHeaderMaskDiv: function () {
    if (!this.headerMaskDiv) {
        this.headerMaskDiv = this.header().clone(false);
        this.headerMaskDiv.setStyles({position: "absolute", background: "white", border: 0, display: "none", height: this.header().getHeight(), opacity: 0.1});
        this.headerMaskDiv.inject(document.body)
    }
    return this.headerMaskDiv
}, headerM: new Element("div", {"class": "sGrid_header_item_div", styles: {"border-right-style": "solid", "border-right-width": "1px"}}), buildHeadr: function () {
    if (this.options.showHeader == false || this.options.showHeader == "false") {
        this.header().setStyle("height", 0);
        this.header().setStyle("border", 0);
        this.header().setStyle("overflow", "hidden")
    }
    var a = this.getLastShowItemEl().get("name");
    this.items().each(function (m) {
        var b = m.get("name");
        var n = m.get("caption");
        var j = m.get("type");
        var l = m.get("allchk");
        this.headhash.set(b, n);
        var c = this.headerM.clone(false).set({_for: b, sortType: m.get("sortType") || ""}).inject(this.header());
        if (a == b) {
            c.setStyle("border-right", "none")
        }
        if (this.options.headerY != -1) {
            c.setStyles({height: this.options.headerY, "line-height": (n && n.contains("<br>")) ? this.options.headerY / 2 : this.options.headerY})
        }
        if (j == "rowNum") {
            this.haveRowNum = true
        }
        if (j == "checkbox" && l != "false") {
            var g = new Element("input", {type: "checkbox", "class": "sGrid_header_checkbox", events: {click: function (v) {
                var p = new Event(v).target;
                var o = p.get("checked");
                var t = this.dataDiv().getChildren();
                if (this.isCP()) {
                    m.set("userClicked", "true");
                    m.set("checkAllFlag", "" + o)
                }
                if (t.length != 0) {
                    var u = -1;
                    var q = t[0].getChildren();
                    for (var s = 0; s < q.length; s++) {
                        if (q[s].get("name") == b) {
                            u = s;
                            break
                        }
                    }
                    if (u != -1) {
                        for (var y = 0; y < t.length; y++) {
                            var x = t[y].getChildren()[u].getFirst('input[name="' + b + '"][type="checkbox"]:not(:disabled)');
                            if (x && !$chk(x.get("disabled"))) {
                                x.set("checked", o);
                                if (m.get("data") == "true") {
                                    this.updateCell(x.getParent(), o ? "1" : "0")
                                }
                            }
                        }
                    }
                }
                if (o && this.options.rowCheckValidator != false && this.options.rowCheckValidator != "false") {
                    var z = this.getCheckedRow(b);
                    if (z && z[0]) {
                        var r = z[0].getElement(">.sGrid_data_row_item_checkbox:checked:not(:disabled)");
                        if (r) {
                            r.fireEvent("change", [r])
                        }
                    }
                }
                this.fireEvent("onAllCheckClick", [b, p])
            }.bind(this)}}).inject(c);
            if (this.options.headerY != -1) {
                g.setStyles({height: this.options.headerY, "line-height": this.options.headerY})
            }
        }
        if (m.getAttribute("sort") != "false" && this.options.issort != "false") {
            if (!["checkbox", "button", "rowNum", "rowNumOnePage", "radio", "file2"].contains(j)) {
                if (!(m.get("tid") && m.get("type") != "a")) {
                    c.addEvent("click", function (o) {
                        this.sortColumn(b)
                    }.bind(this));
                    c.hoverClass("sGrid_header_item_div_hover")
                }
            }
        }
        if ((!["checkbox"].contains(j)) || (l == "false")) {
            var k = m.get("rule");
            var f = k ? k.contains("must") : false;
            new Element("div", {"class": "sGrid_header_text_div", html: f ? "<span class='red'>*</span>" + n : n, title: n}).inject(c)
        }
        this.setItemX(m, c);
        if (this.options.dragWidth == true || this.options.dragWidth == "true") {
            if (["checkbox", "radio"].contains(j)) {
            } else {
                var h = new Element("div", {"class": "sGrid_header_border_div"}).inject(c, "top");
                h.addEvent("mousedown", function (t) {
                    var p = this.scrollDiv.getHeight();
                    var u = c.getPosition().y;
                    var o = c._getPosition().x;
                    var q = this.getBorderDiv();
                    q.setStyles({height: p + "px", left: t.page.x, top: u, display: ""});
                    q.headerItemDiv = c;
                    q.stManager = this;
                    var s = this.getDragMaxX();
                    var r = this.getNextMaxX(c);
                    q.maxX = s;
                    q.drag.options.limit = {x: [o + this.options.minItemX / 1, t.page.x + s + r], y: [u, u]};
                    q.drag.bound.start(t);
                    t.stop()
                }.bind(this));
                h.addEvent("click", function (o) {
                    o.stop()
                })
            }
        }
        if (m.get("show") == "false" || m.get("x") == 0) {
            c.set("show", "false");
            if (Browser.Engine.trident4) {
                c.setStyle("width", 0).setStyle("border", "0px").setStyle("height", 0)
            } else {
                c.setStyle("display", "none")
            }
        }
    }.bind(this));
    if (this.options.dragColumn == true || this.options.dragColumn == "true") {
        new DragTable(this.header(), {clone: function (c, b, f) {
            return b.clone(false).set("name", null).setStyles({margin: "0px", position: "absolute", visibility: "hidden", width: b.getWidth(), height: b.getHeight(), border: "2px dotted black", "background-color": "white", cursor: "move"}).inject(f).position(b.getPosition(b.getOffsetParent()))
        }, revert: true, initialize: function () {
        }, onStart: function (b) {
            b.addClass("sGrid_header_drag_start_div")
        }, onSort: this.dragHeader.bind(this), onEnter: function (c, b) {
            b.addClass("sGrid_header_drag_enter_div")
        }, onLeave: function (c, b) {
            b.removeClass("sGrid_header_drag_enter_div")
        }})
    }
    this.fireEvent("onAfterCreateHeader")
}, consoleInputRows: function () {
    if (!this.consoleInputRowsEl) {
        this.consoleInputRowsEl = new Element("input", {value: this.rows(), rule: "numberInt_must_contrast;>=1;<=50", msg: "请输入一个大于0的整数", styles: {width: 20}}).inject(this.consoleRows(), "after");
        this.vObj._add(this.consoleInputRowsEl);
        this.consoleInputRowsEl.addEvent("blur", function () {
            this.consoleRows().setStyle("display", "");
            this.consoleInputRowsEl.setStyle("display", "none");
            if (!this.vObj.validate(this.consoleInputRowsEl)) {
                this.vObj.clearElTip(this.consoleInputRowsEl);
                return
            }
            var a = this.consoleInputRowsEl.get("value") / 1;
            if (a == this.rows()) {
                return
            }
            this.options.rows = a;
            if (this.isServer()) {
                this.loadPage(1)
            } else {
                this.initData(this.options.gridData)
            }
        }.bind(this))
    }
    return this.consoleInputRowsEl
}, buildConsole: function () {
    this.createConsolePageButton();
    if (this.options.editRows == "true" && this.isPage() && this.options.fenye != "false") {
        this.consoleRows().setStyles({cursor: "pointer", "text-decoration": "underline", color: "blue"});
        this.consoleRows().addEvent("click", function () {
            this.consoleInputRows().setStyle("display", "");
            this.consoleInputRows().select();
            this.consoleRows().setStyle("display", "none")
        }.bind(this))
    }
    if (this.consoleButton_first) {
        this.consoleButton_first.addEvent("click", function () {
            if (this.pageNum() == 1) {
                this.alert("" + i18n.gridFirst);
                return
            }
            this.loadPage(1)
        }.bind(this))
    }
    if (this.consoleButton_last) {
        this.consoleButton_last.addEvent("click", function () {
            if (this.pageNum() == this.totalPage()) {
                this.alert("" + i18n.gridLast);
                return
            }
            this.loadPage(this.totalPage())
        }.bind(this))
    }
    if (this.consoleButton_next) {
        this.consoleButton_next.addEvent("click", function () {
            if (this.pageNum() + 1 > this.totalPage()) {
                this.alert("" + i18n.gridLast);
                return
            }
            this.loadPage(this.pageNum() + 1)
        }.bind(this))
    }
    if (this.consoleButton_prev) {
        this.consoleButton_prev.addEvent("click", function () {
            if (this.pageNum() - 1 <= 0) {
                this.alert("" + i18n.gridFirst);
                return
            }
            this.loadPage(this.pageNum() - 1)
        }.bind(this))
    }
    if (this.consoleButton_ok) {
        this.consoleButton_ok.addEvent("click", this.clickQueDing.bind(this))
    }
    this.autoInsertFunc = null;
    if (this.consoleItems()) {
        this.consoleItems().each(function (k, j) {
            var g = k.get("console");
            var f = k.get("tid");
            var a = k.get("ctrl");
            var c = k.get("check");
            var b = k.get("name");
            if (g == "delete") {
                var l = k.get("caption") || "删行";
                new Element("input", {"class": "sGrid_console_item_button", type: "button", value: l, name: b, events: {click: function () {
                    this.deleteRows({tid: f, ctrl: a, check: c, onSuccess: this.getFunc(k.get("onSuccess"))[0], onError: this.getFunc(k.get("onError"))[0], postType: k.get("postType"), popMes: k.get("popMes"), delConfirm: k.get("delConfirm")})
                }.bind(this)}}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.console())
            } else {
                if (g == "deleting") {
                    var l = k.get("caption") || "删行";
                    new Element("input", {"class": "sGrid_console_item_button", value: l, type: "button", name: b, events: {click: function () {
                        var n;
                        if (!$defined(c)) {
                            n = this.dataDiv().getChildren("div.sGrid_data_row_click_div:not([status=delete]):not([cache=true])")
                        } else {
                            n = this.dataDiv().getElements('div:not([status=delete]) div input[name="' + c + '"][type="checkbox"][checked]');
                            if (n.length == 0) {
                                n = this.dataDiv().getElements('div:not([status=delete]) div input[name="' + c + '"][type="radio"][checked]')
                            }
                        }
                        if (n.length == 0) {
                            pc.alert("请至少选择一行！");
                            return
                        }
                        n.each(function (o) {
                            this.deleting(o)
                        }, this)
                    }.bind(this)}}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.console())
                } else {
                    if (g == "insert") {
                        var l = k.get("caption") || "增行";
                        new Element("input", {"class": "sGrid_console_item_button", value: l, type: "button", name: b, events: {click: function () {
                            this.insertRow(this.getDataObjByInsertItem(k), this.combineItems(k), this.createNewRowNum(), null, k.get("where"))
                        }.bind(this)}}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.console());
                        if (k.get("autoInsert") == "true") {
                            this.autoInsertFunc = function () {
                                this.insertRow(this.getDataObjByInsertItem(k), this.combineItems(k), this.createNewRowNum(), null, k.get("where"))
                            }
                        }
                    } else {
                        if (g == "treeInsertBrother") {
                            var l = k.get("caption") || "添加兄弟节点";
                            new Element("input", {"class": "sGrid_console_item_button", value: l, type: "button", name: b, events: {click: function () {
                                this.treeInsertBrother(this.getDataObjByInsertItem(k), this.combineItems(k), this.createNewRowNum())
                            }.bind(this)}}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.console());
                            if (k.get("autoInsert") == "true") {
                                this.autoInsertFunc = function () {
                                    this.treeInsertBrother(this.getDataObjByInsertItem(k), this.combineItems(k), this.createNewRowNum())
                                }
                            }
                        } else {
                            if (g == "treeInsertChild") {
                                var l = k.get("caption") || "添加孩子结点";
                                var m = function () {
                                    var o = 0;
                                    var q = this.getCheckedRow();
                                    if (q) {
                                        o = q.getElement("div[treeLevel]").get("treeLevel") / 1
                                    }
                                    var n = k.get("maxLevel") || -1;
                                    n = n / 1;
                                    if (n != -1 && o + 1 > n) {
                                        var p = k.get("maxMes") || "因为限制了增行的最大层数，所以不能在此处增行。";
                                        swordAlert(p);
                                        return
                                    }
                                    this.treeInsertChild(this.getDataObjByInsertItem(k), this.combineItems(k), this.createNewRowNum())
                                };
                                new Element("input", {"class": "sGrid_console_item_button", value: l, type: "button", name: b, events: {click: function () {
                                    m()
                                }.bind(this)}}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.console());
                                if (k.get("autoInsert") == "true") {
                                    this.autoInsertFunc = m
                                }
                            } else {
                                if (g == "save") {
                                    var l = k.get("caption") || "保存";
                                    new Element("input", {"class": "sGrid_console_item_button", value: l, name: b, type: "button", events: {click: function () {
                                        if (this.validate()) {
                                            if (k.get("onSubmitBefore")) {
                                                var n = this.getFunc(k.get("onSubmitBefore"))[0]();
                                                if (n == false) {
                                                    return
                                                }
                                            }
                                            var o = this.getReq({tid: f, ctrl: a, widgets: [this.getStatusGirdData()]});
                                            var p = k.get("popMes") != "false";
                                            pc.postReq({req: o, postType: k.get("postType"), onSuccess: function (q) {
                                                if (p) {
                                                    this.alert("" + i18n.saveSuc)
                                                }
                                                this.commit();
                                                if (k.get("onSuccess")) {
                                                    this.getFunc(k.get("onSuccess"))[0](o, q)
                                                }
                                            }.bind(this), onError: function (q) {
                                                if (p) {
                                                    this.alertError("" + i18n.saveFai)
                                                }
                                                if (k.get("onError")) {
                                                    this.getFunc(k.get("onError"))[0](o, q)
                                                }
                                            }.bind(this)})
                                        }
                                    }.bind(this)}}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.console())
                                } else {
                                    if (g == "submitChecked") {
                                        var l = k.get("caption") || "" + i18n.save;
                                        var h = k.get("postType") == "download";
                                        new Element("input", {"class": "sGrid_console_item_button", value: l, name: b, type: "button", events: {click: function () {
                                            var n = this.getItemElByName(c);
                                            if (this.isCP() && n.get("userClicked") == "true") {
                                                if (this.allInCache() || n.get("checkAllFlag") == "false") {
                                                    if (this.getCheckedEls(c).length == 0) {
                                                        this.alertError("" + i18n.gridInsert);
                                                        return
                                                    }
                                                }
                                            } else {
                                                if (this.getCheckedEls(c).length == 0) {
                                                    this.alertError("" + i18n.gridInsert);
                                                    return
                                                }
                                            }
                                            var o = this.getReq({tid: f, ctrl: a, widgets: [this.getCheckedData(c)]});
                                            pageContainer.postReq({req: o, postType: k.get("postType"), onSuccess: function (p) {
                                                if (k.get("onSuccess")) {
                                                    this.getFunc(k.get("onSuccess"))[0](o, p)
                                                }
                                            }.bind(this), onError: function (p) {
                                                if (k.get("onError")) {
                                                    this.getFunc(k.get("onError"))[0](o, p)
                                                }
                                            }.bind(this)})
                                        }.bind(this)}}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.console())
                                    } else {
                                        if (g == "curPageData" || g == "allData" || g == "allNoDeleteData") {
                                            var l = k.get("caption") || "" + i18n.save;
                                            new Element("input", {"class": "sGrid_console_item_button", value: l, name: b, type: "button", events: {click: function () {
                                                var o;
                                                if (g == "curPageData") {
                                                    o = this.getCurPageGirdData()
                                                } else {
                                                    if (g == "allData") {
                                                        o = this.getAllGridData()
                                                    } else {
                                                        if (g == "allNoDeleteData") {
                                                            o = this.getAllNoDeleteGridData()
                                                        }
                                                    }
                                                }
                                                var n = this.getReq({tid: f, ctrl: a, widgets: [o]});
                                                pageContainer.postReq({req: n, postType: k.get("postType"), onSuccess: function (p) {
                                                    this.commit();
                                                    if (k.get("onSuccess")) {
                                                        this.getFunc(k.get("onSuccess"))[0](n, p)
                                                    }
                                                }.bind(this), onError: function (p) {
                                                    if (k.get("onError")) {
                                                        this.getFunc(k.get("onError"))[0](n, p)
                                                    }
                                                }.bind(this)})
                                            }.bind(this)}}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.console())
                                        } else {
                                            if (g == "button") {
                                                var l = k.get("caption") || "" + i18n.button;
                                                new Element("input", {"class": "sGrid_console_item_button", value: l, type: "button", name: b, events: {click: function () {
                                                    if (k.get("onClick")) {
                                                        this.getFunc(k.get("onClick"))[0]()
                                                    }
                                                }.bind(this)}}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.console());
                                                if (k.get("autoInsert") == "true") {
                                                    if (k.get("onClick")) {
                                                        this.autoInsertFunc = this.getFunc(k.get("onClick"))[0]
                                                    }
                                                }
                                            } else {
                                                if (g == "excel") {
                                                    var l = k.get("caption") || "导出";
                                                    new Element("input", {"class": "sGrid_console_item_button", value: l, name: b, type: "button", events: {click: function () {
                                                        var o = this.getGridExcelInfo();
                                                        var n = this.getReq({tid: f, ctrl: a, widgets: o});
                                                        pageContainer.postReq({req: n, postType: k.get("postType"), onSuccess: function (p) {
                                                            this.commit();
                                                            if (k.get("onSuccess")) {
                                                                this.getFunc(k.get("onSuccess"))[0](n, p)
                                                            }
                                                        }.bind(this), onError: function (p) {
                                                            if (k.get("onError")) {
                                                                this.getFunc(k.get("onError"))[0](n, p)
                                                            }
                                                        }.bind(this)})
                                                    }.bind(this)}}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.console())
                                                } else {
                                                    throw new Error("gird[" + this.options.name + "]:SwordGrid无法处理控制台属性：" + g)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }, this)
    }
    this.fireEvent("onAfterCreateConsole", [this.console()])
}, deleteRows: function (k) {
    var o = k.popMes != "false";
    var l = k.delConfirm || ("" + i18n.gridDelConfirm);
    var w = k.delConfirm || ("" + i18n.gridDelConfirmTree);
    var s = k.tid;
    var n = k.ctrl;
    var u = k.check;
    var h = k.onSuccess;
    var j = k.onError;
    var m = k.postType;
    var f = this.getCheckedEls(u);
    if (!$chk(u)) {
        f = [this.getCheckedRow()];
        var v = this.getCheckedRow();
        if (v == null) {
            alert("" + i18n.gridDelete);
            return
        }
        f = [v]
    } else {
        f = this.getCheckedEls(u);
        if (f.length == 0) {
            alert("" + i18n.gridDelete);
            return
        }
    }
    if (this.options.type == "tree") {
        if (o) {
            if (!confirm("" + w)) {
                return
            }
        }
        if (f.length == 1) {
            var b = this.getRow(f[0]).getElement("[name=" + this.options.treeSignCol + "]");
            f.extend(this.treeGetAllChildCell(b))
        }
    } else {
        if (o) {
            if (!confirm(l)) {
                return
            }
        }
    }
    var t = [];
    f.each(function (z, x) {
        var y = this.deleting(z);
        if (y != null) {
            t[t.length] = y
        }
    }, this);
    if (t.length == 0) {
        return
    }
    if (!$chk(s)) {
        var g = null;
        var q = false;
        if (this.options.type == "tree") {
            var p = this.getRow(tempEls[0]).getElement("div[pcode]");
            if ($chk(p)) {
                var c = p.get("pcode");
                var r = this.dataDiv().getElements("[pcode=" + c + "]").length;
                g = this.getRow(tempEls[0]).getPrevious();
                if (r <= 1 && $chk(g)) {
                    q = true
                }
            }
        }
        t.each(function (x) {
            if (x.get("status") == "insert") {
                this.deleteRow(x)
            }
            this.refreshConsole()
        }, this);
        if (q) {
            g.getElement("div[name='treeSignDiv']").removeClass("grid_sign_minus").addClass("grid_sign_leaf")
        }
        return
    }
    var a = this.getReq({tid: s, ctrl: n, widgets: [this.getRowsGirdData(t)]});
    pc.postReq({req: a, postType: m, onSuccess: function (A) {
        var B = null;
        var z = false;
        if (this.options.type == "tree") {
            var y = this.getRow(tempEls[0]).getElement("div[pcode]");
            if ($chk(y)) {
                var C = y.get("pcode");
                var x = this.dataDiv().getElements("[pcode=" + C + "]").length;
                B = this.getRow(tempEls[0]).getPrevious();
                if (x <= 1 && $chk(B)) {
                    z = true
                }
            }
        }
        t.each(function (D) {
            this.deleteRow(D)
        }, this);
        if (z) {
            B.getElement("div[name='treeSignDiv']").removeClass("grid_sign_minus").addClass("grid_sign_leaf")
        }
        if (h) {
            h(a, A)
        }
    }.bind(this), onError: function (x) {
        t.each(function (y) {
            y.removeClass("sGrid_data_row_delete_div")
        }, this);
        if (j) {
            j(a, x)
        }
    }.bind(this)})
}, getCheckedData: function (j) {
    if (!$defined(j)) {
        var f = this.dataDiv().getChildren("div.sGrid_data_row_click_div");
        if (f.length <= 0) {
            return null
        }
        var h = this.getRowsGirdData(f);
        return h
    } else {
        var g = this.getItemElByName(j);
        if (this.isCP() && g.get("userClicked") == "true") {
            if (this.allInCache() || g.get("checkAllFlag") == "false") {
                return this.getRowsGirdData(this.getCheckedEls(j))
            } else {
                var b = new Array();
                for (var c = 1, a = this.totalPage(); c <= a; c++) {
                    if (this.cachePages.contains(c) || c == this.pageNum()) {
                        continue
                    }
                    b.extend(this.getOnePageData(c))
                }
                b.extend(this.getRowsData(this.getCheckedEls(j)));
                return{sword: this.options.sword, name: this.options.name, beanname: this.options.beanname, trs: b}
            }
        } else {
            return this.getRowsGirdData(this.getCheckedEls(j))
        }
    }
}, getCheckedRow: function (c) {
    if (!$defined(c)) {
        var a = this.dataDiv().getChildren(".sGrid_data_row_click_div");
        if (a.length <= 0) {
            return null
        }
        if (a[0].getStyle("display") == "none") {
            return null
        }
        return a[0]
    } else {
        var a = this.getCheckedEls(c);
        var b = [];
        a.each(function (f) {
            b[b.length] = this.getRow(f)
        }.bind(this));
        return b
    }
}, getCheckedRowData: function (c) {
    if (!$defined(c)) {
        var a = this.dataDiv().getChildren(".sGrid_data_row_click_div");
        if (a.length <= 0) {
            return null
        }
        var b = this.getOneRowData(a[0]);
        return b
    } else {
        return this.getCheckedData(c).trs
    }
}, combineItems: function (a) {
    this.insertItems = [];
    this.insertNewTpyes = [];
    this.insertNewRules = [];
    this.items().each(function (g) {
        var c = g.get("name");
        var f = a.getChildren(">div[name=" + c + "]")[0];
        var b = g.clone();
        if (f) {
            if (f.get("type") && f.get("type") != g.get("type")) {
                b.set("type", f.get("type"))
            }
            if (f.get("rule") && f.get("rule") != g.get("rule")) {
                b.set("rule", f.get("rule"))
            }
            if (f.get("disable") && f.get("disable") != g.get("disable")) {
                b.set("disable", f.get("disable"))
            }
        }
        if (g.get("act") && g.get("type") == "a") {
            b.set("act", "")
        }
        this.insertItems[this.insertItems.length] = b
    }, this);
    return this.insertItems
}, getDataObjByInsertItem: function (b) {
    var c = {};
    b.getChildren(">div").each(function (f) {
        var g = f.getAttribute("value");
        if (g) {
            c[f.get("name")] = {value: g}
        }
    });
    var a = {tds: c};
    a.getValue = function (f) {
        var g = this.tds[f];
        if (!$defined(g)) {
            return null
        }
        return g.value
    };
    return a
}, getRebuildButton: function () {
    return this.console().getElement(".sGrid_console_item_button_rebuild")
}, removeRebuildButton: function () {
    var a = this.getRebuildButton();
    if (a) {
        a.destroy()
    }
}, createRebuildButton: function () {
    return;
    if (this.options.fenye == "false") {
        return
    }
    if (this.getRebuildButton()) {
        return
    }
    var a = new Element("button", {"class": "sGrid_console_item_button_rebuild", html: "重建此页", events: {click: function () {
        this.loadPage(this.pageNum())
    }.bind(this)}}).inject(this.console());
    if (!window.tooltips) {
        window.tooltips = pageContainer.create("SwordToolTips");
        this.celltooltips = window.tooltips
    }
}, loadPage: function (a) {
    if (false) {
        if (!this.isAllSave() || this.isError()) {
            if (confirm("" + i18n.gridLoadPage)) {
                if (this.isPage()) {
                    this.rollback(this.getUpdateRows());
                    this.rollback(this.getInsertRows())
                }
            } else {
                return
            }
        }
    }
    if (a <= 0 || a > this.totalPage()) {
        this.alert("" + i18n.gridTarNotExist1 + a + i18n.gridTarNotExist2);
        return
    }
    this.options.lastPageNum = this.options.pageNum;
    this.options.pageNum = a;
    this.delayBuildData();
    this.refreshConsole()
}, rebuildHeader: function () {
    this.header().getChildren().each(function (a) {
        a.destroy()
    });
    this.buildHeadr()
}, getHj: function (b) {
    var k = 0;
    var g = function (p, o) {
        var n, l, c;
        try {
            n = p.toString().split(".")[1].length
        } catch (q) {
            n = 0
        }
        try {
            l = o.toString().split(".")[1].length
        } catch (q) {
            l = 0
        }
        c = Math.pow(10, Math.max(n, l));
        return(p * c + o * c) / c
    };
    var f = this.dataDiv().getElement("div[name='" + b + "']");
    if ($chk(!f)) {
        return 0
    }
    var j = f.get("hjCheck");
    var h = f.get("hjShowValue") ? "showvalue" : "realvalue";
    var a = j ? this.getCheckedRow(j) : this.dataDiv().getElements("div[name='" + b + "']");
    a.each(function (c) {
        if (j) {
            c = c.getCell(b)
        }
        if (c.getParent("div.sGrid_data_row_div[status!='delete']")) {
            var l = c.get(h);
            if ($chk(l) && l.contains(",")) {
                l = l.replace(/,/g, "")
            }
            var m = isNaN(parseFloat(c.get("html"))) ? 0 : parseFloat(l || c.get("html"));
            k = g(k, m)
        }
    });
    return k.toFixed(2)
}, getNoDeleteCells: function (a) {
    var b = [];
    this.dataDiv().getElements("div[name='" + a + "']").each(function (c) {
        if (c.getParent("div.sGrid_data_row_div[status!='delete']")) {
            b.include(c)
        }
    });
    return b
}, refreshConsole: function () {
    if (this.hjRow) {
        var f = function () {
            this.scrollHjRow();
            this.rereshHjRowData()
        };
        f.delay(500, this)
    }
    var b = this.totalRows() / 1;
    var c = this.pageNum();
    var a = this.totalPage();
    this.consoleTotalRows().set("html", (this.options.treeRootNum == "true" && this.options.type == "tree") ? this.dataDiv().getElements("div.sGrid_data_row_item_div[treelevel=1]").length : b);
    if (this.options.fenye != "false") {
        if (b <= 0) {
            c = 0
        }
        if (this.consolePage().get("tag") == "input") {
            this.consolePage().set("value", c)
        } else {
            this.consolePage().set("html", c)
        }
        this.consoleTotalPage().set("html", a);
        this.consoleRows().set("html", this.rows());
        this.removeRebuildButton()
    }
    if (this.options.fenye == "false") {
        return
    }
    if (b <= 0 || a == 1) {
        this.disableConsoleBtn(this.consoleButton_first, true);
        this.disableConsoleBtn(this.consoleButton_prev, true);
        this.disableConsoleBtn(this.consoleButton_next, true);
        this.disableConsoleBtn(this.consoleButton_last, true)
    } else {
        if (c == 1) {
            this.disableConsoleBtn(this.consoleButton_first, true);
            this.disableConsoleBtn(this.consoleButton_prev, true);
            this.disableConsoleBtn(this.consoleButton_next, false);
            this.disableConsoleBtn(this.consoleButton_last, false)
        } else {
            if (c == a) {
                this.disableConsoleBtn(this.consoleButton_first, false);
                this.disableConsoleBtn(this.consoleButton_prev, false);
                this.disableConsoleBtn(this.consoleButton_next, true);
                this.disableConsoleBtn(this.consoleButton_last, true)
            } else {
                this.disableConsoleBtn(this.consoleButton_first, false);
                this.disableConsoleBtn(this.consoleButton_prev, false);
                this.disableConsoleBtn(this.consoleButton_next, false);
                this.disableConsoleBtn(this.consoleButton_last, false)
            }
        }
    }
    this.consoleButton_first.removeClass("sGrid_console_item_button_hover");
    this.consoleButton_prev.removeClass("sGrid_console_item_button_hover");
    this.consoleButton_next.removeClass("sGrid_console_item_button_hover");
    this.consoleButton_last.removeClass("sGrid_console_item_button_hover")
}, disableConsoleBtn: function (b, a) {
    b.set("disabled", a);
    if (a) {
        b.addClass("sGrid_console_item_button_disabled")
    } else {
        b.removeClass("sGrid_console_item_button_disabled")
    }
}, setItemX: function (a, b) {
    b.setStyle("width", this.getItemX(a))
}, getItemX: function (a) {
    var b = a.get("x");
    if (!$chk(b)) {
        b = this.itemX()
    }
    b = "" + b;
    if (!(b.contains("%") || b.contains("px"))) {
        b += "px"
    }
    return b
}, doMask: function () {
    this.getMask().mask(this.sGrid_div())
}, doUnmask: function () {
    this.getMask().unmask()
}, delayBuildData: function (a) {
    this.doMask();
    this.buildData(a)
}, isCP: function () {
    return(this.cache() && this.isPage())
}, buildData: function (a) {
    this.clearData();
    if (this.dataInCache()) {
        if (!(this.isCP())) {
            this.getHeaderCheckboxs_checked().set("checked", false)
        }
        this.dataDiv().getChildren("div[pageNum=" + this.pageNum() + "]").setStyle("display", "").set("cache", "false");
        this.buildXY();
        this.doUnmask()
    } else {
        if (this.isPage()) {
            this.onePageData(this.buildData2.bind(this))
        } else {
            if ($chk(a)) {
                this.buildData2(a)
            } else {
                this.onePageData(this.buildData2.bind(this))
            }
        }
    }
}, dataInCache: function () {
    if (!this.cache()) {
        return false
    }
    if (this.dataDiv().getChildren("div[pageNum=" + this.pageNum() + "]").length > 0) {
        return true
    }
    return false
}, getSignType: function (a, c) {
    var b;
    if (a > 0 || a == "all") {
        if (c.hasChildNodes()) {
            b = "minus"
        } else {
            b = "leaf"
        }
    } else {
        if (c.hasChildNodes()) {
            b = "plus"
        } else {
            b = "leaf"
        }
    }
    return b
}, createTree: function (f, b, h) {
    var g = null;
    if (b == "all") {
        if (f.getChildNodes().length == 0) {
            return
        }
        g = "all"
    } else {
        if (b == 0) {
            return
        }
        g = b - 1
    }
    var a = h.getElement("[name=treeSignDiv]").getParent();
    var c = a.get("treeLevel") / 1 + 1;
    a.set("childNodesCreated", true);
    f.getChildNodes().eachFromLast(function (m, l) {
        var j = this.getSignType(g, m);
        var k = m.node;
        var n = this.createTreeRow(k, k.rownum, m, c, j);
        n.inject(h, "after");
        this.createTree(m, g, n)
    }.bind(this))
}, createTreeRow: function (a, k, g, c, f, b, j) {
    if (!$defined(j)) {
        if (!this.treeItems) {
            this.treeItems = this.items()
        }
        j = this.treeItems
    }
    var l = this.createRow(k + 1, a, j, b);
    var h;
    if (this.options.treeSignCol) {
        h = l.getElement("[name=" + this.options.treeSignCol + "]")
    } else {
        h = l.getFirst()
    }
    h.set("treeLevel", c);
    h.set("signType", f);
    h.store("nodeIt", g);
    h.set("pcode", a.tds[this.options.treePcode]["value"]);
    h.set("code", a.tds[this.options.treeCode]["value"]);
    this.treeCell(h);
    if (b == "insert") {
        l.addClass("sGrid_data_row_insert_div")
    }
    return l
}, treeCell: function (a) {
    var f = a.get("treeLevel") / 1;
    var g = a.retrieve("nodeIt");
    var b = a.get("signType");
    var h = new Element("div", {"class": "grid_sign_" + b, name: "treeSignDiv", events: {click: function (j) {
        this.treeClick(a, j);
        this.scrollHeader()
    }.bind(this)}});
    a.grab(h, "top");
    a.addClass("grid_sign_cell");
    for (var c = 1; c < f; c++) {
        a.grab(new Element("div", {"class": "grid_sign_white"}), "top")
    }
}, treeClick: function (a, j) {
    if ($defined(j)) {
    }
    var h = a.get("signType");
    if (h == "leaf") {
        return
    }
    var g = a.getElement("[name=treeSignDiv]");
    var f = a.retrieve("nodeIt");
    var c = a.get("treeLevel") / 1;
    var b = a.get("childNodesCreated");
    if (b != "true") {
        if ($defined(f) && !f.hasChildNodes()) {
            return
        }
    }
    g.removeClass("grid_sign_" + h);
    if (h == "plus") {
        h = "minus"
    } else {
        h = "plus"
    }
    g.addClass("grid_sign_" + h);
    a.set("signType", h);
    if (h == "minus") {
        if (b != "true") {
            f.getChildNodes().eachFromLast(function (p, m) {
                var l = p.node;
                var o = this.createTreeRow(l, l.rownum, p, c + 1, this.getSignType(0, p));
                o.inject(this.getRow(a), "after");
                if (this.options.treeEffect == "true") {
                    var k = o.getHeight();
                    o.setStyle("opacity", 0);
                    o.set("treeRealHeight", k);
                    o.setStyle("height", 0);
                    var n = new Fx.Tween(o, {onComplete: function () {
                        o.tween("opacity", 1)
                    }});
                    n.start("height", k)
                }
            }.bind(this));
            a.set("childNodesCreated", true)
        } else {
            this.treeOpen(a)
        }
    } else {
        this.treeClose(a)
    }
    this.buildXY()
}, treeClose: function (a) {
    var b = a.get("code");
    this.dataDiv().getElements("[pcode=" + b + "]").each(function (f) {
        if (this.options.treeEffect == "true") {
            var g = this.getRow(f);
            var c = new Fx.Tween(g, {onComplete: function () {
                g.set("treeRealHeight", g.getHeight());
                var h = new Fx.Tween(g, {onComplete: function () {
                    g.setStyle("display", "none")
                }});
                h.start("height", 0)
            }});
            c.start("opacity", 0)
        } else {
            if (Browser.Engine.trident4) {
                this.getRow(f).addClass("ieRemoveTreeBorder").getChildren().setStyles({display: "none"})
            } else {
                this.getRow(f).setStyle("display", "none")
            }
        }
        if (f.get("signType") == "minus") {
            this.treeClose(f)
        }
    }.bind(this))
}, treeOpen: function (a) {
    var b = a.get("code");
    this.dataDiv().getElements("[pcode=" + b + "]").each(function (c) {
        if (this.options.treeEffect == "true") {
            var g = this.getRow(c);
            g.setStyle("display", "");
            var f = new Fx.Tween(g, {onComplete: function () {
                g.tween("opacity", 1)
            }});
            f.start("height", g.get("treeRealHeight"))
        } else {
            if (Browser.Engine.trident4) {
                this.getRow(c).removeClass("ieRemoveTreeBorder").getChildren().setStyles({display: ""})
            } else {
                this.getRow(c).setStyle("display", "")
            }
        }
        if (c.get("signType") == "minus") {
            this.treeOpen(c)
        }
    }.bind(this))
}, treeGetAllChildCell: function (b) {
    this.treeClick(b);
    var a = [];
    var f = b.get("code");
    var c = this.dataDiv().getElements("[pcode=" + f + "]");
    a.extend(c);
    c.each(function (g) {
        a.extend(this.treeGetAllChildCell(g))
    }.bind(this));
    return a
}, buildData2: function (c) {
    if (!this.isCP()) {
        this.getHeaderCheckboxs_checked().set({checked: false, userClicked: "false", checkAllFlag: "false"});
        this.options.pNode.getChildren(">div:not([console])[name][type='checkbox']").set({checked: false, userClicked: "false", checkAllFlag: "false"})
    }
    if (true) {
        var b = this.getSwordSort();
        if ($chk(b.options.sortName)) {
            this.header().getChildren("div[issort=true]").each(function (f) {
                f.set("issort", "false");
                f.getElement(".sGrid_header_text_div").removeClass("sGrid_header_text_div_asc");
                f.getElement(".sGrid_header_text_div").removeClass("sGrid_header_text_div_desc")
            }, this);
            var a = b.options.sortFlag == "asc" ? "↑" : "↓";
            this.header().getChildren("div[_for=" + b.options.sortName + "]").each(function (f) {
                f.set("issort", "true");
                f.getElement(".sGrid_header_text_div").addClass("sGrid_header_text_div_" + b.options.sortFlag)
            }, this)
        }
    }
    if (!$chk(c)) {
        this.doUnmask();
        return
    }
    if (this.options.type == "tree") {
        c.each(function (g, f) {
            g.rownum = f
        }.bind(this));
        this.treeIt = SwordGrid.Iterator.newInstance(c, "jsonAptitude", {id: this.options.treeCode, pid: this.options.treePcode});
        this.treeIt.getRootNodes().eachFromLast(function (k, j) {
            var f = this.options.extendLayer == "all" ? "all" : this.options.extendLayer / 1;
            var g = this.getSignType(f, k);
            var h = k.node;
            var l = this.createTreeRow(h, h.rownum, k, 1, g);
            l.inject(this.dataDiv());
            this.createTree(k, f, l)
        }, this)
    } else {
        this.createRowItems = this.items();
        if (this.options.highQuality == "true") {
            if (c.length > 0) {
                this.delayCreateRow.delay(1, this, [c.length, 0, c])
            } else {
                this.lastBuildData()
            }
        } else {
            c.each(function (f, g) {
                var h = this.createRow(g + 1, f, this.createRowItems);
                h.inject(this.dataDiv())
            }, this)
        }
    }
    if (this.options.highQuality != "true") {
        this.lastBuildData()
    }
}, treeChildrenNodeData: function (f) {
    if (this.options.type == "tree") {
        var c = this.getCurPageGridData().trs;
        var g = [];
        for (var a = 0; a < c.length; a++) {
            var b = c[a].tds;
            if (b[this.options.treePcode].value == f) {
                g.include(b)
            }
        }
        return g
    }
}, treeChildrenNodeStatusData: function (g) {
    if (this.options.type == "tree") {
        var f = this.getCurPageGridData().trs;
        var a = new Array();
        for (var b = 0; b < f.length; b++) {
            var c = f[b].tds;
            if (c[this.options.treePcode].value == g) {
                a.push(f[b])
            }
        }
        return a
    }
}, lastBuildData: function () {
    this.buildXY();
    this.header().setStyle("top", "0px");
    this.getDataDivFxScroll().toTop();
    this.fireEvent("onAfterInitData");
    this.doUnmask()
}, delayCreateRow: function (c, b, a) {
    var f = this.createRow(b + 1, a[b], this.createRowItems);
    f.inject(this.dataDiv());
    c--;
    b++;
    if (c > 0) {
        this.delayCreateRow.delay(1, this, [c, b, a])
    } else {
        this.lastBuildData()
    }
}, addGV: function (a) {
    if (a.getValue == undefined) {
        a.getValue = function (b) {
            var c = this.tds[b];
            if (!$defined(c)) {
                return null
            }
            return c.value
        }
    }
}, addCellApi: function (a, b, c) {
    a.setSuitableValue = function (g, f) {
        if (!["checkbox", "radio", "userdefine", "file2"].contains(a.get("type"))) {
            this.setText(a, g, f);
            if (!a.get("dateControl") || g != "") {
                a.set("title", g)
            }
            if (a.get("type") == "password") {
                a.set("title", this.dealPassword(g))
            }
        }
    }.bind(this)
}, dealPassword: function (a) {
    return"●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●".substring(0, a.length)
}, dealItem: function (g, b, j, k) {
    var c = g.get("name");
    var f = b.tds[c];
    if (f) {
        f = f.value
    }
    var h = g.get("type");
    var a = g.clone(false).inject(j);
    if (h == "userdefine") {
        a.setStyle("display", "")
    }
    this.createCellEl(g, f, k, b, a);
    if (a.get("disabled") == true || a.get("disabled") == "true") {
        a.erase("disabled");
        a.set("disable", "true")
    }
    if (a.get("disable") == "true") {
        this.cellDisable(a)
    }
    if (a.get("buttonEl") == "true") {
        a.hoverClass("sGrid_data_row_itemdiv_button_hover")
    }
    this.addCellApi(a, g, h);
    if (g.get("show") == "false" || g.get("x") == 0) {
        if (Browser.Engine.trident4) {
            a.setStyle("width", 0).setStyle("border", "0px").setStyle("height", 0)
        } else {
            a.setStyle("display", "none")
        }
    }
    this.fireEvent("onAfterCreateCell", [b, f, a, g])
}, addRowApi: function (a) {
    a.getCell = function (b) {
        return this.getFirst("div.sGrid_data_row_item_div[name=" + b + "]")
    };
    a.update = function (b) {
        this.updateRow(a, b)
    }.bind(this);
    a.disable = function (b) {
        this.cellDisable(a.getCell(b))
    }.bind(this);
    a.enable = function (b) {
        this.cellEnable(a.getCell(b))
    }.bind(this)
}, addRowEvent: function (c, b, a) {
    c.addEvent("click", function (h) {
        var f = $(h.target);
        var l = f.get("type");
        var o = f.get("tag");
        if (this.options.checkMoudle == "true") {
            if (!(l == "checkbox" && o == "input")) {
                this.dataDiv().getElements("input:not([disabled])[type=checkbox][checked]").set("checked", false);
                c.getElements("input:not([disabled])[type=checkbox]").set("checked", true);
                if (this.options.rowCheckValidator != false && this.options.rowCheckValidator != "false") {
                    var j = c.getElements("input[type=checkbox]:checked:not([disabled])");
                    j.fireEvent("change", [j])
                }
            }
            var k = c.getElements("input:not([disabled])[type=radio]");
            k.set("checked", true);
            k.each(function (p) {
                this.radioSetChecked(p.getParent())
            }.bind(this));
            var m = this.dataDiv().getElements("input[type=checkbox]:not([checked])").length;
            if (m == 0) {
                this.getHeaderCheckboxs_noneChecked().set("checked", true)
            } else {
                this.getHeaderCheckboxs_checked().set("checked", false)
            }
        } else {
            if (l == "checkbox" && o == "input") {
                var g = this.getHeaderCheckboxByName(f.get("name"));
                if (g == null) {
                    return
                }
                var n = this.getItemElByName(f.get("name"));
                var m = this.dataDiv().getElements("input[type=checkbox][name=" + f.get("name") + "]:not([checked])").length;
                if (this.allInCache() && m == 0) {
                    g.set("checked", true);
                    if (this.isCP()) {
                        n.set("userClicked", "true");
                        n.set("checkAllFlag", "true")
                    }
                } else {
                    if (this.isCP() && n.get("userClicked") == "true" && n.get("checkAllFlag") == "true" && m == 0) {
                        g.set("checked", true)
                    } else {
                        g.set("checked", false)
                    }
                }
            }
        }
        this.dataDiv().getChildren(".sGrid_data_row_click_div").each(function (p) {
            p.removeClass("sGrid_data_row_click_div")
        });
        c.addClass("sGrid_data_row_click_div");
        this.fireEvent("onRowClick", [b, c, h])
    }.bind(this));
    c.addEvent("dblclick", function (f) {
        this.fireEvent("onRowDbClick", [b, c, f])
    }.bind(this));
    c.addEvent("contextmenu", function (f) {
        this.fireEvent("onRowRightClick", [b, c, f])
    }.bind(this))
}, rowM_dan: new Element("div", {"class": "sGrid_data_row_div sGrid_data_row_div_dan", row: true}), rowM_shuang: new Element("div", {"class": "sGrid_data_row_div sGrid_data_row_div_shuang", row: true}), rowM_tree: new Element("div", {"class": "sGrid_data_row_div", row: true}), createBaseRow: function (b) {
    var a;
    if (this.options.type != "tree") {
        if (b % 2 == 0) {
            a = this.rowM_shuang.clone(false)
        } else {
            a = this.rowM_dan.clone(false)
        }
    } else {
        a = this.rowM_tree.clone(false)
    }
    if (this.options.wordBreak == "true") {
        if (Browser.Engine.trident4) {
            a.setStyle("height", "100%")
        } else {
            a.setStyle("height", "auto")
        }
    }
    a.set("rowNum", b);
    a.set("pageNum", this.pageNum());
    a.hoverClass("sGrid_data_row_div_hover");
    return a
}, createRow: function (h, c, b, a, g) {
    this.addGV(c);
    this.fireEvent("onBeforeCreateRow", [c, b]);
    var f = g ? g : this.createBaseRow(h);
    if (!g) {
        f.store("rowData", c)
    }
    b.each(function (j) {
        this.dealItem(j, c, f, h)
    }, this);
    this.addRowApi(f);
    this.addRowEvent(f, c, b);
    if ($chk(a)) {
        f.set("status", a)
    } else {
        if ($chk(c.status)) {
            f.set("status", c.status)
        }
    }
    if (f.get("status") == "delete") {
        f.addClass("sGrid_data_row_delete_div")
    }
    this.fireEvent("onAfterCreateRow", [c, f, b, this]);
    return f
}, cellEnable: function (a) {
    if (!a) {
        return
    }
    a.set("disable", "false");
    if (a.get("type") == "checkbox") {
        a.getElement("input[type=checkbox]").set("disabled", false)
    }
    if (a.get("type") == "a") {
        a.removeClass("sGrid_data_row_item_label").addClass("sGrid_data_row_item_a")
    }
    if (a.get("buttonEl") == "true") {
        a.removeClass("sGrid_data_row_itemdiv_button_disabled")
    } else {
        a.removeClass("sGrid_data_row_itemdiv_disabled")
    }
}, cellDisable: function (a) {
    if (!a) {
        return
    }
    a.set("disable", "true");
    if (a.get("type") == "checkbox") {
        a.getElement("input[type=checkbox]").set("disabled", true)
    }
    if (a.get("type") == "a") {
        a.removeClass("sGrid_data_row_item_a").addClass("sGrid_data_row_item_label")
    }
    if (a.get("buttonEl") == "true") {
        a.addClass("sGrid_data_row_itemdiv_button_disabled")
    } else {
        a.addClass("sGrid_data_row_itemdiv_disabled")
    }
}, $data: function (b, a) {
    if (this.options.data[a - 1] == null) {
        return
    }
    var c = this.options.data[a - 1]["tds"][b]["value"];
    return c
}, dealCellAct: function (m, g, n, c, k, f, a, l, h) {
    if (m == "a") {
        c.set("html", g);
        c.addClass("sGrid_data_row_item_a")
    } else {
        c.set("html", n.get("caption"));
        c.addClass("sGrid_data_row_itemdiv_button")
    }
    if (k == "delete") {
        var b = n.get("popMes") != "false";
        var p = n.get("delConfirm") || ("" + i18n.gridDelConfirm);
        c.addEvent("click", function () {
            if (c.get("disable") == "true") {
                return
            }
            if (b) {
                if (!confirm(p)) {
                    return
                }
            }
            var q = this.deleting(c);
            if (q == null) {
                return
            }
            var r = this.getReq({tid: f, ctrl: a, widgets: [this.getOneRowGirdData(q)]});
            pc.postReq({req: r, postType: n.get("postType"), onSuccess: function (s) {
                this.deleteRow(q);
                if (n.get("onSuccess")) {
                    this.getFunc(n.get("onSuccess"))[0](r, s)
                }
            }.bind(this), onError: function (s) {
                q.removeClass("sGrid_data_row_delete_div");
                if (n.get("onError")) {
                    this.getFunc(n.get("onError"))[0](r, s)
                }
            }.bind(this)})
        }.bind(this))
    } else {
        if (k == "deleting") {
            var j = c.get("text");
            var o = n.get("cancel") || "" + i18n.cancel;
            c.set("deleteCaption", j);
            c.set("cancelCaption", o);
            c.addEvent("click", function () {
                if (c.get("disable") == "true") {
                    return
                }
                var q = this.getRow(c);
                if (q.get("status") == "delete") {
                    c.set("text", c.get("deleteCaption"));
                    q.set("status", "");
                    q.removeClass("sGrid_data_row_delete_div");
                    return
                }
                if (q.get("status") != "insert") {
                    c.set("text", c.get("cancelCaption"))
                } else {
                    if (!confirm("" + i18n.gridInsertRowDel)) {
                        return
                    }
                }
                this.deleting(c)
            }.bind(this))
        } else {
            if (f || a) {
                c.addEvent("click", function () {
                    if (c.get("disable") == "true") {
                        return
                    }
                    var r = c.getParent(".sGrid_data_row_div");
                    if (r.get("status") == "insert") {
                        alert("" + i18n.gridSaveAlert);
                        return
                    }
                    var q = this.getReq({tid: f, ctrl: a, widgets: [this.getOneRowGirdData(c)]});
                    pc.postReq({req: q, postType: n.get("postType"), onSuccess: function (s) {
                        if (n.get("onSuccess")) {
                            this.getFunc(n.get("onSuccess"))[0](q, s)
                        }
                    }.bind(this), onError: function (s) {
                        if (n.get("onError")) {
                            this.getFunc(n.get("onError"))[0](q, s)
                        }
                    }.bind(this)})
                }.bind(this))
            } else {
                if (l) {
                    c.addEvent("click", function () {
                        if (c.get("disable") == "true") {
                            return
                        }
                        var r = c.getParent(".sGrid_data_row_div");
                        if (r.get("status") == "insert") {
                            alert("" + i18n.gridSaveAlert);
                            return
                        }
                        if (!h) {
                            throw new Error("gird[" + this.options.name + "]:使用表格一行数组直接页面间跳转到form页面展现时候，必须设置有效的showRow属性，具体请参阅用户手册！")
                        }
                        var q = this.getOneRowFormData(c, h);
                        pc.redirect.setData(q);
                        pc.redirect.go(l)
                    }.bind(this))
                }
            }
        }
    }
}, isVal: function () {
    return false
}, createCellEl: function (A, u, L, g, w) {
    var M = A.get("type");
    var n = A.get("act");
    var o = A.get("tid");
    var H = A.get("ctrl");
    var b = A.get("page");
    var D = A.get("name");
    var r = A.get("showRow");
    var F = A.get("msg");
    var J = w;
    if ($chk(F)) {
        J.set("msg", F)
    }
    if (["edit", "detail", "delete", "deleting"].contains(n)) {
        this.dealCellAct(M, u, A, J, n, o, H, b, r)
    } else {
        if ([null, "a", "lable", "label"].contains(M)) {
            J.addClass("sGrid_data_row_item_" + M);
            var y = u || "";
            if (A.get("format")) {
                y = sword_fmt.convertText(A, y).value
            }
            J.set({text: y, realvalue: u || "", title: y});
            var K = g.tds[D];
            if (K) {
                if (K.code) {
                    J.set("code", K.code)
                }
            }
            if (A.get("_onClick")) {
                J.addEvent("click", function () {
                    this.lableClick(J, A)
                }.bind(this))
            }
        } else {
            if (["rowNum"].contains(M)) {
                J.addClass("sGrid_data_row_item_" + M);
                this.addRowRowNum(J);
                if (A.get("_onClick")) {
                    J.addEvent("click", function () {
                        if (J.get("disable") == "true") {
                            return
                        }
                        this.getFunc(A.get("_onClick"))[0](this.getOneRowData(J), this.getRow(J))
                    }.bind(this))
                }
            } else {
                if (["rowNumOnePage"].contains(M)) {
                    J.addClass("sGrid_data_row_item_" + M);
                    J.set("html", L);
                    if (A.get("_onClick")) {
                        J.addEvent("click", function () {
                            if (J.get("disable") == "true") {
                                return
                            }
                            this.getFunc(A.get("_onClick"))[0](this.getOneRowData(J), this.getRow(J))
                        }.bind(this))
                    }
                } else {
                    if (["text", "hidden", "file", "password"].contains(M)) {
                        J.addClass("sGrid_data_row_item_" + M);
                        var z = sword_fmt.convertText(A, u);
                        var y = z.value;
                        if ($defined(y) && $type(y) == "string" && (y.indexOf(">") != -1 || y.indexOf("<")) != -1) {
                            y = (y.replace(/</g, "&lt;")).replace(/>/g, "&gt;")
                        }
                        J.set("html", y);
                        J.set("title", y);
                        J.set("realvalue", z.realvalue);
                        J.set("showvalue", y);
                        if (M == "password") {
                            var j = this.dealPassword(y);
                            J.set("html", j);
                            J.set("title", j);
                            J.set("showvalue", j);
                            J.set("realvalue", j);
                            J.store("realvalue", z.realvalue)
                        }
                        J.addEvent("click", function () {
                            this.textClick(J, A, M, D, L)
                        }.bind(this))
                    } else {
                        if (["button"].contains(M)) {
                            J.set("html", A.get("caption"));
                            J.addClass("sGrid_data_row_itemdiv_button");
                            if (A.get("_onClick")) {
                                J.addEvent("click", function () {
                                    if (J.get("disable") == "true") {
                                        return
                                    }
                                    this.getFunc(A.get("_onClick"))[0](this.getOneRowData(J), this.getRow(J))
                                }.bind(this))
                            }
                        } else {
                            if (["checkbox", "radio"].contains(M)) {
                                var s;
                                if (this.isCP() && A.get("userClicked") == "true") {
                                    A.get("checkAllFlag") == "true" ? s = true : s = false
                                } else {
                                    if (u == "true" || u == "1") {
                                        s = true
                                    } else {
                                        s = false
                                    }
                                }
                                J = new Element("input", {type: M, name: D, checked: s, value: u, "class": "sGrid_data_row_item_checkbox"});
                                if (this.options.rowCheckValidator != false && this.options.rowCheckValidator != "false") {
                                    J.addEvent("click",function (O) {
                                        var N = $(O.target);
                                        N.fireEvent("change", [N])
                                    }).addEvent("change", function (S) {
                                        var R = S.target || S;
                                        R = $(R) || R;
                                        if ("checkbox" == R.get("type") && !R.get("checked")) {
                                            return
                                        }
                                        var Q = this.getCheckedRow(R.get("name"));
                                        if (Q == null) {
                                            return
                                        }
                                        if ($type(Q) != "array") {
                                            Q = [Q]
                                        }
                                        var O = false;
                                        var P = [];
                                        Q.each(function (T) {
                                            T.getChildren().each(function (W) {
                                                if (W.get("rule")) {
                                                    if (!this.vObj.doValidate(W).state) {
                                                        var U = T.getElement(">input[name'" + R.get("name") + "']:checked");
                                                        if (U) {
                                                            U.set("checked", false)
                                                        }
                                                        var V = "第" + T.get("rowNum") + "行|列名:" + this.headhash.get(W.get("name"));
                                                        if (P.indexOf(V) == -1) {
                                                            P[P.length] = V
                                                        }
                                                        O = true
                                                    }
                                                }
                                            }, this)
                                        }, this);
                                        var N = $chk(this.options.caption) ? this.options.caption : this.options.name;
                                        if (O) {
                                            this.alertError("您操作的表格<strong>[" + N + "]</strong>数据有错误:<br/><strong>[" + P + "]</strong><br/>请修改正确后再选中 ！")
                                        }
                                        return
                                    }.bind(this))
                                }
                                if (A.get("disable") == "true") {
                                    J.set("disabled", true)
                                }
                                if (A.get("data") == "true") {
                                    J.addEvent("click", function () {
                                        if (M == "radio") {
                                            this.radioSetChecked(J.getParent())
                                        } else {
                                            this.updateCell(J.getParent(), J.get("checked") ? "1" : "0")
                                        }
                                    }.bind(this))
                                }
                                if (A.get("_onClick")) {
                                    J.addEvent("click", function () {
                                        this.getFunc(A.get("_onClick"))[0](this.getOneRowData(J), this.getRow(J), J)
                                    }.bind(this))
                                }
                                J.inject(w)
                            } else {
                                if (M == "date") {
                                    J.addClass("sGrid_data_row_item_" + M);
                                    var l = this.getCalendar().getShowValue(A, u);
                                    var m = sword_fmt.convertText(J, l).value;
                                    if ($chk(u)) {
                                        J.set("realvalue", u)
                                    }
                                    J.set("html", m);
                                    J.set("title", m);
                                    J.set("showvalue", m);
                                    if (A.get("showCurDate") == "true") {
                                        var v = this.getCalendar().getRealValue(A, l);
                                        J.set("realvalue", v);
                                        g.tds[A.get("name")] = {value: v}
                                    }
                                    if ($defined(this.options.data)) {
                                        var h = this.options.data[L - 1];
                                        if ($chk(u) && $defined(h)) {
                                            var q = A.get("name");
                                            if ($chk(q)) {
                                                var I = h.tds[q];
                                                if ($defined(I)) {
                                                    I.originValue = J.get("html")
                                                }
                                            }
                                        }
                                    }
                                    J.addEvent("click", function () {
                                        if (J.get("disable") == "true") {
                                            return
                                        }
                                        if (A.get("onBeforeClick")) {
                                            this.getFunc(A.get("onBeforeClick"))[0](this.getOneRowData(J), this.getRow(J), A)
                                        }
                                        var R = J.get("text");
                                        if (J.get("createCalendar") == "true") {
                                            return
                                        }
                                        A.pNode = J;
                                        J.set("html", "");
                                        var Q = pc.getCalendar();
                                        if (Q.dateInput && Q.dateInput.getParent(".sGrid_data_row_item_div")) {
                                            var N = Q.dateInput.get("value");
                                            var O = this.getCalendar().getRealValue(this.getItemElByName(Q.dateInput.getParent(".sGrid_data_row_item_div").get("name")), N);
                                            Q.dateInput.getParent(".sGrid_data_row_item_div").set("showvalue", N);
                                            Q.dateInput.getParent(".sGrid_data_row_item_div").set("createCalendar", "false");
                                            this.updateCell(Q.dateInput.getParent(".sGrid_data_row_item_div"), O, N);
                                            Q.clear();
                                            Q.jsShow = false
                                        }
                                        Q.setValidate(this.vObj);
                                        Q.initParam(A, this);
                                        Q.dateInput.set("onHide", A.get("onHide"));
                                        Q.dateInput.set("value", J.get("showvalue"));
                                        Q.dateInput.set("oValue", J.get("realvalue"));
                                        if (J.get("disable") == "false") {
                                            Q.enable(Q.dateInput)
                                        }
                                        Q.grid_onFinished = function (S) {
                                            var T = this.getCalendar().getRealValue(A, S);
                                            J.set("showvalue", S);
                                            J.set("realvalue", T);
                                            this.updateCell(J, T, S);
                                            J.set("createCalendar", "false");
                                            Q.jsShow = false;
                                            Q.onFinished = null
                                        }.bind(this);
                                        Q.jsShow = true;
                                        Q.show.delay(1, Q, Q.dateInput);
                                        J.set("createCalendar", "true");
                                        this.addNextFocusEvent(Q.dateInput, Q);
                                        if (Browser.Engine.trident) {
                                            Q.dateInput.focus();
                                            try {
                                                Q.dateInput.focus()
                                            } catch (P) {
                                            }
                                        }
                                    }.bind(this))
                                } else {
                                    if (M == "select") {
                                        J.addClass("sGrid_data_row_item_" + M);
                                        var K = u;
                                        if (g) {
                                            var C = g.tds[D];
                                            if (C) {
                                                C = C.lazydata;
                                                if (C) {
                                                    K = C
                                                }
                                            }
                                        }
                                        var G = this.getSelect().dm2mc(A, K, J.getParent(".sGrid_data_row_div"));
                                        var c;
                                        if ($type(G) == "object") {
                                            J.set("html", G.caption);
                                            J.set("title", G.caption);
                                            J.set("code", G.code);
                                            J.set("caption", G.caption);
                                            c = G.code;
                                            J.set("realvalue", G.realvalue);
                                            J.store("allDb", G.allDb)
                                        } else {
                                            J.set("html", u);
                                            J.set("title", u);
                                            J.set("caption", u);
                                            J.set("code", u);
                                            J.set("realvalue", u);
                                            c = u
                                        }
                                        if ($defined(this.options.data)) {
                                            var h = g;
                                            if ($chk(c) && $defined(h)) {
                                                var q = A.get("name");
                                                if ($chk(q)) {
                                                    var I = h.tds[q];
                                                    if ($defined(I)) {
                                                        I.originValue = c;
                                                        I.value = G.realvalue || I.value;
                                                        if (u && u.contains("|")) {
                                                            I.lazydata = u
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        J.store("space", J.getParent(".sGrid_data_row_div"));
                                        J.addEvent("click", function () {
                                            if (J.get("disable") == "true") {
                                                return
                                            }
                                            if (A.get("onBeforeClick")) {
                                                this.getFunc(A.get("onBeforeClick"))[0](this.getOneRowData(J), this.getRow(J), A)
                                            }
                                            var T = J.get("text");
                                            if (J.get("createSelect") == "true") {
                                                return
                                            }
                                            A.pNode = J;
                                            A.set("rule", J.get("rule"));
                                            J.set("text", "");
                                            var R = pc.getSelect();
                                            if (R.box && R.box.getParent(".sGrid_data_row_item_div")) {
                                                var O = R.box.getParent(".sGrid_data_row_item_div");
                                                if (!R.box.get("code")) {
                                                    O.set("caption", "");
                                                    O.set("code", "");
                                                    O.set("realvalue", "")
                                                }
                                                var Q = O.get("text");
                                                var U = O.get("realvalue") || "";
                                                var P = O.get("code");
                                                O.set("code", P);
                                                O.set("realvalue", U);
                                                $w(O.getParent("div[sword=SwordGrid]").get("name")).updateCell(O, U, O.get("caption") || "", true);
                                                O.set("createSelect", "false");
                                                if (R.box.get("display") == "true") {
                                                    R.hide()
                                                }
                                            }
                                            R.setValidate(this.vObj);
                                            var N = A.get("disable");
                                            A.set("disable", "");
                                            R.initParam(A, this);
                                            A.set("disable", N);
                                            R.grid_onFinished = function (V, X, Z, W) {
                                                J.set("caption", V);
                                                J.set("code", X);
                                                J.set("realvalue", Z);
                                                J.store("allDb", W);
                                                J.set("createSelect", "false");
                                                var Y = this.getRow(J);
                                                if (!Y) {
                                                    return
                                                }
                                                this.updateCell(J, Z, J.get("caption") || "", true);
                                                if (J.get("rule")) {
                                                    if (!this.vObj.doValidate(J).state) {
                                                        this.addError(Y.get("rowNum"), J.get("name"))
                                                    } else {
                                                        this.removeError(L, D)
                                                    }
                                                }
                                            }.bind(this);
                                            R.box.set("value", T);
                                            R.box.set("code", J.get("code"));
                                            R.box.set("realvalue", J.get("realvalue"));
                                            R.show.delay(1, R);
                                            J.set("createSelect", "true");
                                            R.box.focus();
                                            try {
                                                R.box.focus()
                                            } catch (S) {
                                            }
                                        }.bind(this))
                                    } else {
                                        if (M == "userdefine") {
                                            J.addClass("sGrid_data_row_item_" + M);
                                            J.set("html", A.get("html"))
                                        } else {
                                            if (M == "pulltree") {
                                                J.addClass("sGrid_data_row_item_" + M);
                                                var f = A.get("treename");
                                                J.set("treename", f);
                                                var B = $w(f);
                                                if (B.gridAddEvent != true) {
                                                    var a = B.select ? B.select : B;
                                                    a.addEvent("onSelectHide", function (P) {
                                                        var N = P.getParent(".sGrid_data_row_item_pulltree");
                                                        B.select.selBox.store("lastCell", N);
                                                        B.options.pNode.inject(document.body);
                                                        B.options.pNode.setStyle("display", "none");
                                                        if (!N) {
                                                            return
                                                        }
                                                        N.set("html", "");
                                                        var Q = P.get("realvalue");
                                                        var O = P.get("value");
                                                        N.set("realvalue", Q);
                                                        this.updateCell(N, Q, O, true);
                                                        P.set("value", "");
                                                        P.set("realvalue", "");
                                                        if (N.get("rule")) {
                                                            var S = this.vObj.doValidate(N);
                                                            if (!S.state) {
                                                                this.addError(this.getRow(N).get("rowNum"), N.get("name"));
                                                                var R = new Element("input");
                                                                R.inject(N);
                                                                this.celltooltips.createTip(R, S.msg);
                                                                this.pullTreeInputDestroy.delay(50, this, R)
                                                            } else {
                                                                this.removeError(this.getRow(N).get("rowNum"), N.get("name"))
                                                            }
                                                        }
                                                    }.bind(this));
                                                    B.gridAddEvent = true
                                                }
                                                J.addEvent("click", function () {
                                                    if (J.get("disable") == "true") {
                                                        return
                                                    }
                                                    J.set("html", "");
                                                    var N = B.options.pNode.getElement("input");
                                                    B.select.selBox.addEvent("click", B.select.selectBlur.bind(B.select));
                                                    B.options.pNode.inject(J);
                                                    B.options.pNode.setStyle("display", "");
                                                    N.set("value", J.get("title"));
                                                    N.set("realvalue", J.get("realvalue"));
                                                    B.select.showByJs = true;
                                                    B.select.selBox.set("codePath", J.get("codePath"));
                                                    B.select.selBox.focus();
                                                    var P = J.get("rule");
                                                    if ($defined(P) && P.contains("must")) {
                                                        B.select.selBox.setStyle("background-color", "#b5e3df")
                                                    }
                                                    this.addNextFocusEvent(B.select.selBox);
                                                    if ($chk(J.get("realvalue"))) {
                                                        if ($chk(J.get("codePath"))) {
                                                            if ($chk(B.builder) && $chk(B.builder.draw)) {
                                                                B.select.clickBefore(J.get("codePath"))
                                                            }
                                                        } else {
                                                            if ($chk(B.builder) && $chk(B.builder.draw)) {
                                                                var O = new Hash();
                                                                O.set(B.options.cascadeSign.id, J.get("realvalue"));
                                                                B.findTreeNode(O)
                                                            }
                                                        }
                                                    } else {
                                                        if ($chk(B.builder) && $chk(B.builder.draw)) {
                                                            B.clearCheckedStatus();
                                                            B.select.clear()
                                                        }
                                                    }
                                                }.bind(this));
                                                if (B.inGrid != true) {
                                                    B.inGrid = true
                                                }
                                                if (B.initDataFlag != true) {
                                                    B.initData(pc.getInitData(f));
                                                    B.initDataFlag = true
                                                }
                                                if ($chk(u)) {
                                                    if (u.contains("code") && u.contains("caption")) {
                                                        var p = u.split("|");
                                                        if (u.contains("codePath")) {
                                                            J.set("codePath", p[2].substring("codePath,".length))
                                                        }
                                                        var t = p[1].split(",")[1];
                                                        J.set("text", t);
                                                        J.set("title", t);
                                                        var c = p[0].split(",")[1];
                                                        J.set("realvalue", c);
                                                        g.tds[A.get("name")].value = c
                                                    } else {
                                                        if (B.gridShow != true) {
                                                            B.select.show();
                                                            B.options.pNode.setStyle("display", "none");
                                                            B.select.hide();
                                                            B.gridShow = true;
                                                            this.addNextFocusEvent(B.select.selBox)
                                                        }
                                                        var x = [];
                                                        var p = u.split(",");
                                                        var E = [];
                                                        p.each(function (N) {
                                                            var O = new Hash();
                                                            O.set(B.options.cascadeSign.id, N);
                                                            var P = B.getTreeNode(O);
                                                            if ($chk(P)) {
                                                                x.include(P);
                                                                E.include(P.get(B.options.displayTag))
                                                            }
                                                        });
                                                        var k = u;
                                                        if (x) {
                                                            B.setSelectedNode(x)
                                                        } else {
                                                            B.setSelectValue(u)
                                                        }
                                                        J.set("text", E);
                                                        J.set("title", E);
                                                        J.set("realvalue", k)
                                                    }
                                                }
                                            } else {
                                                if (M == "file2") {
                                                    this.createFile2(A, J, u, g)
                                                } else {
                                                    throw new Error("grid[" + this.options.name + "]:SwordGrid不能处理这种类型的元素【" + A.get("type") + "】，请查看用户手册。")
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return J
}, pullTreeInputDestroy: function (a) {
    a.destroy()
}, addRowRowNum: function (c) {
    var b = this.dataDiv();
    var f = b.getLast("div[status!='delete']");
    var a = f ? (f.getElement("div[type='rowNum']").get("rowNum") / 1 + 1) : 1;
    c.set("rowNum", a).set("text", a);
    b.getChildren("div[status='delete']").each(function (h, g) {
        var j = h.get("rowNum") / 1 + 1;
        h.set("rowNum", j);
        h.getElement("div[type='rowNum']").set("text", j)
    })
}, deleteRowRowNum: function (b) {
    var f = b.getElement("div[type='rowNum']");
    if (f && b.get("isDeleting") != "true") {
        var c = this.dataDiv();
        var a = f.get("rowNum") / 1;
        c.getChildren().each(function (h, g) {
            var k = h.getElements("div[type='rowNum']").get("rowNum");
            if (k >= a) {
                var j = k - 1;
                h.set("rowNum", j);
                h.getElement("div[type='rowNum']").set("rowNum", j).set("text", j)
            }
        })
    }
}, deletingRowRowNum: function (b) {
    var g = b.getElement("div[type='rowNum']");
    if (g) {
        var f = this.dataDiv();
        var a = g.get("rowNum") / 1;
        var h = f.getLast("div[status!='delete']");
        var c = h ? h.get("rowNum") / 1 : 0;
        b.set("isDeleting", true);
        f.getChildren().each(function (k, j) {
            var m = k.getElements("div[type='rowNum']").get("rowNum");
            if (m > a) {
                var l = m - 1;
                k.getElement("div[type='rowNum']").set("text", l)
            }
        })
    }
}, addNextFocusEvent: function (a, b) {
    a.addEvent("keyup", function (c) {
        var f = Event(c);
        if (f.key == "enter") {
            this.nextCell(a, c, b);
            if (b) {
                b.hide()
            }
        }
    }.bind(this))
}, nextCell: function (a, m, h) {
    this.autoScroll = true;
    var j;
    var s;
    if (a.hasClass("sGrid_data_row_item_div")) {
        j = a;
        s = a
    } else {
        j = a.getParent(".sGrid_data_row_item_div");
        s = a.getParent(".sGrid_data_row_item_div")
    }
    if (!j) {
        j = a.retrieve("lastCell")
    }
    if (a.get("onEnterPress")) {
        var k = this.getFunc(a.get("onEnterPress"));
        var o = k[0](a, m);
        if (o == false) {
            return
        }
    }
    var b;
    if (this.options.nextOrder == "row") {
        b = this.findNextFocusInOneRow(j);
        while (!b) {
            var t = this.getRow(j).getNext();
            if (t == null) {
                try {
                    if ($chk(this.autoInsertFunc)) {
                        this.autoInsertFunc();
                        var g = function (w, v, f) {
                            this.nextCell(w, v, f)
                        }.bind(this);
                        g.delay(50, this, [j, m, h])
                    }
                    m.target.blur()
                } catch (m) {
                }
                return
            }
            j = t.getFirst();
            var p = j.get("type");
            if (["text", "date", "select", "pulltree", "password"].contains(p) && j.get("disabled") != true && j.get("disable") != "true") {
                if (j.getStyle("display") != "none") {
                    b = j
                }
            }
            if (!$chk(b)) {
                b = this.findNextFocusInOneRow(j)
            }
            if (b) {
                if (b.get("type") == "date" || b.get("type") == "pulltree") {
                    this.nextRowScroll = true
                }
            }
        }
    } else {
        if (this.options.nextOrder == "column") {
            var u = this.getCells(j.get("name"));
            b = this.findNextFocusInOneColumn(j, u);
            while (!b) {
                j = j.getNext();
                if (j == null) {
                    m.target.blur();
                    return
                }
                u = this.getCells(j.get("name"));
                b = this.findNextFocusInOneColumn(null, u)
            }
        }
    }
    if (b) {
        this.dataDiv().getChildren(".sGrid_data_row_click_div").each(function (f) {
            f.removeClass("sGrid_data_row_click_div")
        });
        this.getRow(b).addClass("sGrid_data_row_click_div");
        var c = this.getRow(b).addClass("sGrid_data_row_click_div");
        if (this.options.checkMoudle == "true") {
            this.dataDiv().getElements("input:not([disabled])[type=checkbox][checked]").set("checked", false);
            c.getElements("input:not([disabled])[type=checkbox]").set("checked", true);
            if (this.options.rowCheckValidator != false && this.options.rowCheckValidator != "false") {
                var l = c.getElements("input[type=checkbox]:checked:not([disabled])");
                l.fireEvent("change", [l])
            }
            var n = c.getElements("input:not([disabled])[type=radio]");
            n.set("checked", true);
            n.each(function (f) {
                this.radioSetChecked(f.getParent())
            }.bind(this));
            var q = this.dataDiv().getElements("input[type=checkbox]:not([checked])").length;
            if (q == 0) {
                this.getHeaderCheckboxs_noneChecked().set("checked", true)
            } else {
                this.getHeaderCheckboxs_checked().set("checked", false)
            }
        }
        if (h && b.get("type") == "date") {
            h.hide()
        }
        var r = b.getElement("input[type=text]");
        if ($chk(r)) {
            r.focus()
        } else {
            b.fireEvent("click")
        }
    }
    this.autoScroll = false
}, findNextFocusInOneColumn: function (f, b) {
    var g = 0;
    if (f) {
        g = b.indexOf(f) + 1
    }
    while (g < b.length) {
        var a = b[g];
        var c = a.get("type");
        if (["text", "date", "select", "pulltree", "password"].contains(c) && a.get("disabled") != true && a.get("disable") != "true" && a.getStyle("display") != "none") {
            return a
        } else {
            g++
        }
    }
    return null
}, findNextFocusInOneRow: function (c) {
    var a = c.getNext();
    while (a) {
        var b = a.get("type");
        if (["text", "date", "select", "pulltree", "password"].contains(b) && a.get("disabled") != true && a.get("disable") != "true") {
            if (a.getStyle("display") != "none") {
                return a
            }
        }
        a = a.getNext()
    }
}, deleteRow: function (a) {
    var b = this.getRow(a);
    this.removeRowError(b);
    this.options.totalRows = this.options.totalRows / 1 - 1;
    this.deleteRowRowNum(b);
    b.destroy();
    this.buildXY();
    this.scrollHeader();
    this.refreshConsole()
}, setEl: function (f, c, a, g) {
    var b;
    if (c != null) {
        b = "sGrid_data_row_item_" + c
    } else {
        b = "sGrid_data_row_item_lable";
        if (a != null) {
            b = "sGrid_data_row_item_button"
        }
    }
    f.addClass(b)
}, getOneRowFormData: function (b, a) {
    return{fromGird: "fromGird", data: [
        {sword: "SwordForm", name: a, data: this.getOneRowData(b)["tds"]}
    ]}
}, getOneRowGirdData: function (a) {
    return{sword: this.options.sword, name: this.options.name, beanname: this.options.beanname, trs: [this.getOneRowData(a)]}
}, getRowsGirdData: function (b) {
    var a = new Array();
    b.each(function (c) {
        a.push(this.getOneRowData(c))
    }, this);
    return{sword: this.options.sword, name: this.options.name, beanname: this.options.beanname, trs: a}
}, getRowsGridData: function (a) {
    return this.getRowsGirdData(a)
}, getRowsData: function (b) {
    var a = new Array();
    b.each(function (c) {
        a.push(this.getOneRowData(c))
    }, this);
    return a
}, getRow: function (a) {
    if (a.hasClass("sGrid_data_row_div")) {
        return a
    }
    return a.getParent(".sGrid_data_row_div")
}, getRowNum: function (a) {
    return this.getRow(a).get("rowNum")
}, getRealRowNum: function (a) {
    var c = a;
    if ($type(a) == "element") {
        c = this.getRowNum(a)
    }
    var f = c;
    if (this.isPage()) {
        var b;
        if (this.cache()) {
            b = this.getRow(a).get("pageNum");
            if (!$chk(b)) {
                b = this.pageNum()
            }
        } else {
            b = this.pageNum()
        }
        f = (b - 1) * this.rows() + c / 1
    }
    return f
}, getOneRowData: function (a) {
    if (!$defined(a)) {
        return null
    }
    var f = this.getRow(a);
    var b = f.get("status");
    var c;
    if (b == "insert") {
        c = this.getOneRowDataFromDiv(f);
        c.getValue = function (g) {
            var h = this.tds[g];
            if (!$defined(h)) {
                return null
            }
            return h.value
        }
    } else {
        if (this.cache()) {
            c = f.retrieve("rowData")
        } else {
            c = this.options.data[this.getRealRowNum(a) - 1]
        }
    }
    return c
}, getOneRowDataFromDiv: function (a) {
    var c = this.getRow(a);
    var b = {tds: {}, status: "insert"};
    c.getElements("*[name][dataEl=true]").each(function (f) {
        var h, j = {};
        var g = f.get("type");
        if (g == "checkbox" || g == "radio") {
            h = f.getElement("input[type=" + g + "]").get("checked") == true ? 1 : 0
        } else {
            if (["select", "pulltree", "text"].contains(g)) {
                h = f.get("realvalue")
            } else {
                if (g == "password") {
                    h = f.retrieve("realvalue")
                } else {
                    if (g == "file2") {
                        h = f.retrieve("up").getValue()
                    } else {
                        if ($chk(f.get("code"))) {
                            j.code = f.get("code");
                            h = f.get("text")
                        } else {
                            if ($chk(f.get("format"))) {
                                h = f.get("realvalue")
                            } else {
                                h = f.get("text")
                            }
                        }
                    }
                }
            }
        }
        j.value = h;
        b.tds[f.get("name")] = j
    }, this);
    return b
}, createDivEl: function () {
    return new Element("div")
}, createInput: function (b, c, a) {
    if (["checkbox", "radio"].contains(b)) {
        if (c == "true" || c == "1") {
            return new Element("input", {type: b, name: a, checked: true, value: c})
        }
    }
    return new Element("input", {type: b, value: c, name: a})
}, dragHeader: function (b, l, g, f) {
    g.removeClass("sGrid_header_drag_enter_div");
    b.removeClass("sGrid_header_drag_start_div");
    if (!this.dataDiv()) {
        return
    }
    var h = this.getLastShowItemEl().get("name");
    var n = b.get("_for");
    var k = g.get("_for");
    var c = this.getCells(n);
    var a = this.getCells(k);
    if (h == n) {
        c.each(function (p, o) {
            p.inject(a[o], f);
            p.setStyle("border-right", "");
            a[o].setStyle("border-right", "none")
        });
        b.setStyle("border-right", "");
        g.setStyle("border-right", "none")
    } else {
        if (h == k) {
            c.each(function (p, o) {
                p.inject(a[o], f);
                a[o].setStyle("border-right", "");
                p.setStyle("border-right", "none")
            });
            g.setStyle("border-right", "");
            b.setStyle("border-right", "none")
        } else {
            c.each(function (p, o) {
                p.inject(a[o], f)
            })
        }
    }
    var m = this.getItemElByName(n)[0];
    var j = this.getItemElByName(k)[0];
    m.inject(j, f)
}, getCells: function (g) {
    var j = [];
    var k = this.dataDiv().getChildren();
    if (k.length != 0) {
        var a = k[0].getChildren();
        var f = -1;
        for (var h = 0; h < a.length; h++) {
            if (a[h].get("name") == g) {
                f = h;
                break
            }
        }
        for (var b = 0; b < k.length; b++) {
            var l = k[b].getChildren()[f];
            if (l) {
                j.push(l)
            }
        }
    }
    return new Elements(j)
}, getHeaderEl: function (a) {
    return this.header().getChildren("div.sGrid_header_item_div[_for=" + a + "]")
}, gethjRowEl: function (a) {
    return $chk(this.hjRow) ? this.hjRow.getChildren("div.sGrid_hj_row_item_div[name=" + a + "]") : null
}, setHeaderCaption: function (b, a) {
    var f = this.getHeaderEl(b)[0];
    if (f) {
        var c = f.getElement("div.sGrid_header_text_div");
        if (c) {
            c.set("text", a)
        }
    }
}, onePageData: function (g) {
    if (this.isServer()) {
        var f = JSON.decode(this.options.bizParams);
        f.pageNum = this.pageNum();
        f.rows = this.rows();
        f.queryType = "page";
        f.widgetname = this.options.name;
        var c = this.getSwordSort();
        f.sortName = c.options.sortName;
        f.sortFlag = c.options.sortFlag;
        if ($chk(this.options.ptid)) {
            f.tid = this.options.ptid
        }
        pc.postReq({req: f, onSuccess: function (h) {
            var j = this.getResData(this.options.name, h);
            this.setInitData(j);
            if (j.totalRows) {
                this.options.totalRows = j.totalRows;
                this.refreshConsole()
            }
            g(this.data())
        }.bind(this), loaddata: "widget", redirect: false});
        return
    } else {
        var c = this.getSwordSort();
        if (c.options.sortName) {
            c.sort(this.data(), {sortName: c.options.sortName, sortflag: c.options.sortFlag, type: c.options.sortType || "string"})
        }
        var a;
        if (this.options.bufferView == "true") {
            var b = this.getVisibleRows();
            a = this.data().filter(function (j, h) {
                return h >= b.first && h < b.last
            }.bind(this));
            g(a);
            this.createEmptyRows(b.last, this.options.fenye == "false" ? this.totalRows() : this.rows())
        } else {
            a = this.getOnePageData(this.pageNum());
            g(a);
            this.cachePages.include(this.pageNum())
        }
    }
}, createEmptyRows: function (g, a) {
    var b = this.data();
    for (var c = g; c < a; c++) {
        var f = this.createBaseRow(c + 1).setStyle("height", "25px");
        f.store("rowData", b[c]);
        f.inject(this.dataDiv())
    }
}, getOnePageData: function (a) {
    var f = (a - 1) * this.rows();
    var b = f + this.rows() - 1;
    var c = this.data().filter(function (h, g) {
        return g >= f && g <= b
    }.bind(this));
    return c
}, setInitData: function (a) {
    this.options.gridData = a;
    this.options.data = a.trs;
    this.options.data.each(function (b) {
        b.getValue = function (c) {
            var f = this.tds[c];
            if (!$defined(f)) {
                return null
            }
            return f.value
        }
    })
}, getSwordSort: function () {
    if (!this.swordSort) {
        this.swordSort = new SwordSort()
    }
    return this.swordSort
}, initData: function (a) {
    this.clearCache = true;
    this.clearData("all");
    if (!$chk(a)) {
        return
    }
    this.setInitData(a);
    if (!$chk(this.data())) {
        return
    }
    if (a.totalRows >= 0) {
        this.options.fenyeType = "server";
        this.options.totalRows = a.totalRows;
        this.options.pageNum = a.pageNum;
        this.options.rows = a.rows;
        this.options.bizParams = a.bizParams;
        this.sortFlag = a.sortFlag || "";
        this.sortName = a.sortName || ""
    } else {
        this.options.fenyeType = "page";
        this.options.totalRows = this.data().length;
        this.options.pageNum = 1;
        if (this.options.fenye == "false") {
            this.options.rows = this.options.totalRows
        }
    }
    this.delayBuildData(this.data());
    this.refreshConsole();
    this.clearCache = false
}, cache: function () {
    return !this.clearCache && this.options.cache == "true"
}, clearData: function (b) {
    if (!this.cache() || $defined(b)) {
        this.dataDiv().getChildren().each(function (c) {
            c.destroy()
        });
        this.removeAllError();
        this.cachePages = []
    } else {
        this.dataDiv().getChildren().setStyle("display", "none");
        this.dataDiv().getChildren("[cache=false]").set("cache", true);
        var a = this.dataDiv().getChildren(":not([cache])").set("cache", true);
        if (a.length > 0) {
            this.cachePages.include(this.options.lastPageNum)
        }
    }
}, cachePages: [], haveYScroll: function () {
    var a = this.dataDiv();
    var b = a.getChildren();
    if (b.length == 0) {
        return false
    }
    if (this.options.dataY == -1 && this.options.autoHeight != "true") {
        return false
    }
    if (Browser.Engine.trident4) {
        return b[0].getFirst().getHeight() / 1 * b.length + b.length / 1 > a.getHeight()
    } else {
        return this.scrollDiv.getScrollHeight() > this.scrollDiv.getHeight()
    }
}, buildX: function (l) {
    var h = this.haveYScroll();
    var j = "" + this.options.scrollX;
    if (j.contains("%")) {
        this.dataDiv().setStyle("width", j);
        this.header().setStyle("width", j)
    } else {
        if (this.options.scrollX != -1) {
            if (j.contains("px")) {
                this.dataDiv().setStyle("width", j);
                this.header().setStyle("width", j)
            } else {
                this.dataDiv().setStyle("width", j + "px");
                this.header().setStyle("width", j + "px")
            }
        }
    }
    var g = "" + this.options.dataX;
    if (g.contains("%")) {
        if (g != "100%") {
            this.sGrid_div().setStyle("width", g)
        }
        return
    } else {
        if (this.options.dataX != -1) {
            if (g.contains("px")) {
                this.sGrid_div().setStyle("width", g)
            } else {
                this.sGrid_div().setStyle("width", g + "px")
            }
            return
        }
    }
    var b;
    if (l) {
        b = l
    } else {
        b = this.dataDiv().getElement(".sGrid_data_row_div")
    }
    var k;
    var c = 19;
    var f = 0;
    if (true) {
        b = this.header();
        k = b.getElements(".sGrid_header_item_div")
    } else {
        k = b.getElements(".sGrid_data_row_item_div")
    }
    var a = 0;
    k.each(function (m) {
        var n = m.getWidth();
        if (n > 0) {
            n--
        }
        a = a + n
    }, this);
    if (h) {
        a = a + c
    }
    if (Browser.Engine.trident) {
        a = a + f
    }
    this.sGrid_div().setStyle("width", a)
}, buildY: function () {
    if (this.options.dataY == -1 && this.options.autoHeight == "true") {
        var b = this.itemY() * this.rows() + this.rows();
        if (this.hjRow) {
            b = this.itemY() * (this.rows() + 1) + this.rows()
        }
        if (this.options.showHeader == true || this.options.showHeader == "true") {
            b += (this.options.headerY == -1 ? this.options.headerHeight + 1 : this.options.headerY / 1)
        }
        var c = this.options.scrollX.toInt();
        var a = this.options.dataX.toInt();
        if ($type(this.options.scrollX) == "string" && this.options.scrollX.contains("%")) {
            if (c > 100) {
                b += 17
            }
        } else {
            if (c > a) {
                b += 17
            }
        }
        this.scrollDiv.setStyle("height", b)
    } else {
        if (this.options.dataY != -1) {
            this.scrollDiv.setStyle("height", this.dataY())
        }
    }
}, buildXY: function (a) {
    if (this.options.totalRows == 0) {
        this.dataDiv().setStyle("display", "none")
    } else {
        this.dataDiv().setStyle("display", "")
    }
    this.buildX(a);
    this.buildY()
}, getDataDivFxScroll: function () {
    if (this.dataDivFxScroll == null) {
        this.dataDivFxScroll = new Fx.Scroll(this.scrollDiv);
        this.dataDivFxScroll.toBottom = function () {
            var a = function () {
                this.scrollDiv.scrollTop = this.scrollDiv.getScrollSize().y
            };
            a.delay(1, this)
        }.bind(this)
    }
    return this.dataDivFxScroll
}, createPanel: function (f, c) {
    var a = new Element("div", {"class": "swordgird_panel_header"});
    new Element("div", {"class": "swordgird_panel_header_1"}).inject(a);
    new Element("div", {"class": "swordgird_panel_header_2"}).inject(a);
    var b = new Element("div", {"class": "swordgird_panel_header_caption", title: c}).appendText(c).inject(a);
    this.collapseDiv = new Element("div", {"class": "x-tool", title: "收缩", events: {click: function (g) {
        this.toggle()
    }.bind(this)}}).inject(b, "top");
    this.options.panel = a;
    a.inject(f)
}, createToolConsole: function (a) {
    if ((this.options.toolConsole == "true" || this.options.toolConsole == true) && this.consoleItems() && this.consoleItems().length > 0) {
        this.toolpanel = new Element("div", {"class": "swordgird_toolpanel_header"});
        this.toolpanel.inject(a)
    }
}, createConsolePageButton: function () {
    if (this.options.consoleStyle == "button") {
        this.createConsolePageButton_buttonStyle()
    } else {
        if (this.options.consoleStyle == "image") {
            this.createConsolePageButton_imageStyle()
        }
    }
}, clickQueDing: function () {
    if (this.vObj.validate(this.sGrid_console_target_input)) {
        if (this.sGrid_console_target_input.get("value") / 1 == this.pageNum()) {
            this.alert("" + i18n.gridGo);
            return
        }
        this.loadPage(this.sGrid_console_target_input.get("value") / 1)
    }
}, createConsolePageButton_imageStyle: function () {
    if (this.options.fenye != "false") {
        this.consoleButton_first = new Element("button", {"class": "sGrid_console_item_button_first", html: "&nbsp", fenye: "true"}).inject(this.console());
        this.consoleButton_prev = new Element("button", {"class": "sGrid_console_item_button_prev", html: "&nbsp", fenye: "true"}).inject(this.console());
        new Element("lable", {"class": "sGrid_console_text_lable sGrid_console_text_lable_di", html: "" + i18n.gridDi}).inject(this.console());
        this.options.sGrid_console_page_lable = new Element("input", {"class": "sGrid_console_target_input", value: "0", rule: "numberInt_must", error: "" + i18n.gridGoErr, fenye: "true", name: this.options.name + "_sGrid_console_target_input", events: {keyup: function (a) {
            if (a.key == "enter") {
                this.clickQueDing()
            }
        }.bind(this)}}).inject(this.console());
        this.sGrid_console_target_input = this.options.sGrid_console_page_lable;
        this.vObj._add(this.options.sGrid_console_page_lable);
        new Element("lable", {"class": "sGrid_console_text_lable", html: "" + i18n.gridYeGong}).inject(this.console());
        this.options.sGrid_console_totalPage_lable = new Element("lable", {"class": "sGrid_console_text_lable", html: "0"}).inject(this.console());
        new Element("lable", {"class": "sGrid_console_text_lable sGrid_console_text_lable_ye", html: "" + i18n.gridYe}).inject(this.console());
        this.consoleButton_next = new Element("button", {"class": "sGrid_console_item_button_next", html: "&nbsp", fenye: "true"}).inject(this.console());
        this.consoleButton_last = new Element("button", {"class": "sGrid_console_item_button_last", html: "&nbsp", fenye: "true"}).inject(this.console());
        new Element("lable", {"class": "sGrid_console_text_lable sGrid_console_text_lable_mei", html: "" + i18n.gridMeiYeShow}).inject(this.console());
        this.options.sGrid_console_rows_lable = new Element("lable", {"class": "sGrid_console_text_lable", html: this.rows()}).inject(this.console());
        new Element("lable", {"class": "sGrid_console_text_lable sGrid_console_text_lable_tiao", html: "" + i18n.gridTiao}).inject(this.console())
    }
    new Element("lable", {"class": "sGrid_console_text_lable", html: "" + i18n.gridJsd}).inject(this.console());
    this.options.sGrid_console_totalRows_lable = new Element("lable", {"class": "sGrid_console_text_lable", html: this.totalRows()}).inject(this.console());
    new Element("lable", {"class": "sGrid_console_text_lable sGrid_console_text_lable_lu", html: "" + i18n.gridJsdL}).inject(this.console())
}, createConsolePageButton_buttonStyle: function () {
    if (this.options.fenye != "false") {
        this.consoleButton_first = new Element("input", {type: "button", "class": "sGrid_console_item_button", value: i18n.firstPage, fenye: "true"}).hoverClass("sGrid_console_item_button_hover").inject(this.console());
        this.consoleButton_prev = new Element("input", {type: "button", "class": "sGrid_console_item_button", value: i18n.previousPage, fenye: "true"}).hoverClass("sGrid_console_item_button_hover").inject(this.console());
        this.consoleButton_next = new Element("input", {type: "button", "class": "sGrid_console_item_button", value: i18n.nextPage, fenye: "true"}).hoverClass("sGrid_console_item_button_hover").inject(this.console());
        this.consoleButton_last = new Element("input", {type: "button", "class": "sGrid_console_item_button", value: i18n.endPage, fenye: "true"}).hoverClass("sGrid_console_item_button_hover").inject(this.console());
        this.options.sGrid_console_page_lable = new Element("lable", {"class": "sGrid_console_text_lable", html: "0"}).inject(this.console());
        new Element("lable", {"class": "sGrid_console_text_lable", html: "/"}).inject(this.console());
        this.options.sGrid_console_totalPage_lable = new Element("lable", {"class": "sGrid_console_text_lable", html: "0"}).inject(this.console());
        new Element("lable", {"class": "sGrid_console_text_lable", html: "" + i18n.gridYe}).inject(this.console());
        this.sGrid_console_target_input = new Element("input", {"class": "sGrid_console_target_input", rule: "numberInt_must", error: "" + i18n.gridGoErr, name: this.options.name + "_sGrid_console_target_input", fenye: "true"}).inject(this.console());
        this.vObj._add(this.sGrid_console_target_input);
        this.consoleButton_ok = new Element("input", {type: "button", "class": "sGrid_console_item_button sGrid_console_target_ok", value: "" + i18n.okBtnName, fenye: "true"}).hoverClass("sGrid_console_target_ok_hover").inject(this.console());
        new Element("lable", {"class": "sGrid_console_text_lable", html: "" + i18n.gridMeiYe}).inject(this.console());
        this.options.sGrid_console_rows_lable = new Element("lable", {"class": "sGrid_console_text_lable", html: this.rows()}).inject(this.console());
        new Element("lable", {"class": "sGrid_console_text_lable", html: "" + i18n.gridTiao}).inject(this.console())
    }
    new Element("lable", {"class": "sGrid_console_text_lable", html: "" + i18n.gridGong}).inject(this.console());
    this.options.sGrid_console_totalRows_lable = new Element("lable", {"class": "sGrid_console_text_lable", html: this.totalRows()}).inject(this.console());
    new Element("lable", {"class": "sGrid_console_text_lable", html: "" + i18n.gridTiao}).inject(this.console())
}, lableClick: function (b, a) {
    if (b.get("disable") == "true") {
        return
    }
    this.getFunc(a.get("_onClick"))[0](this.getOneRowData(b), this.getRow(b), b)
}, tableCellTip: function (c, a, b) {
    if ($chk(c.get("tipTitle"))) {
        if (!window.tooltips) {
            window.tooltips = pageContainer.create("SwordToolTips");
            this.celltooltips = window.tooltips
        }
        var f = c.get("tipTitle");
        this.celltooltips.createTip(a, f)
    }
}, textClick: function (b, l, h, a, k) {
    var j = b.get("rule");
    var f = b.get("msg");
    if (b.get("disable") == "true") {
        return
    }
    if (b.get("createInput") == "true") {
        return
    }
    var n = b.get("realvalue");
    if (h == "password") {
        n = b.retrieve("realvalue")
    }
    b.set("html", "");
    var g = this.createInput(h, n, a).inject(b).addEvent("blur", function () {
        if (!$chk(j) || this.vObj.doValidate(g).state) {
            b.set("createInput", "false");
            var p = g.get("value");
            var r = sword_fmt.convertText(l, p).value;
            b.set("value", p);
            b.set("realvalue", p);
            b.set("showvalue", r);
            this.removeError(k, a);
            this.updateCell(b, p);
            if (l.get("_onBlur")) {
                this.getFunc(l.get("_onBlur"))[0](p, r, this.getOneRowData(b), b, this.getRow(b), n || "", this);
                this.refreshConsole()
            }
            this.celltooltips.hide();
            g.destroy()
        } else {
            if (b.get("realvalue") != "") {
                b.setProperties({realvalue: "", title: "", showvalue: "", value: ""})
            }
            this.addError(k, a)
        }
        if (this.hjRow) {
            var q = this.hjRow.getElement("div[name='" + b.get("name") + "']");
            if (q) {
                if (q.get("isHj") && q.get("isHj").toUpperCase() == "TRUE") {
                    var o = q.get("text");
                    var r = html = this.getHj(b.get("name")) || "";
                    if (q.get("format")) {
                        r = sword_fmt.convertText(q, r).value
                    }
                    q.set({text: r, realvalue: html || "", title: r});
                    q.fireEvent("onchange", [o, q.get("text")])
                }
            }
        }
    }.bind(this));
    this.tableCellTip(b, g, a);
    if ($chk(j)) {
        g.set("rule", j)
    }
    if ($chk(b.get("maxLength"))) {
        g.set("maxlength", b.get("maxLength"))
    }
    if ($chk(f)) {
        g.set("msg", f)
    }
    if ($chk(j)) {
        this.vObj._add(g)
    }
    g.addClass("sGrid_data_row_item_text_input");
    g.setStyle("width", b.getWidth());
    g.setStyle("float", "left");
    b.set("createInput", "true");
    if (l.get("onEnterPress")) {
        g.set("onEnterPress", l.get("onEnterPress"))
    }
    if (l.get("onfocus")) {
        g.set("onfocus", l.get("onfocus"))
    }
    this.addNextFocusEvent(g);
    g.focus();
    g.focus();
    g.select();
    var c = g.get("value");
    var m = sword_fmt.convertText(l, c).value;
    if ($defined(j) && j.contains("must")) {
        g.setStyle("background-color", "#b5e3df")
    }
    if (l.get("_onClick")) {
        this.getFunc(l.get("_onClick"))[0](c, m, this.getOneRowData(b), b, this.getRow(b), n)
    }
}, reset: function () {
    this.initData({trs: []})
}, readonlyDiv: null, readonly: function () {
    var f = this;
    f.header().getElements("input[type=checkbox]").set("disabled", "true");
    f.console().getElements("input[type=button]:not([fenye=true])").each(function (g) {
        f.disableConsoleBtn(g, true)
    });
    var b = f.dataDiv();
    var a = f.scrollDiv.getWidth();
    if (f.scrollDiv.getScrollHeight() > f.scrollDiv.getHeight()) {
        a = a - 16
    }
    var j = f.scrollDiv.getHeight() - this.header().getHeight();
    var c = j;
    if (f.scrollDiv.getScrollWidth() > f.scrollDiv.getWidth()) {
        c = c - 16
    }
    if (f.readonlyDiv) {
        f.readonlyDiv.setStyles({display: "", width: a, height: c, "margin-top": -j});
        return
    }
    f.readonlyDiv = b.clone(false).setStyles({"background-color": "white", "margin-top": -j, height: c, opacity: 0.2, width: a, border: "none", "float": "left"}).inject(f.scrollDiv, "after");
    if (Browser.Engine.trident4 || Browser.Engine.trident5) {
        f.readonlyDiv.setStyle("position", "relative")
    }
}, editable: function () {
    var a = this;
    if (a.readonlyDiv) {
        a.readonlyDiv.setStyle("display", "none")
    }
    a.header().getElements("input[type=checkbox][disabled]").removeProperty("disabled");
    a.console().getElements("input[type=button][disabled]:not([fenye=true])").each(function (b) {
        a.disableConsoleBtn(b, false)
    })
}, getAllGridShowData: function (c, b) {
    var a = [];
    if (!c) {
        c = this.getExcelItems()
    }
    var f = ($defined(b)) ? this.getCheckedData(b).trs : this.data();
    f.each(function (h, j) {
        if (h.status == "delete") {
            return
        }
        var g = {tds: {}};
        a.push(g);
        c.each(function (t) {
            var k = t.get("name");
            var p = t.get("type");
            var q = t.get("format");
            var r = h.tds[k];
            if (r) {
                r = r.value;
                if (!$defined(r)) {
                    return
                }
                if (q) {
                    r = sword_fmt.convertText(t, r).value
                } else {
                    if (p == "date") {
                        r = this.getCalendar().getShowValue(t, r)
                    } else {
                        if (p == "select") {
                            var n = this.getSelect().dm2mc(t, r);
                            r = n.caption;
                            if ($type(n) == "string") {
                                r = n
                            }
                        } else {
                            if (p == "pulltree") {
                                if (r.contains("code") && r.contains("caption")) {
                                    var s = r.split("|");
                                    r = s[1].split(",")[1]
                                } else {
                                    var m = $w(t.get("treename"));
                                    var o = new Hash();
                                    o.set(m.options.cascadeSign.id, r);
                                    var l = m.getTreeNode(o);
                                    if (l) {
                                        r = l.get("caption")
                                    }
                                }
                            }
                        }
                    }
                }
                g.tds[k] = {value: r}
            } else {
                if (p == "rowNum") {
                    r = j + 1;
                    g.tds[k] = {value: r}
                }
            }
        }, this)
    }, this);
    return{sword: this.options.sword, name: this.options.name, beanname: this.options.beanname, trs: a}
}, getExcelItems: function () {
    return this.options.pNode.getChildren(">div[name]:not([console]):not([show=false]):not([type=checkbox]):not([type=radio]):not([type=button]):not([act])")
}, getExcelItem: function (a) {
    return this.options.pNode.getChildren(">div[name=" + a + "]:not([console]):not([show=false]):not([type=checkbox]):not([type=radio]):not([type=button]):not([act])")
}, getGridExcelInfo: function (b) {
    var c = this.getExcelItems();
    var g = this.getAllGridShowData(c, b);
    var j = {};
    var f = {beanname: "", sword: "SwordForm", name: this.options.name + "_headerInfo", data: j};
    var h = {};
    var a = {beanname: "", sword: "SwordForm", name: this.options.name + "_headerIndex", data: h};
    c.each(function (m, l) {
        var k = m.get("name");
        j[k] = {value: m.get("caption")};
        h[l + ""] = {value: k}
    }, this);
    return[g, f, a]
}, getAllNoDeleteGridData: function () {
    var b = this.getAllGridData();
    var a = b.trs.filter(function (c) {
        if (c.status != "delete") {
            return true
        }
    });
    return{sword: this.options.sword, name: this.options.name, beanname: this.options.beanname, trs: a}
}, _itemSwitch: function (c, h, b, k) {
    if (!$chk(c) || !$chk(h)) {
        return
    }
    var j = k || this.getCheckedRow();
    var a = j.getCell(c).set("type", h);
    if (b.css) {
        b.css.split(";").each(function (m, l) {
            a.setStyle(m.split(":")[0], m.split(":")[1])
        })
    }
    a.set(b);
    var g = a.clone(false).set("switched", "true").set("createInput", "false").inject(a, "before");
    a.destroy();
    var f = this.getExcelItem(c)[0].clone().set("type", h);
    f.set(b);
    this.addCellApi(g, f, h);
    this.createCellEl(f, "", this.getRowNum(j), this.getOneRowData(g), g);
    f.destroy();
    this.celltooltips.hide()
}, insertColumn: function (j, h) {
    if ($chk(j.name)) {
        var b = new Element("div").set(j);
        var f = this.getLastShowItemEl();
        f.setStyle("border-right", "");
        b.inject(f, "after").setStyle("border-right", "none");
        this.options.sGrid_div.destroy();
        this.intiItems = false;
        this.options = $extend(this.options, h);
        this.initParam(this.options.pNode);
        if ($chk(j.value)) {
            var g = this.options.gridData.trs;
            for (var a = 0; a < g.length; a++) {
                var c = g[a].tds;
                c[j.name] = {value: j.value}
            }
        }
        this.initData(this.options.gridData)
    } else {
        swordAlert("请定义新增列的name属性!")
    }
}, getCurPageRowByCellValue: function (c, b) {
    var a = this.dataDiv().getElement("div.sGrid_data_row_item_div[realvalue=" + b + "][name=" + c + "]");
    if (a) {
        return this.getRow(a)
    }
}, toggle: function () {
    if (this.collapseDiv.hasClass("x-tool-s")) {
        this.extendTable()
    } else {
        this.collapseTable()
    }
}, collapseTable: function () {
    var a = this.sGrid_div().getChildren("div[sword=SwordToolBar][bindto=" + this.options.name + "]")[0];
    if (a) {
        a.setStyle("display", "none")
    }
    this.scrollDiv.setStyle("display", "none");
    if (this.options.showConsole == "true") {
        this.console().setStyle("display", "none")
    }
    if (this.toolpanel) {
        this.toolpanel.setStyle("display", "none")
    }
    this.collapseDiv.set("title", "展开");
    this.collapseDiv.addClass("x-tool-s")
}, extendTable: function () {
    var a = this.sGrid_div().getChildren("div[sword=SwordToolBar][bindto=" + this.options.name + "]")[0];
    if (a) {
        a.setStyle("display", "")
    }
    this.scrollDiv.setStyle("display", "");
    if (this.options.showConsole == "true") {
        this.console().setStyle("display", "")
    }
    if (this.toolpanel) {
        this.toolpanel.setStyle("display", "")
    }
    this.collapseDiv.set("title", "收缩");
    this.collapseDiv.removeClass("x-tool-s")
}, setCellRuleMust: function (b, a) {
    this.setRule(b, a, "must")
}, setCellRule: function (f, a, c) {
    var b = a.get("name");
    this.setRule(f, b, c)
}, setRule: function (j, f, h) {
    if (!$chk(j)) {
        return
    }
    var a = j.getCell(f);
    if (!$chk(a)) {
        return
    }
    a.set("rule", h);
    var c = a.getElement("input");
    if (c) {
        this.vObj.clearElTip(c.set("rule", h));
        c.destroy();
        a.set("createInput", "false")
    }
    this.updateCell(a, a.get("realvalue"), a.get("text"));
    if (h == "") {
        this.removeError(j.get("rowNum"), f)
    }
    if (h == "must") {
        var b = this.options.sGrid_header_div.getElement("div[_for='" + f + "']");
        if (!b.getElement("span")) {
            var g = new Element("span", {"class": "red", text: "*"});
            g.inject(b.getElement("div.sGrid_header_text_div"), "top")
        }
    }
}, isradioSetChecked: true, radioSetChecked: function (a) {
    this.isradioSetChecked = false;
    if (!$chk(a)) {
        return
    }
    var f = a.get("name");
    var c = a.get("data");
    this.data().each(function (j, h) {
        if (!this._inCache(h)) {
            var g = j.tds[f];
            if (g == undefined) {
                j.tds[f] = {};
                g = j.tds[f]
            }
            if (g.value == "1") {
                if (g.originValue == undefined) {
                    g.originValue = g.value || ""
                }
                g.value = "0";
                if (c) {
                    g.status = "update";
                    j.status = "update"
                }
            }
        }
    }, this);
    this.dataDiv().getChildren('div[status!="delete"][row]').each(function (k) {
        var l = k.getCell(f);
        var j = l.getElement("input");
        if (!$chk(j)) {
            return
        }
        var h = j.get("value");
        if (h == "1") {
            j.set("value", "0");
            if (c) {
                var g = k.get("status");
                if (g == "insert") {
                    return
                }
                if (!$chk(g) || g == "update") {
                    this.updateCell(l, j.get("checked") ? "0" : "0")
                }
            }
        }
    }.bind(this));
    var b = a.getElement("input");
    b.set("value", "1");
    this.updateCell(a, b.get("checked") ? "1" : "0");
    this.isradioSetChecked = true
}});
SwordGrid.Iterator = new Class({$family: {name: "SwordGrid.Iterator"}, node: $empty, iterator: $empty, lastSign: true, dataDetph: 0, domainData: [], initialize: function (a, b) {
    this.iterator(a);
    if ($defined(b)) {
        this.dataDepth = b
    }
}, hasChildNodes: $lambda(false), isLast: $lambda(true), getAttributes: $empty, getAttribute: $empty, getChildNodes: $empty, setParentSign: function (a, b) {
    SwordGrid.Iterator.code = a;
    SwordGrid.Iterator.pcode = b
}});
SwordGrid.Iterator.newInstance = function (f, b, c) {
    var a = null;
    SwordGrid.Iterator.treeNodeNum = 0;
    if ($chk(b) && "json".test(b.trim(), "i")) {
        a = new SwordGrid.JSONIterator(f || {}, 0)
    } else {
        if ($chk(b) && "jsonAptitude".test(b.trim(), "i")) {
            a = new SwordGrid.JSONAptitudeIterator(f, 0);
            a.setDomainData(f);
            a.setParentSign(c.id, c.pid, f)
        } else {
            a = new SwordGrid.XMLIterator(f, 0)
        }
    }
    return a
};
SwordGrid.XMLIterator = new Class({Extends: SwordGrid.Iterator, setLastSign: function (a) {
    this.lastSign = a
}, iterator: function (a) {
    this.node = a
}, hasChildNodes: function () {
    return this.node.hasChildNodes()
}, getChildNodes: function () {
    var b = new Array();
    this.dataDepth++;
    for (var a = 0; a < this.node.childNodes.length; a++) {
        if ((/[^\t\n\r ]/.test(this.node.childNodes[a].data))) {
            var c = new SwordGrid.XMLIterator(this.node.childNodes[a], this.dataDepth);
            c.setLastSign(false);
            b.push(c)
        }
    }
    if (b.length > 0) {
        b[b.length - 1].setLastSign(true)
    }
    return b
}, getAttributes: function () {
    return this.node.attributes
}, getAttribute: function (a) {
    return this.node.getAttribute(a)
}, isLast: function () {
    if (this.node.parentNode == null || this.node.parentNode.nodeName == "#document" || this.lastSign) {
        return true
    }
    return false
}});
SwordGrid.JSONIterator = new Class({Extends: SwordGrid.Iterator, attributes: [], iterator: function (a) {
    this.node = new Hash(a)
}, setLastSign: function (a) {
    this.lastSign = a
}, hasChildNodes: function () {
    var a = false;
    a = this.node.some(function (c, b) {
        return $type(c) == "array" || $type(c) == "object"
    });
    return a
}, getChildNodes: function () {
    var a = new Array();
    this.dataDepth++;
    this.node.getKeys().each(function (f, b) {
        if ($type(this.node.get(f)) == "array") {
            this.node.get(f).each(function (h) {
                var g = new SwordGrid.JSONIterator(h, this.dataDepth);
                g.setLastSign(false);
                a.push(g)
            }.bind(this))
        } else {
            if ($type(this.node.get(f)) == "object") {
                var c = new SwordGrid.JSONIterator(this.node.get(f), this.dataDepth);
                c.setLastSign(false);
                a.push(c)
            }
        }
    }.bind(this));
    if (a.length > 0) {
        a[a.length - 1].setLastSign(true)
    }
    return a
}, getAttributes: function () {
    if (this.attributes.length != 0) {
        return this.attributes
    }
    var a = new Array();
    this.node.getKeys().each(function (b) {
        switch ($type(this.node.get(b))) {
            case"string":
            case"number":
            case"boolean":
                a.push({nodeName: b, nodeValue: this.node.get(b)});
            case false:
                return null
        }
    }.bind(this));
    this.attributes = a;
    return a
}, getAttribute: function (a) {
    if ($defined(this.node)) {
        return this.node.get(a)
    } else {
        return null
    }
}, isLast: function () {
    return this.lastSign
}});
SwordGrid.JSONAptitudeIterator = new Class({Extends: SwordGrid.Iterator, current: null, tdsSign: "tds", rootNodes: [], childNodes: [], iterator: function (a) {
    this.node = a
}, setLastSign: function (a) {
    this.lastSign = a
}, hasChildNodes: function () {
    return(this.getChildNodes() != 0)
}, setDomainData: function (a) {
    this.domainData = a
}, getRootNodes: function () {
    this.dataDepth == 0;
    if ($defined(this.domainData) && this.domainData.length > 0 && this.rootNodes.length == 0) {
        this.dataDepth++;
        for (var b = 0; b < this.domainData.length; b++) {
            var f = true;
            for (var a = 0; a < this.domainData.length; a++) {
                if (this.domainData[b][this.tdsSign][SwordGrid.Iterator.pcode]["value"] == this.domainData[a][this.tdsSign][SwordGrid.Iterator.code]["value"]) {
                    f = false;
                    break
                }
            }
            if (f) {
                var c = new SwordGrid.JSONAptitudeIterator(this.domainData[b], this.dataDepth);
                c.setLastSign(false);
                c.setDomainData(this.domainData);
                this.rootNodes.push(c)
            }
        }
    }
    return this.rootNodes
}, getChildNodes: function () {
    if ($defined(this.domainData) && this.domainData.length > 0 && this.childNodes.length == 0) {
        this.dataDepth++;
        for (var a = 0; a < this.domainData.length; a++) {
            if (this.domainData[a][this.tdsSign][SwordGrid.Iterator.pcode]["value"] == this.node[this.tdsSign][SwordGrid.Iterator.code]["value"]) {
                var b = new SwordGrid.JSONAptitudeIterator(this.domainData[a], this.dataDepth);
                b.setLastSign(false);
                this.childNodes.push(b);
                b.setDomainData(this.domainData)
            }
        }
        if (this.childNodes.length > 0) {
            this.childNodes[this.childNodes.length - 1].setLastSign(true)
        }
    }
    return this.childNodes
}, getAttributes: function () {
    var b = new Array();
    var a = new Hash(this.node);
    a.getKeys().each(function (c) {
        switch ($type(a.get(c))) {
            case"string":
            case"number":
            case"boolean":
                b.push({nodeName: c, nodeValue: a.get(c)});
            case false:
                return null
        }
    });
    return b
}, getAttribute: function (a) {
    if ($defined(this.node)) {
        return this.node[a]
    } else {
        return null
    }
}, isLast: function () {
    return this.lastSign
}});
var SwordMask = new Class({Implements: [Events, Options], options: {background: null, opacity: 1, zIndex: 30000, position: "absolute", left: 0, top: 0, width: 0, height: 0, type: "loading9"}, maskDiv: null, maskIframe: null, maskState: null, divTw: null, el: null, initialize: function (a) {
    this.setOptions(a);
    this.initEl()
}, initEl: function () {
    this.el = new Element("div", {})
}, initParam: function (a) {
}, initData: function () {
}, initDimension: function (b, a) {
    if ($(b).getSize().x == $(b).getScrollSize().x) {
        this.options.left = $(b).getPosition().x;
        this.options.width = $(b).getSize().x
    } else {
        this.options.left = $(b).getPosition().x + $(b).getScroll().x;
        this.options.width = $(b).getSize().x
    }
    if ($(b).getSize().y == $(b).getScrollSize().y) {
        this.options.top = $(b).getPosition().y;
        this.options.height = $(b).getSize().y
    } else {
        this.options.top = $(b).getPosition().y + $(b).getScroll().y;
        this.options.height = $(b).getSize().y
    }
    if (this.isBody(b)) {
        this.options.top = 0;
        this.options.left = 0;
        this.options.width = $(b).getScrollSize().x;
        this.options.height = $(b).getScrollSize().y
    }
    if (a != null) {
        this.initialize(a)
    }
}, mask: function (g, f, a) {
    if ($type(g) == "element" && $(g).getHeight() == 0 && $(g).getWidth() == 0) {
        return
    }
    if (!this.maskState) {
        if ($defined(f)) {
            if ($type(f) == "string") {
                this.el.addClass(f);
                this.el.setStyles({width: 105, height: 75, display: "block"})
            } else {
                if ($type(f) == "element") {
                    this.el = f
                }
            }
        } else {
            this.el.setStyle("display", "block");
            this.el.addClass(this.options.type)
        }
        ($type(g) == "element") ? this.initDimension(g, a) : this.initialize(a);
        var h = this.options.width - ((Browser.Engine.trident) ? 1 : 4);
        if (h < 0) {
            h = 0
        }
        var c = this.options.height - ((Browser.Engine.trident) ? 1 : 4);
        if (c < 0) {
            c = 0
        }
        var b = window.document;
        if ($type(window.document.body) == "element" && $(window.document.body).getHeight() == 0 && $(window.document.body).getWidth() == 0) {
            b = parent.window.document
        }
        this.maskDiv = new Element("div", {"class": "maskDivEl", styles: {"z-index": this.options.zIndex, filter: "Alpha(opacity=0)", opacity: this.options.opacity, position: this.options.position, left: this.options.left, top: this.options.top, width: h, height: c, display: "block"}}).inject(b.body);
        if (this.options.background) {
            this.maskDiv.setStyle("background", this.options.background)
        }
        this.maskIframe = new Element("iframe", {"class": "maskDivEl", styles: {"z-index": this.options.zIndex - 1, filter: "Alpha(opacity=" + this.options.opacity + ")", opacity: this.options.opacity, position: this.options.position, left: this.options.left, top: this.options.top, width: h, height: c, display: "block"}}).inject(b.body);
        if (this.options.background) {
            this.maskIframe.setStyle("background", this.options.background)
        }
        if ($defined(this.el)) {
            $(this.el).inject(b.body);
            if (this.isBody(g)) {
                this.el.setStyles({position: "absolute", left: ($(g).getSize().x - this.el.getSize().x) / 2 + $(g).getScroll().x, "z-index": this.options.zIndex + 1});
                this.setTop(this.el, ($(g).getSize().y - this.el.getSize().y) / 2 + $(g).getScroll().y)
            } else {
                this.el.setStyles({position: "absolute", left: this.options.left + (this.options.width - this.el.getSize().x) / 2, "z-index": this.options.zIndex + 1});
                this.setTop(this.el, this.options.top + (this.options.height - this.el.getSize().y) / 2)
            }
        }
        this.maskState = true
    }
}, setTop: function (b, a) {
    if (a / 1 < 0 || (a + "").indexOf("-") >= 0) {
        a = 0
    }
    b.setStyle("top", a)
}, getElPosition: function () {
    return{position: this.el.getStyle("position"), left: this.el.getStyle("left"), top: this.el.getStyle("top"), "z-index": this.el.getStyle("z-index")}
}, unmask: function (a) {
    if (!$defined(a)) {
        a = 0
    }
    if (a == 0) {
        this.excute()
    } else {
        this.excute.delay(a, this)
    }
}, excute: function () {
    this.maskState = false;
    if ($defined(this.el)) {
        this.el.style.display = "none"
    }
    if (this.maskDiv) {
        this.maskDiv.destroy()
    }
    if (this.maskIframe) {
        this.maskIframe.destroy()
    }
    this.maskDiv = null;
    this.maskIframe = null
}, isBody: function (a) {
    return(/^(?:body|html)$/i).test((a.get("tag") || a.tagName))
}});
var SwordMenu = new Class({Implements: [Events, Options], name: "SwordMenu", options: {sword: null, name: "menu", dataName: null, pNode: null, pos: "false", left: 100, top: 100, width: 200, height: 30, zIndex: 100000, itemWidth: "150px", itemHeight: null, startLayer: 1, dataStr: null, ctrl: "", tid: "", dataType: "json", type: "vertical", isShow: "true", isHighlight: "false", displayTag: "caption", onSelect: null, onLoadDataFinish: null}, menuInput: null, menuZeroLevelDiv: null, menuZeroLevelUL: null, data: null, currentSelectItem: null, clickedItem: null, foldFlag: true, tempTable: null, root: [], childs: new Hash(), initialize: function (a) {
    this.setOptions(a)
}, initParam: function (a) {
    this.htmlOptions(a);
    this.options.pNode = a;
    if (($chk(this.options.tid) || $chk(this.options.ctrl)) || ((!$chk(this.options.tid) && !$chk(this.options.ctrl)) && $chk(this.options.dataStr))) {
        this.buildData()
    }
    if ($chk(this.data) && !$chk(this.menuZeroLevelDiv)) {
        this.buildMenuDiv()
    }
}, initData: function (a) {
    if ($defined(a)) {
        this.data = a
    }
    this.build()
}, build: function () {
    if ($chk(this.menuZeroLevelDiv)) {
        this.menuZeroLevelDiv.destroy()
    }
    this.root.empty();
    this.buildData();
    this.buildMenuDiv()
}, display: function (a) {
    this.setOptions(a);
    this.menuZeroLevelDiv.setStyles({left: a.left, top: a.top});
    this.menuZeroLevelDiv.setStyle("display", "")
}, hide: function () {
    this.menuZeroLevelDiv.setStyle("display", "none")
}, buildData: function () {
    if (!$defined(this.data)) {
        if (!$chk(this.options.dataStr)) {
            if (this.options.ctrl != "" || this.options.tid != "") {
                this.getDataByCtrl()
            } else {
                if ($defined($("SwordPageData"))) {
                    if ($chk(this.options.dataName)) {
                        this.data = pageContainer.getInitDataByDataName(this.options.dataName).data
                    } else {
                        this.data = pageContainer.getInitData(this.options.name).data
                    }
                }
            }
        } else {
            this.data = JSON.decode(this.options.dataStr).data
        }
    } else {
        this.data = this.data.data
    }
    this.parseData()
}, getDataByCtrl: function () {
    var c = new Hash();
    c.set("sword", "SwordTree");
    c.set("name", this.options.name);
    c.set("data", [this.data]);
    var a = new Hash();
    a.set("sword", "attr");
    a.set("name", "treeName");
    a.set("value", this.options.name);
    var b = pageContainer.getReq({tid: this.options.tid, ctrl: this.options.ctrl, widgets: [c, a]});
    pageContainer.postReq({req: b, async: false, onSuccess: function (f) {
        var g = pageContainer.getResData(this.options.name, f);
        this.data = g.data;
        this.fireEvent("onLoadDataFinish", f)
    }.bind(this), onError: function (f) {
    }.bind(this)})
}, buildMenuDiv: function () {
    this.menuZeroLevelDiv = new Element("div", {name: "swordMenuDiv_null", pCode: "null", id: this.options.name}).inject(this.options.pNode);
    if (this.options.pos == "false") {
        this.menuZeroLevelDiv.inject(this.options.pNode)
    } else {
        this.menuZeroLevelDiv.setStyles({position: "absolute", "z-index": this.options.zIndex, left: this.options.left, top: this.options.top, width: this.options.width, height: this.options.height})
    }
    var a = this.buildTable(this.menuZeroLevelDiv);
    this.menuZeroLevelUL = new Element("ul", {}).inject(a);
    this.buildZeroLevelMenuLI()
}, buildTable: function (f) {
    tempTable = new Element("table", {"class": "nav_box"}).inject(f);
    var b = new Element("tbody").inject(tempTable);
    var a = new Element("tr").inject(b);
    new Element("td", {"class": "cl"}).inject(a);
    var c = new Element("td", {"class": "cont"}).inject(a);
    new Element("td", {"class": "cr"}).inject(a);
    tempTable.addEvent("mouseout", function (g) {
        this.foldFlag = true;
        this.fold.delay(500, this)
    }.bind(this));
    tempTable.addEvent("mouseover", function (g) {
        this.foldFlag = false
    }.bind(this));
    return c
}, addStyle: function (a) {
    if (this.options.type == "horizontal") {
        a.addClass("sty_2")
    } else {
        if (this.options.type == "vertical") {
            a.addClass("sty_1")
        }
    }
}, parseData: function () {
    if ($chk(this.data)) {
        this.getRoot()
    }
}, getRoot: function () {
    for (var f = 0; f < this.data.length; f++) {
        var h = this.data[f]["pcode"];
        var a = true;
        for (var b = 0; b < this.data.length; b++) {
            var g = this.data[b]["code"];
            if (g == h) {
                a = false;
                break
            }
        }
        if (a) {
            var c = 1;
            if (this.options.startLayer.toInt() > 1) {
                this.getRootByStartLayer(this.data[f], c)
            } else {
                this.root[this.root.length] = this.data[f]
            }
        }
    }
}, getRootByStartLayer: function (a, c) {
    var b = c + 1;
    var g = a.code;
    for (var f = 0; f < this.data.length; f++) {
        var h = this.data[f]["pcode"];
        if (g == h) {
            if (b == this.options.startLayer) {
                this.root[this.root.length] = this.data[f]
            } else {
                if (this.isHasChild(this.data[f]["code"])) {
                    this.getRootByStartLayer(this.data[f], b)
                }
            }
        }
    }
}, buildZeroLevelMenuLI: function () {
    var a = 0;
    this.root.each(function (g, b) {
        var k = new Element("li", {name: "swordMenuLi_null_" + a, styles: {width: this.options.itemWidth, height: this.options.itemHeight}}).inject(this.menuZeroLevelUL);
        var f = new Element("span", {name: "swordMenuSpan_null_" + a}).inject(k);
        if ($chk(g.mClass)) {
            f.addClass(g.mClass)
        } else {
            f.addClass("ico1")
        }
        this.addImg(g, f);
        var c = new Element("span", {text: g[this.options.displayTag], "class": "menu_caption"}).inject(k);
        this.addStyle(k);
        a++;
        k.setProperty("pCode", "null");
        k.setProperty("code", g.code);
        k.setProperty("caption", g[this.options.displayTag]);
        new Hash(g).each(function (m, l) {
            if (["pCode", "code", "caption"].contains(l)) {
                return
            }
            k.setProperty(l, m)
        });
        if (this.options.type == "vertical") {
            var j = this.isHasChild(g.code);
            if (j == true) {
                var h = new Element("span", {"class": "mark"}).inject(k)
            }
        }
        k.addEvent("mouseover", function () {
            this.hiddenChildMenu(this.currentSelectItem, k);
            this.currentSelectItem = k;
            if (this.options.type == "horizontal") {
                k.removeClass("sty_2");
                k.addClass("sty_2_a")
            } else {
                if (this.options.type == "vertical") {
                    k.removeClass("sty_1");
                    k.addClass("sty_1_a")
                }
            }
            this.showChildMenu(this.menuZeroLevelDiv, k, g.code, "zero")
        }.bind(this));
        k.addEvent("mouseout", function (l) {
            if (this.options.type == "horizontal") {
                k.removeClass("sty_2_a");
                k.addClass("sty_2")
            } else {
                if (this.options.type == "vertical") {
                    k.removeClass("sty_1_a");
                    k.addClass("sty_1")
                }
            }
        }.bind(this));
        k.addEvent("click", function (l) {
            this.selectItem()
        }.bind(this));
        if (g.enabled == "false") {
            this.setMenuStatus(g.code, "false")
        }
    }.bind(this))
}, fold: function () {
    if (this.foldFlag) {
        this.hiddenAllMenu()
    }
}, isHasChild: function (b) {
    for (var a = 0; a < this.data.length; a++) {
        if (this.data[a].pcode == b) {
            return true
        }
    }
    return false
}, openChildMenu: function (k, l, j, b) {
    var a = new Element("div", {name: "swordMenuDiv_" + j, pCode: j}).inject(k);
    var f = this.isHasChild(j);
    if (f == false) {
        return null
    }
    var g = this.buildTable(a);
    if (this.options.type == "horizontal") {
        if ($defined(b) && b == "zero") {
            if (k.getStyle("position") == "absolute") {
                a.setStyles({position: "absolute", "z-index": this.options.zIndex, left: l.getPosition(k).x, top: l.getPosition(k).y + l.getSize().y});
                if (!$chk(l.previousSibling)) {
                    a.setStyles({left: l.getPosition(k).x - 5})
                }
            } else {
                a.setStyles({position: "absolute", "z-index": this.options.zIndex, left: l.getPosition().x, top: l.getPosition().y + l.getSize().y});
                if (!$chk(l.previousSibling)) {
                    a.setStyles({left: l.getPosition().x - 5})
                }
            }
        } else {
            a.setStyles({position: "absolute", "z-index": this.options.zIndex, left: l.getSize().x, top: l.getSize().y * l.getProperty("name").split("_")[2]})
        }
    } else {
        if (this.options.type == "vertical") {
            if ($defined(b) && b == "zero") {
                if (k.getStyle("position") == "absolute") {
                    a.setStyles({position: "absolute", "z-index": this.options.zIndex, left: l.getPosition(k).x + l.getSize().x, top: l.getPosition(k).y})
                } else {
                    a.setStyles({position: "absolute", "z-index": this.options.zIndex, left: l.getPosition().x + l.getSize().x, top: l.getPosition().y})
                }
            } else {
                a.setStyles({position: "absolute", "z-index": this.options.zIndex, left: l.getSize().x, top: l.getSize().y * l.getProperty("name").split("_")[2]})
            }
        }
    }
    var h = new Element("ul", {}).inject(g);
    var c = 0;
    this.data.each(function (q, m) {
        if (q.pcode == j) {
            var p = new Element("li", {name: ((q.pcode + "").contains("_")) ? "swordMenuLi_" + q.pcode.replace(/_/g, "") + "_" + c : "swordMenuLi_" + q.pcode + "_" + c, styles: {width: this.options.itemWidth, height: this.options.itemHeight}}).inject(h);
            p.addClass("sty_1");
            var o = new Element("span", {name: "swordMenuSpan_null_" + c}).inject(p);
            if ($chk(q.mClass)) {
                o.addClass(q.mClass)
            } else {
                o.addClass("ico1")
            }
            this.addImg(q, o);
            var n = new Element("span", {text: q[this.options.displayTag], "class": "menu_caption"}).inject(p);
            c++;
            p.setProperty("pCode", q.pcode);
            p.setProperty("code", q.code);
            p.setProperty("caption", q[this.options.displayTag]);
            new Hash(q).each(function (u, t) {
                if (["pCode", "code", "caption"].contains(t)) {
                    return
                }
                p.setProperty(t, u)
            });
            var s = this.isHasChild(q.code);
            if (s == true) {
                var r = new Element("span", {"class": "mark"}).inject(p)
            }
            p.addEvent("mouseover", function () {
                this.hiddenChildMenu(this.currentSelectItem, p);
                this.currentSelectItem = p;
                p.removeClass("sty_1");
                p.addClass("sty_1_a");
                this.showChildMenu(a, p, q.code)
            }.bind(this));
            p.addEvent("mouseout", function (t) {
                p.removeClass("sty_1_a");
                p.addClass("sty_1")
            }.bind(this));
            p.addEvent("click", function (t) {
                this.selectItem()
            }.bind(this));
            if (q.enabled == "false") {
                this.setMenuStatus(q.code, "false")
            }
        }
    }.bind(this))
}, showChildMenu: function (b, a, c, h) {
    var g = a.getProperty("code");
    var f = a.getParent("div").getElement("div[pcode=" + g + "]");
    if ($chk(f)) {
        f.setStyle("display", "")
    } else {
        this.openChildMenu(b, a, c, h)
    }
}, hiddenAllMenu: function () {
    if ($defined(this.menuZeroLevelDiv)) {
        var a = this.menuZeroLevelDiv.getElements("div");
        a.each(function (c, b) {
            c.setStyle("display", "none")
        }.bind(this));
        if (this.options.isShow != "true") {
            this.menuZeroLevelDiv.setStyle("display", "none")
        }
    }
}, hiddenChildMenu: function (f, b) {
    if ($chk(f)) {
        var c = f.getParent("div");
        var a = b.getParent("div");
        if (c && c.getProperty("name") == a.getProperty("name")) {
            var g = f.getProperty("code");
            this.closeChildMenu(g)
        } else {
            var h = b.getParent("div").getElements("div");
            h.each(function (k, j) {
                k.setStyle("display", "none")
            }.bind(this))
        }
    }
}, closeChildMenu: function (b, a) {
    var f = this.menuZeroLevelDiv.getElement("div[pCode=" + b + "]");
    if ($chk(f)) {
        f.setStyle("display", "none");
        if (a) {
            var c = f.getElements("div");
            c.each(function (h, g) {
                h.setStyle("display", "none")
            }.bind(this))
        }
    }
}, selectItem: function () {
    this.setHighlight(this.currentSelectItem, this.clickedItem);
    this.clickedItem = this.currentSelectItem;
    this.hiddenAllMenu();
    this.fireEvent("onSelect", this.currentSelectItem)
}, setHighlight: function (b, a) {
    if ($chk(a)) {
        a.removeClass("highlight")
    }
    b.addClass("highlight")
}, change_item_on_keyup: function (h) {
    if (h.key == "esc") {
        this.menuZeroLevelDiv.setStyles({display: "none"})
    }
    if (h.key == "enter") {
        this.selectItem()
    }
    if (h.key == "up") {
        var f = this.currentSelectItem.getPrevious("li");
        var a = this.currentSelectItem;
        if ($defined(f)) {
            a.fireEvent("mouseout");
            f.fireEvent("mouseover")
        }
    }
    if (h.key == "down") {
        if (this.currentSelectItem.getProperty("name") == "swordMenuLi_null_null") {
            this.currentSelectItem.fireEvent("mouseover")
        } else {
            var b = this.currentSelectItem.getNext("li");
            var a = this.currentSelectItem;
            if ($defined(b)) {
                a.fireEvent("mouseout");
                b.fireEvent("mouseover")
            }
        }
    }
    if (h.key == "left") {
        var c = this.menuZeroLevelDiv.getElement("li[code=" + this.currentSelectItem.getProperty("pCode") + "]");
        var a = this.currentSelectItem;
        if ($defined(c)) {
            a.fireEvent("mouseout");
            c.fireEvent("mouseover")
        }
    }
    if (h.key == "right") {
        var g = this.menuZeroLevelDiv.getElement("li[name=swordMenuLi_" + this.currentSelectItem.getProperty("code") + "_0]");
        var a = this.currentSelectItem;
        if ($defined(g)) {
            a.fireEvent("mouseout");
            g.fireEvent("mouseover")
        }
    }
}, setItemFocus: function (a) {
    if ($defined(this.menuZeroLevelDiv)) {
        var b = this.menuZeroLevelDiv.getElement("li[code=" + a + "]");
        if ($chk(b)) {
            this.setHighlight(b, this.clickedItem);
            this.clickedItem = b
        }
    }
}, setMenuStatus: function (f, a) {
    if ($defined(this.menuZeroLevelDiv)) {
        var b = this.menuZeroLevelDiv.getElement("li[code=" + f + "]");
        if ($chk(b)) {
            if (a == "true" && b.get("cloneFlag")) {
                var c = b.getNext();
                c.setStyle("display", "");
                if (b.hasClass("highlight")) {
                    c.addClass("highlight");
                    this.clickedItem = c
                }
                b.destroy()
            } else {
                if (a == "false" && !b.get("cloneFlag")) {
                    var g = b.clone(true);
                    g.addClass("enabledStyle");
                    b.setStyle("display", "none");
                    g.inject(b, "before");
                    g.set("cloneFlag", true)
                }
            }
        } else {
            if (a == "true") {
                this.data.each(function (j, h) {
                    if (j.code == f) {
                        j.enabled = "true"
                    }
                })
            } else {
                this.data.each(function (j, h) {
                    if (j.code == f) {
                        j.enabled = "false"
                    }
                })
            }
        }
    }
}, refresh: function () {
    var a = $(this.options.name);
    if ($defined(this.menuZeroLevelDiv)) {
        this.menuZeroLevelDiv.destroy();
        this.root.empty();
        this.parseData();
        if (this.options.isShow == "true") {
            this.buildMenuDiv()
        }
    }
}, addImg: function (b, a) {
    if (b.imgName) {
        var c = jsR.rootPath + "swordweb/styles/" + jsR.config.style.sys_style + "/SwordMenu/images/" + b.imgName;
        a.setStyle("background", "url(" + c + ") no-repeat center")
    } else {
        if (b.imgUrl) {
            a.setStyle("background", "url(" + b.imgUrl + ") no-repeat center")
        }
    }
}, setDisplayTagWithBuild: function (a) {
    this.options.displayTag = a
}, setMenuHide: function (a) {
    if (a == "true") {
        this.menuZeroLevelDiv.setStyle("display", "")
    } else {
        this.menuZeroLevelDiv.setStyle("display", "none")
    }
}});
var SwordPopUpBox = new Class({Implements: [Events, Options], name: "SwordPopUpBox", options: {type: null, top: null, left: null, width: 300, height: 185, zIndex: 10001, position: "absolute", titleName: i18n.titleName, okBtnName: i18n.okBtnName, cancelBtnName: i18n.cancelBtnName, defineBtnName: i18n.defineBtnName, isShowDefineBtnName: "false", message: null, promptValue: "", isMin: "true", isNormal: "true", isMax: "true", isClose: "true", isShowMask: true, mask: {background: "gray", opacity: 0.5, zIndex: 30000, position: "absolute", left: null, top: null, width: null, height: null}, onOk: $empty, onDefine: $empty, onCancel: $empty, onClose: $empty, onShow: $empty, onHide: $empty, onMin: $empty, onMax: $empty, onNormal: $empty, popUpTweenTime: 200, popUpTween: [], isAutoDisAppear: "false", autoDisAppearTime: 5000, param: null, max: false, dragObj: null}, maskObj: null, mask: null, popUpDiv: null, titleDiv: null, titleNameDiv: null, titleMinDiv: null, titleNormalDiv: null, titleMaxDiv: null, titleCloseDiv: null, contentDiv: null, contentIframe: null, contentMessageDiv: null, contentPromptInput: null, operateDiv: null, operateOkBtn: null, operateCancelBtn: null, operateDefineBtn: null, returnValue: null, popUpState: "normal", bodySize: {width: 0, height: 0}, isMsnFlag: false, initialize: function (a) {
    this.setOptions(a)
}, initParam: function (a) {
}, initData: function () {
}, createAllDiv: function (a) {
    var b = window.document;
    if ($type(window.document.body) == "element" && $(window.document.body).getHeight() == 0 && $(window.document.body).getWidth() == 0) {
        b = parent.window.document
    }
    this.popUpDiv = new Element("div", {id: "ym-window", styles: {"z-index": this.options.zIndex, position: "absolute", left: this.options.left, top: -1000, width: this.options.width, height: this.options.height}}).inject(b.body);
    if (this.options.popUpTween.length != 0) {
        this.popUpDiv.setStyle("display", "none")
    }
    this.bodySize.width = $(b.body).getSize().x;
    this.bodySize.height = $(b.body).getSize().y;
    if (!$defined(a) || ($defined(a) && this.isBody(a))) {
        this.maskObj = b.body;
        if (this.options.isShowMask == true) {
            if (jsR.config.swordPopUpBox.flag) {
                this.options.mask.zIndex = this.options.mask.zIndex + jsR.config.swordPopUpBox.number;
                jsR.config.swordPopUpBox.number++
            }
            this.mask = new SwordMask(this.options.mask);
            this.mask.mask(this.maskObj, this.popUpDiv);
            if ($chk(this.mask.maskDiv)) {
                this.mask.maskDiv.setStyle("width", "100%")
            }
            if ($chk(this.mask.maskIframe)) {
                this.mask.maskIframe.setStyle("width", "100%")
            }
            if (this.options.top == null) {
                this.options.top = this.mask.getElPosition().top
            } else {
                this.setTop(this.popUpDiv, this.options.top)
            }
            if (this.options.left == null) {
                this.options.left = this.mask.getElPosition().left
            } else {
                this.popUpDiv.setStyle("left", this.options.left)
            }
        } else {
            if (this.options.left == null) {
                this.options.left = ($(this.maskObj).getSize().x - this.options.width) / 2 + $(b.body).getScroll().x
            }
            if (this.options.top == null) {
                this.options.top = ($(this.maskObj).getSize().y - this.options.height) / 2 + $(b.body).getScroll().y
            }
            this.popUpDiv.setStyles({"z-index": this.options.zIndex, position: "absolute", left: this.options.left, width: this.options.width, height: this.options.height});
            this.setTop(this.popUpDiv, this.options.top)
        }
    } else {
        this.maskObj = a;
        if (this.options.isShowMask == true) {
            if (jsR.config.swordPopUpBox.flag) {
                this.options.mask.zIndex = this.options.mask.zIndex + jsR.config.swordPopUpBox.number;
                jsR.config.swordPopUpBox.number++
            }
            this.mask = new SwordMask(this.options.mask);
            this.mask.mask(this.maskObj, this.popUpDiv);
            if (this.options.top == null) {
                this.options.top = this.mask.getElPosition().top
            }
            if (this.options.left == null) {
                this.options.left = this.mask.getElPosition().left
            }
        } else {
            if (this.options.left == null) {
                this.options.left = this.maskObj.getPosition().x + (this.maskObj.getSize().x - this.options.width) / 2 + this.maskObj.getScroll().x
            }
            if (this.options.top == null) {
                this.options.top = this.maskObj.getPosition().y + (this.maskObj.getSize().y - this.options.height) / 2 + this.maskObj.getScroll().y
            }
            this.popUpDiv.setStyles({"z-index": this.options.zIndex, position: "absolute", left: this.options.left, width: this.options.width, height: this.options.height});
            this.setTop(this.popUpDiv, this.options.top)
        }
    }
    if (this.options.position == "fixed") {
        this.popUpDiv.setStyles({position: "absolute", left: this.options.left, width: this.options.width, height: this.options.height});
        this.setTop(this.popUpDiv, this.options.top)
    }
    this.popUpDiv.setStyle("height", "auto")
}, createTitle: function () {
    var b = window.document;
    if ($type(window.document.body) == "element" && $(window.document.body).getHeight() == 0 && $(window.document.body).getWidth() == 0) {
        b = parent.window.document
    }
    var f = new Element("div", {id: "ym-tl", "class": "ym-tl"}).inject(this.popUpDiv);
    var c = new Element("div", {"class": "ym-tr"}).inject(f);
    this.titleDiv = new Element("div", {"class": "ym-tc", styles: {cursor: "move"}}).inject(c);
    this.titleNameDiv = new Element("div", {"class": "ym-header-text"}).inject(this.titleDiv);
    this.titleNameDiv.appendText(this.options.titleName);
    var a = new Element("div", {"class": "ym-header-tools"}).inject(this.titleDiv);
    if (this.options.type == "ymPrompt_iframe" || this.options.type == "ymPrompt_msn") {
        if (this.options.isMin == "true") {
            this.titleMinDiv = new Element("div", {"class": "ymPrompt_min", title: i18n.boxMin, styles: {visibility: "inherit"}}).inject(a);
            this.titleMinDiv.addEvent("click", this.min.bind(this))
        }
        if (this.options.isNormal == "true") {
            this.titleNormalDiv = new Element("div", {"class": "ymPrompt_normal", title: i18n.boxNatural, styles: {visibility: "inherit"}}).inject(a);
            this.titleNormalDiv.addEvent("click", this.normal.bind(this))
        }
        if (this.options.isMax == "true") {
            this.titleMaxDiv = new Element("div", {"class": "ymPrompt_max", title: i18n.boxMax, styles: {visibility: "inherit"}}).inject(a);
            this.titleMaxDiv.addEvent("click", this.max.bind(this))
        }
    }
    if (this.options.isClose == "true") {
        this.titleCloseDiv = new Element("div", {"class": "ymPrompt_close", title: i18n.boxClose}).inject(a);
        this.titleCloseDiv.addEvent("click", function (g) {
            this.closePopUpBox()
        }.bind(this))
    }
    this.dragObj = new Drag(this.popUpDiv, {snap: 5, limit: {x: [0, $(b.body).getWidth() - this.popUpDiv.getWidth()], y: [0, $(b.body).getHeight() - this.options.height - 20]}, handle: this.titleDiv, onBeforeStart: function () {
        var g = $(b.body).getHeight() - this.options.height - 20;
        if (g < 0) {
            g = 0
        }
        this.dragObj.options.limit = {x: [0, $(b.body).getWidth() - this.popUpDiv.getWidth()], y: [0, g]}
    }.bind(this), onComplete: function (g) {
        g.getElements("iframe").setStyle("display", "")
    }.bind(this), onStart: function (g) {
        if (this.popUpState == "min") {
            this.dragObj.limit.y = [0, $(b.body).getHeight() - 48]
        }
        g.getElements("iframe").setStyle("display", "none")
    }.bind(this)})
}, createContent: function () {
    var c = new Element("div", {id: "ym-ml", "class": "ym-ml"}).inject(this.popUpDiv);
    var b = new Element("div", {"class": "ym-mr"}).inject(c);
    var a = new Element("div", {"class": "ym-mc"}).inject(b);
    this.contentDiv = new Element("div", {"class": "ym-body " + this.options.type, styles: {position: "relative", width: this.options.width - 100}}).inject(a);
    this.contentMessageDiv = new Element("div", {"class": "ym-content"}).inject(this.contentDiv);
    this.contentMessageDiv.set("html", this.options.message)
}, createContent4Div: function () {
    var c = new Element("div", {id: "ym-ml", "class": "ym-ml"}).inject(this.popUpDiv);
    var b = new Element("div", {"class": "ym-mr"}).inject(c);
    var a = new Element("div", {"class": "ym-mc"}).inject(b);
    this.contentDiv = new Element("div", {"class": "ym-body " + this.options.type, styles: {position: "relative", width: this.options.width - 10, height: this.options.height - 69}}).inject(a);
    this.contentMessageDiv = new Element("div", {"class": "ym-content"}).inject(this.contentDiv);
    this.contentMessageDiv.set("html", this.options.message)
}, createIframeContent: function (k, c) {
    var h = new Element("div", {id: "ym-ml", "class": "ym-ml"}).inject(this.popUpDiv);
    var g = new Element("div", {"class": "ym-mr"}).inject(h);
    var f = new Element("div", {"class": "ym-mc"}).inject(g);
    this.contentDiv = new Element("div", {"class": "ym-body", styles: {position: "relative", width: "100%", height: (k) ? this.options.height : this.options.height - 28}}).inject(f);
    var b = c || "IFrame" + $time();
    this.contentIframe = new Element("iframe");
    this.contentIframe.setProperties({name: b, id: b, src: this.options.message, frameBorder: "0"});
    this.contentIframe.setStyles({left: 0, top: 0, width: "100%", border: "0px", height: (k) ? this.options.height : this.options.height - 28});
    this.contentIframe.inject(this.contentDiv);
    var j = window;
    if ($type(window.document.body) == "element" && $(window.document.body).getHeight() == 0 && $(window.document.body).getWidth() == 0) {
        j = parent.window
    }
    var a = j.frames[b];
    a.name = b;
    this.addEvent("onOk", this.closePopUpBox);
    this.addEvent("onCancel", this.closePopUpBox);
    return a
}, createPromptContent: function () {
    var c = new Element("div", {id: "ym-ml", "class": "ym-ml"}).inject(this.popUpDiv);
    var b = new Element("div", {"class": "ym-mr"}).inject(c);
    var a = new Element("div", {"class": "ym-mc"}).inject(b);
    this.contentDiv = new Element("div", {"class": "ym-body " + this.options.type, styles: {position: "relative", width: this.options.width - 100, height: this.options.height - 69}}).inject(a);
    this.contentMessageDiv = new Element("div", {"class": "ym-content"}).inject(this.contentDiv);
    this.contentMessageDiv.appendText(this.options.message);
    var f = new Element("br").inject(this.contentDiv);
    this.contentPromptInput = new Element("input", {type: "text"}).inject(this.contentDiv);
    this.contentPromptInput.addEvent("click", function (g) {
        this.contentPromptInput.focus()
    }.bind(this));
    this.contentPromptInput.value = this.options.promptValue
}, createAlertOperate: function () {
    var b = new Element("div", {id: "ym-btnl", "class": "ym-ml"}).inject(this.popUpDiv);
    var a = new Element("div", {"class": "ym-mr"}).inject(b);
    this.operateDiv = new Element("div", {"class": "ym-btn"}).inject(a);
    this.operateOkBtn = new Element("input", {id: "ymPrompt_btn_0", "class": "btnStyle handler", type: "button", value: this.options.okBtnName, styles: {cursor: "pointer"}}).inject(this.operateDiv);
    this.operateOkBtn.addEvent("click", function (c) {
        this.fireEvent("onOk");
        this.closePopUpBox()
    }.bind(this));
    this.operateOkBtn.focus()
}, createConfirmOperate: function () {
    var b = new Element("div", {id: "ym-btnl", "class": "ym-ml"}).inject(this.popUpDiv);
    var a = new Element("div", {"class": "ym-mr"}).inject(b);
    this.operateDiv = new Element("div", {"class": "ym-btn"}).inject(a);
    this.operateOkBtn = new Element("input", {id: "ymPrompt_btn_0", "class": "btnStyle handler", type: "button", value: this.options.okBtnName, styles: {cursor: "pointer"}}).inject(this.operateDiv);
    if (this.options.isShowDefineBtnName == "true") {
        this.operateDefineBtn = new Element("input", {id: "ymPrompt_btn_2", "class": "btnStyle handler", type: "button", value: this.options.defineBtnName, styles: {cursor: "pointer"}}).inject(this.operateDiv);
        this.operateDefineBtn.addEvent("click", function (c) {
            this.fireEvent("onDefine");
            this.closePopUpBox()
        }.bind(this))
    }
    this.operateCancelBtn = new Element("input", {id: "ymPrompt_btn_1", "class": "btnStyle handler", type: "button", value: this.options.cancelBtnName, styles: {cursor: "pointer"}}).inject(this.operateDiv);
    this.operateOkBtn.addEvent("click", function (c) {
        this.fireEvent("onOk");
        this.closePopUpBox()
    }.bind(this));
    this.operateCancelBtn.addEvent("click", function (c) {
        this.fireEvent("onCancel");
        this.closePopUpBox()
    }.bind(this))
}, createPromptOperate: function () {
    var b = new Element("div", {id: "ym-btnl", "class": "ym-ml"}).inject(this.popUpDiv);
    var a = new Element("div", {"class": "ym-mr"}).inject(b);
    this.operateDiv = new Element("div", {"class": "ym-btn"}).inject(a);
    this.operateOkBtn = new Element("input", {id: "ymPrompt_btn_0", "class": "btnStyle handler", type: "button", value: this.options.okBtnName, styles: {cursor: "pointer"}}).inject(this.operateDiv);
    if (this.options.isShowDefineBtnName == "true") {
        this.operateDefineBtn = new Element("input", {id: "ymPrompt_btn_2", "class": "btnStyle handler", type: "button", value: this.options.defineBtnName, styles: {cursor: "pointer"}}).inject(this.operateDiv);
        this.operateDefineBtn.addEvent("click", function (c) {
            this.fireEvent("onDefine");
            this.closePopUpBox()
        }.bind(this))
    }
    this.operateCancelBtn = new Element("input", {id: "ymPrompt_btn_1", "class": "btnStyle handler", type: "button", value: this.options.cancelBtnName, styles: {cursor: "pointer"}}).inject(this.operateDiv);
    this.operateOkBtn.addEvent("click", function (c) {
        this.fireEvent("onOk", this.contentPromptInput.value);
        this.closePopUpBox()
    }.bind(this));
    this.operateCancelBtn.addEvent("click", function (c) {
        this.fireEvent("onCancel");
        this.closePopUpBox()
    }.bind(this))
}, createTail: function () {
    var c = new Element("div", {id: "ym-bl", "class": "ym-bl"}).inject(this.popUpDiv);
    var b = new Element("div", {"class": "ym-br"}).inject(c);
    var a = new Element("div", {"class": "ym-bc"}).inject(b)
}, addPopUpTween: function () {
    for (var a = 0; a < this.options.popUpTween.length; a++) {
        new Fx.Tween(this.popUpDiv, {duration: this.options.popUpTween[a]["popUpTweenTime"], transition: this.options.popUpTween[a]["popUpTweenTransitionType"]}).start(this.options.popUpTween[a]["popUpTweenStyle"], this.options.popUpTween[a]["popUpTweenStyleFrom"], this.options.popUpTween[a]["popUpTweenStyleTo"])
    }
    if (this.options.popUpTween.length != 0) {
        this.popUpDiv.setStyle("display", "block")
    }
}, alert: function (b, a) {
    this.initialize(b);
    this.options.type = "ymPrompt_alert";
    this.createAllDiv(a);
    this.createTitle();
    this.createContent();
    this.createAlertOperate();
    this.createTail();
    this.addPopUpTween()
}, alertRight: function (b, a) {
    this.initialize(b);
    this.options.type = "ymPrompt_succeed";
    this.createAllDiv(a);
    this.createTitle();
    this.createContent();
    this.createAlertOperate();
    this.createTail();
    this.addPopUpTween();
    this.operateOkBtn.focus()
}, alertWrong: function (b, a) {
    this.initialize(b);
    this.options.type = "ymPrompt_error";
    this.createAllDiv(a);
    this.createTitle();
    this.createContent();
    this.createAlertOperate();
    this.createTail();
    this.addPopUpTween();
    this.operateOkBtn.focus()
}, confirm: function (b, a) {
    this.initialize(b);
    this.options.type = "ymPrompt_confirm";
    this.createAllDiv(a);
    this.createTitle();
    this.createContent();
    this.createConfirmOperate();
    this.createTail();
    this.addPopUpTween();
    this.operateOkBtn.focus()
}, prompt: function (b, a) {
    this.initialize(b);
    this.options.type = "ymPrompt_confirm";
    this.createAllDiv(a);
    this.createTitle();
    this.createPromptContent();
    this.createPromptOperate();
    this.createTail();
    this.addPopUpTween();
    this.operateOkBtn.focus()
}, alertDiv: function (b, a) {
    this.initialize(b);
    this.options.type = "ymPrompt_win";
    this.createAllDiv(a);
    this.createTitle();
    this.createContent4Div();
    this.createTail()
}, alertIframe: function (c, b) {
    var a = true;
    if (!$chk(c.message) && c.submit) {
        var k = c.submit;
        k.isContinue = true;
        k.initSubmitWidget(k.container);
        k.doBeforeEvents();
        a = k.isContinue
    }
    if (a) {
        this.initialize(c);
        this.options.type = "ymPrompt_iframe";
        this.createAllDiv(b);
        this.createTitle();
        var g = "IFrame" + $time();
        var j = this.createIframeContent(null, g);
        j.focus();
        var h = function () {
            try {
                j.box = this;
                j.frameElement.parentNode.ownerDocument.window[g] = this
            } catch (f) {
            }
        }.bind(this);
        if (Browser.Engine.trident) {
            this.contentIframe.onreadystatechange = h
        } else {
            this.contentIframe.addEvent("load", h)
        }
        this.createTail();
        this.addPopUpTween();
        if (this.options.max) {
            this.max()
        }
        if (!$chk(c.message) && c.submit) {
            var k = c.submit;
            k.options.postType = "form_" + g;
            k.frameWin = j;
            k.submit()
        }
        return j
    }
}, alertIframeNoPanel: function (b, a) {
    this.initialize(b);
    this.options.type = "ymPrompt_iframe";
    this.createAllDiv(a);
    var c = this.createIframeContent(true);
    c.focus();
    this.popUpDiv.getElements("div.ym-ml").removeClass("ym-ml");
    this.popUpDiv.getElements("div.ym-mr").removeClass("ym-mr");
    this.addPopUpTween();
    this.setTop(this.popUpDiv, this.options.top);
    return c
}, alertMSN: function (g, c) {
    g.position = "absolute";
    g.isShowMask = false;
    this.initialize(g);
    this.isMsnFlag = true;
    this.options.type = "ymPrompt_msn";
    this.createAllDiv(c);
    this.createTitle();
    var k = this.createIframeContent();
    this.createTail();
    var l = this.popUpDiv.getSize();
    var b = $(document.body).getSize();
    var h = (b.x - l.x);
    var a = $(document.body).getScroll().y;
    var j = b.y + a;
    if (Browser.Engine.trident) {
        j = j - 5
    }
    this.popUpDiv.setStyles({position: "absolute", left: h, height: 0});
    this.setTop(this.popUpDiv, j);
    new Fx.Tween(this.popUpDiv, {duration: this.options.popUpTweenTime, transition: Fx.Transitions.linear}).start("top", j, j - l.y);
    new Fx.Tween(this.popUpDiv, {duration: (this.options.popUpTweenTime + 100), transition: Fx.Transitions.linear}).start("height", 0, l.y);
    if (this.options.isAutoDisAppear == "true") {
        this.closePopUpBox(this.options.autoDisAppearTime)
    }
    return k
}, closePopUpBox: function (a) {
    if (!a) {
        a = 1
    }
    this._closePopUpBox.delay(a, this)
}, _closePopUpBox: function () {
    this.fireEvent("onClose", [this]);
    if (this.contentIframe) {
        this.contentIframe.set("src", "")
    }
    if (this.options.isShowMask == true) {
        this.mask.unmask();
        if (jsR.config.swordPopUpBox.flag) {
            jsR.config.swordPopUpBox.number--
        }
    }
    this.popUpDiv.destroy();
    (function () {
        for (var a in this) {
            this[a] = undefined
        }
    }).delay(1, this)
}, isBody: function (a) {
    return(/^(?:body|html)$/i).test((a.get("tag") || a.tagName))
}, max: function () {
    this.popUpState = "max";
    var b = 0;
    if (this.options.type != "ymPrompt_win" && this.options.type != "ymPrompt_iframe" && this.options.type != "ymPrompt_msn") {
        b = 69;
        this.operateDiv.setStyles({display: ""})
    } else {
        b = 28
    }
    var g = 0;
    var a = 0;
    var f = 0;
    var c = 0;
    if (this.isBody(this.maskObj)) {
        if (this.options.isShowMask == true) {
            g = 0 + document.body.getScroll().x;
            a = 0 + document.body.getScroll().y;
            f = document.body.getSize().x;
            c = document.body.getSize().y
        } else {
            g = 0 + document.body.getScroll().x;
            a = 0 + document.body.getScroll().y;
            f = document.body.getSize().x;
            c = document.body.getSize().y
        }
    } else {
        if (this.options.isShowMask == true) {
            g = this.mask.options.left;
            a = this.mask.options.top;
            f = this.mask.options.width;
            c = this.mask.options.height
        } else {
            g = this.maskObj.getPosition().x + this.maskObj.getScroll().x;
            a = this.maskObj.getPosition().y + this.maskObj.getScroll().y;
            f = this.maskObj.getSize().x;
            c = this.maskObj.getSize().y
        }
    }
    this.popUpDiv.setStyles({height: c, left: g, width: f});
    this.setTop(this.popUpDiv, a);
    this.contentDiv.setStyles({height: c - b});
    if (this.options.type == "ymPrompt_iframe" || this.options.type == "ymPrompt_msn") {
        this.contentIframe.setStyles({height: c - b})
    }
    this.fireEvent("onMax", [this])
}, min: function () {
    if (this.popUpState != "min") {
        if ($defined(this.operateDiv)) {
            this.operateDivHeight = this.operateDiv.getSize().y
        }
    }
    this.popUpState = "min";
    var a = 0;
    if (this.options.type != "ymPrompt_win" && this.options.type != "ymPrompt_iframe" && this.options.type != "ymPrompt_msn") {
        a = 69 - this.operateDivHeight;
        this.operateDiv.setStyles({display: "none"})
    } else {
        a = 28
    }
    this.popUpDiv.setStyles({height: a, left: 0, width: this.options.width});
    this.setTop(this.popUpDiv, $(document.body).getHeight() - 48);
    this.contentDiv.setStyles({height: 0});
    this.popUpDiv.setStyle("height", "auto");
    this.fireEvent("onMin")
}, normal: function () {
    this.popUpState = "normal";
    var a = 0;
    if (this.options.type != "ymPrompt_win" && this.options.type != "ymPrompt_iframe" && this.options.type != "ymPrompt_msn") {
        a = 69;
        this.operateDiv.setStyles({display: ""})
    } else {
        a = 28
    }
    this.popUpDiv.setStyles({height: this.options.height, left: this.options.left, width: this.options.width});
    this.setTop(this.popUpDiv, this.options.top);
    var b = (this.options.height.toInt() - a);
    this.contentDiv.setStyles({height: b});
    if (this.options.type == "ymPrompt_iframe" || this.options.type == "ymPrompt_msn") {
        this.contentIframe.setStyles({height: b})
    }
    this.popUpDiv.setStyle("height", "auto");
    this.fireEvent("onNormal", [this])
}, close: function (a) {
    this.closePopUpBox(a)
}, hide: function (a) {
    a = a || -1;
    this.popUpDiv.setStyle("z-index", a);
    this.fireEvent("onHide", [this])
}, show: function (a) {
    a = a || this.zIndex;
    this.popUpDiv.setStyle("z-index", a);
    this.fireEvent("onShow", [this])
}, setTop: function (b, a) {
    if (a / 1 < 0 || (a + "").indexOf("-") >= 0) {
        a = 0
    }
    b.setStyle("top", a)
}});
if (!Sword) {
    var Sword = {}
}
Sword.utils = {setWidth: function (f, g, c, h, b) {
    if (b === true) {
        h.addClass("swordform_item_input_plusImg")
    }
    var a;
    if ($defined(f)) {
        a = f
    } else {
        if (g && g.FiledWidth) {
            a = g.FiledWidth
        } else {
            return
        }
    }
    if (("" + a).contains("%")) {
        c.setStyle("width", a);
        h.setStyle("width", "100%")
    } else {
        c.setStyle("width", "auto");
        if (b === true) {
            a = ("" + a).toInt() - 17 + "px"
        }
        h.setStyle("width", a)
    }
}, parseCss: function (a, c) {
    var b;
    if (a) {
        if (c) {
            if (Browser.Engine.trident4 && a.indexOf("text-align:right") != -1 && a.indexOf("padding-right") == -1) {
                a = a + " ;padding-right:2px;"
            }
            c.set("style", a)
        }
        if (a.indexOf("width") != -1) {
            b = new Element("div").set("html", "<div style='" + a + "'></div>").getFirst().getStyle("width")
        }
    }
    return b
}, createTable: function (h, b, c) {
    var f = $(document.createElement("table"));
    f.set("cellpadding", 0);
    f.set("cellspacing", 0);
    f.addClass("swordform_field_wrap");
    var a = document.createElement("tbody");
    var g = document.createElement("tr");
    h.boxtd = $(document.createElement("td"));
    h.boxtd.name = "boxtd";
    h.boxtd.addClass("boxtd");
    g.appendChild(h.boxtd);
    if (b === true) {
        h.imgtd = $(document.createElement("td"));
        h.imgtd.name = "imgtd";
        h.imgtd.width = "17px";
        h.imgtd.set("html", '<div style="width:17px;visibility:hidden;"></div>');
        g.appendChild(h.imgtd)
    }
    a.appendChild(g);
    f.appendChild(a);
    if (c === true) {
        f.inject(h.options.pNode)
    }
    return f
}, createElAfter: function (a, b) {
    var c = new Element(a.get("tag") == "tr" ? "td" : "div", {"class": "swordform_field_valiwrap", styles: {display: "none"}}).inject(a);
    if (b) {
        b.valWrapDiv = c
    }
    new Element("div", {"class": "swordform_fieldimg_nomal", styles: {"float": "left"}}).inject(c);
    new Element("div", {name: "msgText", styles: {margin: "0 2px 0 17px", "text-align": "left"}}).inject(c);
    return c
}, getRootPath: function () {
    var a = document.location;
    if ("file:" == a.protocol) {
        var c = a.toString();
        return c.replace(c.split("/").reverse()[0], "")
    }
    var b = a.pathname;
    if (b.substring(0, 1) != "/") {
        b = "/" + b
    }
    b = b.split("/");
    return a.protocol + "//" + a.host + "/" + b[1] + "/"
}};
Sword.utils.btn = {style: {submitBtn: "submit_btn", disabledBtn: "disabled_btn", mouseMoveBtn: "mousemove_btn"}, init: function (b, a) {
    if (b.disabled) {
        b.addClass(Sword.utils.btn.style.disabledBtn)
    } else {
        b.addClass(Sword.utils.btn.style.submitBtn);
        Sword.utils.btn.addBtnEvents(b, a)
    }
    return b
}, disabled: function (a) {
    a.removeClass(Sword.utils.btn.style.submitBtn);
    a.addClass(Sword.utils.btn.style.disabledBtn);
    return a
}, enabled: function (a) {
    a.removeClass(Sword.utils.btn.style.disabledBtn);
    a.addClass(Sword.utils.btn.style.submitBtn);
    return a
}, addBtnEvents: function (b, a) {
    b.addEvent("mouseover", Sword.utils.btn.mousemove.bindWithEvent());
    b.addEvent("mouseout", Sword.utils.btn.mouseout.bindWithEvent())
}, mousemove: function (a) {
    var b = a.target;
    if (b) {
        b.removeClass(Sword.utils.btn.style.submitBtn);
        b.addClass(Sword.utils.btn.style.mouseMoveBtn)
    }
}, mouseout: function (a) {
    var b = a.target;
    if (b) {
        b.removeClass(Sword.utils.btn.style.mouseMoveBtn);
        b.addClass(Sword.utils.btn.style.submitBtn)
    }
}};
Sword.utils.Iterator = new Class({$family: {name: "Sword.utils.Iterator"}, node: $empty, iterator: $empty, lastSign: true, dataDetph: 0, domainData: [], initialize: function (a, b) {
    this.iterator(a);
    if ($defined(b)) {
        this.dataDepth = b
    }
}, hasChildNodes: $lambda(false), isLast: $lambda(true), getAttributes: $empty, getAttribute: $empty, getChildNodes: $empty, setParentSign: function (a, b) {
    Sword.utils.Iterator.code = a;
    Sword.utils.Iterator.pcode = b
}, getAllChildNodes: $empty, getNodes: $empty});
Sword.utils.JSONIterator = new Class({Extends: Sword.utils.Iterator, current: null, iterator: function (a) {
    this.node = a
}, setLastSign: function (a) {
    this.lastSign = a
}, hasChildNodes: function () {
    if (this.dataDepth == 0) {
        return this.domainData.length > 0
    } else {
        return this.domainData.some(function (a) {
            return a[Sword.utils.Iterator.pcode] == this.node[Sword.utils.Iterator.code]
        }, this)
    }
}, setDomainData: function (a) {
    this.domainData = a
}, getChildNodes: function () {
    var g = new Array();
    if (this.dataDepth == 0) {
        this.dataDepth++;
        if ($defined(this.domainData) && this.domainData.length > 0) {
            for (var b = 0; b < this.domainData.length; b++) {
                var f = true;
                for (var a = 0; a < this.domainData.length; a++) {
                    if (this.domainData[b][Sword.utils.Iterator.pcode] == this.domainData[a][Sword.utils.Iterator.code]) {
                        f = false;
                        break
                    }
                }
                if (f) {
                    var c = new Sword.utils.JSONIterator(this.domainData[b], this.dataDepth);
                    c.setLastSign(false);
                    g.push(c);
                    c.setDomainData(this.domainData)
                }
            }
        }
    } else {
        if ($defined(this.domainData) && this.domainData.length > 0) {
            for (var b = 0; b < this.domainData.length; b++) {
                if (this.domainData[b][Sword.utils.Iterator.pcode] == this.node[Sword.utils.Iterator.code]) {
                    var c = new Sword.utils.JSONIterator(this.domainData[b], this.dataDepth);
                    c.setLastSign(false);
                    g.push(c);
                    c.setDomainData(this.domainData)
                }
            }
        }
        this.dataDepth++
    }
    if (g.length > 0) {
        g[g.length - 1].setLastSign(true)
    }
    return g
}, getAttributes: function () {
    var b = new Array();
    var a = new Hash(this.node);
    a.getKeys().each(function (c) {
        switch ($type(a.get(c))) {
            case"string":
            case"number":
            case"boolean":
                b.push({nodeName: c, nodeValue: a.get(c)});
            case false:
                return null
        }
    });
    return b
}, getAttribute: function (a) {
    if ($defined(this.node)) {
        return this.node[a]
    } else {
        return null
    }
}, isLast: function () {
    return this.lastSign
}, getAllChildNodes: function () {
    return this.getNodes(this)
}, getNodes: function (c) {
    var b = [];
    if (c) {
        var f = c.getChildNodes() || [];
        for (var a = 0; a < f.length; a++) {
            b.push(f[a].node);
            b.extend(this.getNodes(f[a]))
        }
    }
    return b
}});
Sword.utils.Iterator.newInstance = function (f, b, c) {
    var a = null;
    Sword.utils.Iterator.treeNodeNum = 0;
    var g = [];
    if ($defined(f) && $defined(f.data)) {
        g = f.data
    }
    if ($chk(b) && "json".test(b.trim(), "i")) {
        a = new Sword.utils.JSONIterator(g, 0);
        a.setDomainData(g);
        a.setParentSign(c.id, c.pid, f)
    }
    return a
};
function _getTopSwordPopUpBox() {
    if (!pc) {
        return
    }
    if (jsR.config.swordPopUpBox.topMask == false) {
        return pc.create("SwordPopUpBox")
    }
    var b = window;
    try {
        if (b.top.pageContainer) {
            b = b.top.window
        } else {
            while (b.parent && b.parent.pageContainer) {
                if (b.parent == b) {
                    break
                }
                b = b.parent
            }
        }
    } catch (a) {
        return pc.create("SwordPopUpBox")
    }
    if (b.pageContainer) {
        b.pageContainer.swordPopUpBox = b.pageContainer.create("SwordPopUpBox")
    }
    return b.pageContainer.swordPopUpBox
}
function getTopDom() {
    var a = window;
    if (a.top.pc) {
        a = a.top.window
    } else {
        while (a.parent && a.parent.pageContainer) {
            if (a.parent == a) {
                break
            }
            a = a.parent
        }
    }
    if (a.pageContainer) {
        return a
    }
    return a
}
function swordAlert(f, b, a) {
    var c = _getTopSwordPopUpBox();
    c.alert($extend({message: f}, b), a);
    return c
}
function swordAlertWrong(f, b, a) {
    var c = _getTopSwordPopUpBox();
    c.alertWrong($extend({message: f}, b), a);
    return c
}
function swordAlertRight(f, b, a) {
    var c = _getTopSwordPopUpBox();
    c.alertRight($extend({message: f}, b), a);
    return c
}
function swordPrompt(f, b, a) {
    var c = _getTopSwordPopUpBox();
    c.prompt($extend({message: f}, b), a);
    return c
}
function swordConfirm(f, b, a) {
    var c = _getTopSwordPopUpBox();
    c.confirm($extend({message: f}, b), a);
    return c
}
function swordAlertIframe(g, c, b, a) {
    g = encodeURI(g);
    var f = _getTopSwordPopUpBox();
    if (a == false) {
        f.alertIframeNoPanel($extend({message: g}, c), b, pc);
        return f
    }
    if (!$chk(f)) {
        return
    }
    f.alertIframe($extend({message: g}, c), b, pc);
    return f
}
function swordOpenWin(c, m) {
    var a = screen.availHeight;
    var l = screen.availWidth - 10;
    var j = navigator.userAgent;
    var f = j.indexOf("Windows NT 6.1") > -1 || j.indexOf("Windows 7") > -1;
    if (f) {
        a = a - 40
    }
    var h = "top=0,left=0,toolbar=no,menubar=no,scrollbars=no,width=" + l + ",height=" + a + ",resizable=no,location=no, status=no";
    if ($chk(m) && $type(m) == "hash") {
        var g = document.createElement("form");
        g.id = "openPrintWindowForm";
        g.method = "post";
        g.action = AddBizCode2URL(c);
        var k = Math.random() + "";
        if (k.indexOf(".") != -1) {
            k = k.substr(k.indexOf(".") + 1, k.length)
        }
        var b = "openPrintWindowName" + k;
        g.target = b;
        m.each(function (p, o) {
            var n = document.createElement("input");
            n.type = "hidden";
            n.name = o;
            n.value = p;
            g.appendChild(n)
        });
        window.open("about:blank", b, h);
        document.body.appendChild(g);
        g.submit();
        document.body.removeChild(g)
    } else {
        window.open(AddBizCode2URL(c), "", h)
    }
}
function openWindowParent() {
    return window.opener
}
function swordAlertDiv(f, b, a) {
    var c = _getTopSwordPopUpBox();
    c.alertDiv($extend({message: f}, b), a);
    return c
}
function swordAlertMsn(f, b, a) {
    var c = _getTopSwordPopUpBox();
    c.alertMSN($extend({message: f}, b), a);
    return c
}
function getHtmlAttrs(g) {
    var f = {};
    if (g) {
        var a = g.attributes;
        for (var c = 0; c < a.length; c++) {
            if (a[c].specified) {
                var b = _swordDefaultAttrs[a[c].name.toLowerCase()];
                if (b) {
                    f[b] = a[c].value ? a[c].value : true
                }
            }
        }
    }
    return f
}
var sword_fmt = {defFmt: {"float": "{'type':'number','format':'0.00','style':''}", RMB: "{'type':'number','format':'0.00 RMB','style':''}", USD: "{'type':'number','format':'$ 0.00','style':''}"}, convertText: function (f, a, b) {
    var c = {};
    var h = "";
    if (!$defined(a)) {
        a = ""
    }
    if (typeof(f) == "object") {
        c.value = a;
        c.realvalue = a;
        c.style = b || "";
        h = f.get("format");
        if (!$chk(h) || !$defined(h)) {
            return c
        }
        if (a == "") {
            var j = JSON.decode(h)["default"];
            if ($defined(j)) {
                c.value = j;
                c.realvalue = j
            } else {
                return c
            }
        }
    } else {
        if (typeof(f) == "string") {
            c.value = f;
            c.realvalue = f;
            h = a
        }
    }
    if (sword_fmt.defFmt[h]) {
        h = sword_fmt.defFmt[h]
    }
    try {
        $extend(c, JSON.decode(h))
    } catch (g) {
    }
    return this.builderText(c)
}, formatText: function (f, a, b, h) {
    var c = {};
    if (typeof(f) == "object") {
        c.value = a;
        c.realvalue = a;
        c.style = b || "";
        if (a == "") {
            var j = JSON.decode(h)["default"];
            return $defined(j) ? {value: j} : c
        }
    } else {
        if (typeof(f) == "string") {
            c.value = f;
            c.realvalue = f;
            h = a
        }
    }
    if (sword_fmt.defFmt[h]) {
        h = sword_fmt.defFmt[h]
    }
    try {
        $extend(c, JSON.decode(h))
    } catch (g) {
    }
    return this.builderText(c)
}, builderItem: function (a) {
}, aptitude: function (a) {
}, builderText: function (a) {
    if (a) {
        if (a.func) {
            var b = sword_getFunc(a.func)[0];
            a.func = b
        }
        if (this[a.type]) {
            $extend(a, this[a.type].run(a));
            if (a.func) {
                a.func.run(a)
            }
        }
        return a
    } else {
        return{value: "", style: ""}
    }
}, routine: function (a) {
}, datePatterns: ["Y-m-d H:i:s.u", "Y-m-d H:i:s", "Y-m-d", "y-m-d", "m/d/y", "Y/m/d", "y/m/d", "Ymd", "ymd"], date: function (a) {
    var c = "";
    var f;
    if (!$chk(a.format)) {
        a.format = Date.patterns.ISO8601Long
    } else {
        if (a.value == "now") {
            f = new Date();
            c = f.dateFormat(a.format)
        } else {
            if (!$chk(a.analysisFormat)) {
                for (var b = 0; b < sword_fmt.datePatterns.length; b++) {
                    f = Date.parseDate(a.value, sword_fmt.datePatterns[b]);
                    if (f) {
                        break
                    }
                }
            } else {
                f = Date.parseDate(a.value, a.analysisFormat)
            }
            if ($chk(f)) {
                c = f.dateFormat(a.format)
            } else {
                c = a.value
            }
        }
    }
    $extend(a, {value: c, obj: f});
    return a
}, number: function (a) {
    var c = a.value;
    if (!$chk(c)) {
        c = 0
    }
    var b = new Number(a.value).numberFormat(a.format);
    b == Number.prototype.NaNstring ? a.value = new Number(0).numberFormat(a.format) : a.value = new Number(a.value).numberFormat(a.format);
    return a
}, money: function (a) {
    alert(JSON.encode(a))
}, percent: function (f) {
    var c = f.value + "";
    var b = c.split(".");
    if (b.length > 1) {
        c = "";
        if (b[0].substring(0, 1) != "0") {
            c += b[0]
        }
        if (b[1].length > 2) {
            c += b[1].substring(0, 2);
            c = c.toInt() + "." + b[1].substring(2)
        } else {
            if (b[1].length == 2) {
                c = (c + b[1].substring(0, 2)).toInt()
            } else {
                c = (c + (b[1] + "0")).toInt()
            }
        }
    } else {
        c += (c.toInt() == 0) ? "" : "00"
    }
    f.value = c + "%";
    return f
}, exceptive: function (a) {
}, customer: function (a) {
}, money_chi: function (b) {
    var a = b.value;
    if (a) {
        b.value = sword_fmt_convertCurrency(a)
    }
    return b
}};
function sword_fmt_convertCurrency(x) {
    x = ($type(x) == "string") ? x / 1 : x;
    var c = 99999999999.99;
    var B = "零";
    var F = "壹";
    var k = "贰";
    var l = "叁";
    var n = "肆";
    var H = "伍";
    var E = "陆";
    var A = "柒";
    var J = "捌";
    var C = "玖";
    var h = "拾";
    var q = "佰";
    var t = "仟";
    var g = "万";
    var j = "亿";
    var z = "";
    var w = "圆";
    var f = "角";
    var u = "分";
    var y = "整";
    var b;
    var M;
    var v;
    var I;
    var K, o, s, r;
    var a;
    var G, D, L;
    var N, m;
    x = x.toString();
    if (x == "") {
        return x
    }
    if (x.match(/[^,.\d]/) != null) {
        alert("输入字符中有不合法字符，请输入数字。");
        return x
    }
    if ((x).match(/^((\d{1,3}(,\d{3})*(.((\d{3},)*\d{1,3}))?)|(\d+(.\d+)?))$/) == null) {
        alert("输入的格式不合法。");
        return x
    }
    x = x.replace(/,/g, "");
    x = x.replace(/^0+/, "");
    if (Number(x) > c) {
        alert("您输入的超过了最大值：" + c);
        return x
    }
    I = x.split(".");
    if (I.length > 1) {
        b = I[0];
        M = I[1];
        M = M.substr(0, 2)
    } else {
        b = I[0];
        M = ""
    }
    K = new Array(B, F, k, l, n, H, E, A, J, C);
    o = new Array("", h, q, t);
    s = new Array("", g, j);
    r = new Array(f, u);
    v = "";
    if (Number(b) > 0) {
        a = 0;
        for (G = 0; G < b.length; G++) {
            D = b.length - G - 1;
            L = b.substr(G, 1);
            N = D / 4;
            m = D % 4;
            if (L == "0") {
                a++
            } else {
                if (a > 0) {
                    v += K[0]
                }
                a = 0;
                v += K[Number(L)] + o[m]
            }
            if (m == 0 && a < 4) {
                v += s[N]
            }
        }
        v += w
    }
    if (M != "" && M != "00") {
        for (G = 0; G < M.length; G++) {
            L = M.substr(G, 1);
            if (L != "0") {
                v += K[Number(L)] + r[G]
            } else {
                v += K[Number(L)]
            }
        }
    } else {
        M = ""
    }
    if (v == "") {
        v = B + w
    }
    if (M == "") {
        v += y
    }
    v = z + v;
    return v
}
function accAdd(g, f) {
    var c, b, a;
    try {
        c = g.toString().split(".")[1].length
    } catch (h) {
        c = 0
    }
    try {
        b = f.toString().split(".")[1].length
    } catch (h) {
        b = 0
    }
    a = Math.pow(10, Math.max(c, b));
    return(g.multiple(a) + f.multiple(a)) / a
}
Number.prototype.accAdd = function (a) {
    return parseFloat(accAdd(a, this))
};
String.prototype.accAdd = function (a) {
    return accAdd(a, this)
};
function accSubtr(g, f) {
    var c, b, a, j;
    try {
        c = g.toString().split(".")[1].length
    } catch (h) {
        c = 0
    }
    try {
        b = f.toString().split(".")[1].length
    } catch (h) {
        b = 0
    }
    a = Math.pow(10, Math.max(c, b));
    j = (c >= b) ? c : b;
    return((g.multiple(a) - f.multiple(a)) / a).round(j)
}
Number.prototype.subtract = function (a) {
    return parseFloat(accSubtr(this, a))
};
String.prototype.subtract = function (a) {
    return accSubtr(this, a)
};
function accMul(f, b) {
    var a = 0, g = f.toString(), c = b.toString();
    try {
        a += g.split(".")[1].length
    } catch (h) {
    }
    try {
        a += c.split(".")[1].length
    } catch (h) {
    }
    return Number(g.replace(".", "")) * Number(c.replace(".", "")) / Math.pow(10, a)
}
Number.prototype.multiple = function (a) {
    return parseFloat(accMul(a, this))
};
String.prototype.multiple = function (a) {
    return accMul(a, this)
};
function accDiv(arg1, arg2) {
    var t1 = 0, t2 = 0, r1, r2;
    try {
        t1 = arg1.toString().split(".")[1].length
    } catch (e) {
    }
    try {
        t2 = arg2.toString().split(".")[1].length
    } catch (e) {
    }
    with (Math) {
        r1 = Number(arg1.toString().replace(".", ""));
        r2 = Number(arg2.toString().replace(".", ""));
        return(r1 / r2) * pow(10, t2 - t1)
    }
}
Number.prototype.divide = function (a) {
    return parseFloat(accDiv(this, a))
};
String.prototype.divide = function (a) {
    return accDiv(this, a)
};
function round(a, c) {
    var b = 1;
    for (; c > 0; b *= 10, c--) {
    }
    for (; c < 0; b /= 10, c++) {
    }
    return Math.round(a.multiple(b)) / b
}
Number.prototype.round = function (a) {
    return parseFloat(round(this, a))
};
String.prototype.round = function (a) {
    return round(this, a)
};
Number.formatFunctions = {count: 0};
String.formatFunctions = {count: 0};
Number.prototype.NaNstring = "NaN";
Number.prototype.posInfinity = "Infinity";
Number.prototype.negInfinity = "-Infinity";
Number.prototype.numberFormat = function (b, a) {
    if (isNaN(this)) {
        return Number.prototype.NaNstring
    } else {
        if (this == +Infinity) {
            return Number.prototype.posInfinity
        } else {
            if (this == -Infinity) {
                return Number.prototype.negInfinity
            } else {
                if (Number.formatFunctions[b] == null) {
                    Number.createNewFormat(b)
                }
            }
        }
    }
    return this[Number.formatFunctions[b]](a)
};
Number.createNewFormat = function (format) {
    var funcName = "format" + Number.formatFunctions.count++;
    Number.formatFunctions[format] = funcName;
    var code = "Number.prototype." + funcName + " = function(context){\n";
    var formats = format.split(";");
    switch (formats.length) {
        case 1:
            code += Number.createTerminalFormat(format);
            break;
        case 2:
            code += 'return (this < 0) ? this.numberFormat("' + _escape(formats[1]) + '", 1) : this.numberFormat("' + _escape(formats[0]) + '", 2);';
            break;
        case 3:
            code += 'return (this < 0) ? this.numberFormat("' + _escape(formats[1]) + '", 1) : ((this == 0) ? this.numberFormat("' + _escape(formats[2]) + '", 2) : this.numberFormat("' + _escape(formats[0]) + '", 3));';
            break;
        default:
            code += "throw 'Too many semicolons in format string';";
            break
    }
    eval(code + "}")
};
Number.createTerminalFormat = function (l) {
    if (l.length > 0 && l.search(/[0#?]/) == -1) {
        return"return '" + _escape(l) + "';\n"
    }
    var a = "var val = (context == null) ? new Number(this) : Math.abs(this);\n";
    var h = false;
    var g = l;
    var j = "";
    var n = 0;
    var o = 0;
    var b = 0;
    var k = false;
    var c = "";
    f = l.match(/\..*(e)([+-]?)(0+)/i);
    if (f) {
        c = f[1];
        k = (f[2] == "+");
        b = f[3].length;
        l = l.replace(/(e)([+-]?)(0+)/i, "")
    }
    var f = l.match(/^([^.]*)\.(.*)$/);
    if (f) {
        g = f[1].replace(/\./g, "");
        j = f[2].replace(/\./g, "")
    }
    if (l.indexOf("%") >= 0) {
        a += "val *= 100;\n"
    }
    f = g.match(/(,+)(?:$|[^0#?,])/);
    if (f) {
        a += "val /= " + Math.pow(1000, f[1].length) + "\n;"
    }
    if (g.search(/[0#?],[0#?]/) >= 0) {
        h = true
    }
    if ((f) || h) {
        g = g.replace(/,/g, "")
    }
    f = g.match(/0[0#?]*/);
    if (f) {
        n = f[0].length
    }
    f = j.match(/[0#?]*/);
    if (f) {
        o = f[0].length
    }
    if (b > 0) {
        a += "var sci = Number.toScientific(val," + n + ", " + o + ", " + b + ", " + k + ");\nvar arr = [sci.l, sci.r];\n"
    } else {
        if (l.indexOf(".") < 0) {
            a += "val = (val > 0&&val.toString().indexOf('.')!=-1&&val.toString().split('.')[1][0]<=4) ? Math.floor(val) : Math.ceil(val);\n"
        }
        a += "var arr = val.round(" + o + ").toFixed(" + o + ").split('.');\n";
        a += "arr[0] = (val < 0 ? '-' : '') + _leftPad((val < 0 ? arr[0].substring(1) : arr[0]), " + n + ", '0');\n"
    }
    if (h) {
        a += "arr[0] = Number.addSeparators(arr[0]);\n"
    }
    a += "arr[0] = Number.injectIntoFormat(arr[0].reverse(), '" + _escape(g.reverse()) + "', true).reverse();\n";
    if (o > 0) {
        a += "arr[1] = Number.injectIntoFormat(arr[1], '" + _escape(j) + "', false);\n"
    }
    if (b > 0) {
        a += "arr[1] = arr[1].replace(/(\\d{" + o + "})/, '$1" + c + "' + sci.s);\n"
    }
    return a + "return arr.join('.');\n"
};
Number.toScientific = function (c, j, k, b, f) {
    var l = {l: "", r: "", s: ""};
    var g = "";
    var h = Math.abs(c).toFixed(j + k + 1).trim("0");
    var a = Math.round(new Number(h.replace(".", "").replace(new RegExp("(\\d{" + (j + k) + "})(.*)"), "$1.$2"))).toFixed(0);
    if (a.length >= j) {
        a = a.substring(0, j) + "." + a.substring(j)
    } else {
        a += "."
    }
    l.s = (h.indexOf(".") - h.search(/[1-9]/)) - a.indexOf(".");
    if (l.s < 0) {
        l.s++
    }
    l.l = (c < 0 ? "-" : "") + _leftPad(a.substring(0, a.indexOf(".")), j, "0");
    l.r = a.substring(a.indexOf(".") + 1);
    if (l.s < 0) {
        g = "-"
    } else {
        if (f) {
            g = "+"
        }
    }
    l.s = g + _leftPad(Math.abs(l.s).toFixed(0), b, "0");
    return l
};
Number.injectIntoFormat = function (k, h, b) {
    var f = 0;
    var c = 0;
    var a = "";
    var g = k.charAt(k.length - 1) == "-";
    if (g) {
        k = k.substring(0, k.length - 1)
    }
    while (f < h.length && c < k.length && h.substring(f).search(/[0#?]/) >= 0) {
        if (h.charAt(f).match(/[0#?]/)) {
            if (k.charAt(c) != "-") {
                a += k.charAt(c)
            } else {
                a += "0"
            }
            c++
        } else {
            a += h.charAt(f)
        }
        ++f
    }
    if (g && c == k.length) {
        a += "-"
    }
    if (c < k.length) {
        if (b) {
            a += k.substring(c)
        }
        if (g) {
            a += "-"
        }
    }
    if (f < h.length) {
        a += h.substring(f)
    }
    return a.replace(/#/g, "").replace(/\?/g, " ")
};
Number.addSeparators = function (a) {
    return a.reverse().replace(/(\d{3})/g, "$1,").reverse().replace(/^(-)?,/, "$1")
};
Date.parseFunctions = {count: 0};
Date.parseRegexes = [];
Date.formatFunctions = {count: 0};
Date.patterns = {ISO8601Long: "Y-m-d H:i:s", ISO8601Short: "Y-m-d", ShortDate: "n/j/Y", LongDate: "l, F d, Y", FullDateTime: "l, F d, Y g:i:s A", MonthDay: "F d", ShortTime: "g:i A", LongTime: "g:i:s A", SortableDateTime: "Y-m-d\\TH:i:s", UniversalSortableDateTime: "Y-m-d H:i:sO", YearMonth: "F, Y"};
Date.prototype.dateFormat = function (b) {
    if (Date.formatFunctions[b] == null) {
        Date.createNewFormat(b)
    }
    var a = Date.formatFunctions[b];
    return this[a]()
};
Date.prototype.format = Date.prototype.dateFormat;
Date.createNewFormat = function (format) {
    var funcName = "format" + Date.formatFunctions.count++;
    Date.formatFunctions[format] = funcName;
    var code = "Date.prototype." + funcName + " = function(){return ";
    var special = false;
    var ch = "";
    for (var i = 0; i < format.length; ++i) {
        ch = format.charAt(i);
        if (!special && ch == "\\") {
            special = true
        } else {
            if (special) {
                special = false;
                code += "'" + _escape(ch) + "' + "
            } else {
                code += Date.getFormatCode(ch)
            }
        }
    }
    eval(code.substring(0, code.length - 3) + ";}")
};
Date.getFormatCode = function (a) {
    switch (a) {
        case"d":
            return"_leftPad(this.getDate(), 2, '0') + ";
        case"D":
            return"Date.dayNames[this.getDay()].substring(0, 3) + ";
        case"j":
            return"this.getDate() + ";
        case"l":
            return"Date.dayNames[this.getDay()] + ";
        case"S":
            return"this.getSuffix() + ";
        case"w":
            return"this.getDay() + ";
        case"z":
            return"this.getDayOfYear() + ";
        case"W":
            return"this.getWeekOfYear() + ";
        case"F":
            return"Date.monthNames[this.getMonth()] + ";
        case"m":
            return"_leftPad(this.getMonth() + 1, 2, '0') + ";
        case"M":
            return"Date.monthNames[this.getMonth()].substring(0, 3) + ";
        case"n":
            return"(this.getMonth() + 1) + ";
        case"t":
            return"this.getDaysInMonth() + ";
        case"L":
            return"(this.isLeapYear() ? 1 : 0) + ";
        case"Y":
            return"this.getFullYear() + ";
        case"y":
            return"('' + this.getFullYear()).substring(2, 4) + ";
        case"a":
            return"(this.getHours() < 12 ? 'am' : 'pm') + ";
        case"A":
            return"(this.getHours() < 12 ? 'AM' : 'PM') + ";
        case"g":
            return"((this.getHours() % 12) ? this.getHours() % 12 : 12) + ";
        case"G":
            return"this.getHours() + ";
        case"h":
            return"_leftPad((this.getHours() % 12) ? this.getHours() % 12 : 12, 2, '0') + ";
        case"H":
            return"_leftPad(this.getHours(), 2, '0') + ";
        case"i":
            return"_leftPad(this.getMinutes(), 2, '0') + ";
        case"s":
            return"_leftPad(this.getSeconds(), 2, '0') + ";
        case"u":
            return"_leftPad(this.getMilliseconds(), 4, '0') + ";
        case"O":
            return"this.getGMTOffset() + ";
        case"T":
            return"this.getTimezone() + ";
        case"Z":
            return"(this.getTimezoneOffset() * -60) + ";
        default:
            return"'" + _escape(a) + "' + "
    }
};
Date.parseDate = function (a, c) {
    if (Date.parseFunctions[c] == null) {
        Date.createParser(c)
    }
    var b = Date.parseFunctions[c];
    return Date[b](a)
};
Date.createParser = function (format) {
    var funcName = "parse" + Date.parseFunctions.count++;
    var regexNum = Date.parseRegexes.length;
    var currentGroup = 1;
    Date.parseFunctions[format] = funcName;
    var code = "Date." + funcName + " = function(input){\nvar y = -1, m = -1, d = -1, h = -1, i = -1, s = -1, o, z, v;\nvar d = new Date();\ny = d.getFullYear();\nm = d.getMonth();\nd = d.getDate();\nvar results = input.match(Date.parseRegexes[" + regexNum + "]);\nif (results && results.length > 0) {";
    var regex = "";
    var special = false;
    var ch = "";
    for (var i = 0; i < format.length; ++i) {
        ch = format.charAt(i);
        if (!special && ch == "\\") {
            special = true
        } else {
            if (special) {
                special = false;
                regex += _escape(ch)
            } else {
                var obj = Date.formatCodeToRegex(ch, currentGroup);
                currentGroup += obj.g;
                regex += obj.s;
                if (obj.g && obj.c) {
                    code += obj.c
                }
            }
        }
    }
    code += "if (y >= 0 && m >= 0 && d > 0 && h >= 0 && i >= 0 && s >= 0)\n{v = new Date(y, m, d, h, i, s);}\nelse if (y >= 0 && m >= 0 && d > 0 && h >= 0 && i >= 0)\n{v = new Date(y, m, d, h, i);}\nelse if (y >= 0 && m >= 0 && d > 0 && h >= 0)\n{v = new Date(y, m, d, h);}\nelse if (y >= 0 && m >= 0 && d > 0)\n{v = new Date(y, m, d);}\nelse if (y >= 0 && m >= 0)\n{v = new Date(y, m);}\nelse if (y >= 0)\n{v = new Date(y);}\n}return (v && (z || o))?\n    ((z)? v.add(Date.SECOND, (v.getTimezoneOffset() * 60) + (z*1)) :\n        v.add(Date.HOUR, (v.getGMTOffset() / 100) + (o / -100))) : v\n;}";
    Date.parseRegexes[regexNum] = new RegExp("^" + regex + "$", "i");
    eval(code)
};
Date.formatCodeToRegex = function (b, a) {
    switch (b) {
        case"D":
            return{g: 0, c: null, s: "(?:Sun|Mon|Tue|Wed|Thu|Fri|Sat)"};
        case"j":
            return{g: 1, c: "d = parseInt(results[" + a + "], 10);\n", s: "(\\d{1,2})"};
        case"d":
            return{g: 1, c: "d = parseInt(results[" + a + "], 10);\n", s: "(\\d{2})"};
        case"l":
            return{g: 0, c: null, s: "(?:" + Date.dayNames.join("|") + ")"};
        case"S":
            return{g: 0, c: null, s: "(?:st|nd|rd|th)"};
        case"w":
            return{g: 0, c: null, s: "\\d"};
        case"z":
            return{g: 0, c: null, s: "(?:\\d{1,3})"};
        case"W":
            return{g: 0, c: null, s: "(?:\\d{2})"};
        case"F":
            return{g: 1, c: "m = parseInt(Date.monthNumbers[results[" + a + "].substring(0, 1).toUpperCase() + results[" + a + "].substring(1, 3).toLowerCase()], 10);\n", s: "(" + Date.monthNames.join("|") + ")"};
        case"M":
            return{g: 1, c: "m = parseInt(Date.monthNumbers[results[" + a + "].substring(0, 1).toUpperCase() + results[" + a + "].substring(1, 3).toLowerCase()], 10);\n", s: "(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)"};
        case"n":
            return{g: 1, c: "m = parseInt(results[" + a + "], 10) - 1;\n", s: "(\\d{1,2})"};
        case"m":
            return{g: 1, c: "m = parseInt(results[" + a + "], 10) - 1;\n", s: "(\\d{2})"};
        case"t":
            return{g: 0, c: null, s: "\\d{1,2}"};
        case"L":
            return{g: 0, c: null, s: "(?:1|0)"};
        case"Y":
            return{g: 1, c: "y = parseInt(results[" + a + "], 10);\n", s: "(\\d{4})"};
        case"y":
            return{g: 1, c: "var ty = parseInt(results[" + a + "], 10);\ny = ty > Date.y2kYear ? 1900 + ty : 2000 + ty;\n", s: "(\\d{1,2})"};
        case"a":
            return{g: 1, c: "if (results[" + a + "] == 'am') {\nif (h == 12) { h = 0; }\n} else { if (h < 12) { h += 12; }}", s: "(am|pm)"};
        case"A":
            return{g: 1, c: "if (results[" + a + "] == 'AM') {\nif (h == 12) { h = 0; }\n} else { if (h < 12) { h += 12; }}", s: "(AM|PM)"};
        case"g":
        case"G":
            return{g: 1, c: "h = parseInt(results[" + a + "], 10);\n", s: "(\\d{1,2})"};
        case"h":
        case"H":
            return{g: 1, c: "h = parseInt(results[" + a + "], 10);\n", s: "(\\d{2})"};
        case"i":
            return{g: 1, c: "i = parseInt(results[" + a + "], 10);\n", s: "(\\d{2})"};
        case"s":
            return{g: 1, c: "s = parseInt(results[" + a + "], 10);\n", s: "(\\d{2})"};
        case"u":
            return{g: 1, c: "u = parseInt(results[" + a + "], 10);\n", s: "(\\d{4})"};
        case"O":
            return{g: 1, c: ["o = results[", a, "];\n", "var sn = o.substring(0,1);\n", "var hr = o.substring(1,3)*1 + Math.floor(o.substring(3,5) / 60);\n", "var mn = o.substring(3,5) % 60;\n", "o = ((-12 <= (hr*60 + mn)/60) && ((hr*60 + mn)/60 <= 14))?\n", "    (sn + _leftPad(hr, 2, 0) + _leftPad(mn, 2, 0)) : null;\n"].join(""), s: "([+-]\\d{4})"};
        case"T":
            return{g: 0, c: null, s: "[A-Z]{1,4}"};
        case"Z":
            return{g: 1, c: "z = results[" + a + "];\nz = (-43200 <= z*1 && z*1 <= 50400)? z : null;\n", s: "([+-]?\\d{1,5})"};
        default:
            return{g: 0, c: null, s: _escape(b)}
    }
};
Date.prototype.getTimezone = function () {
    return this.toString().replace(/^.*? ([A-Z]{1,4})[\-+][0-9]{4} .*$/, "$1")
};
Date.prototype.getGMTOffset = function () {
    return(this.getTimezoneOffset() > 0 ? "-" : "+") + _leftPad(Math.abs(Math.floor(this.getTimezoneOffset() / 60)), 2, "0") + _leftPad(this.getTimezoneOffset() % 60, 2, "0")
};
Date.prototype.getDayOfYear = function () {
    var a = 0;
    Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28;
    for (var b = 0; b < this.getMonth(); ++b) {
        a += Date.daysInMonth[b]
    }
    return a + this.getDate() - 1
};
Date.prototype.getWeekOfYear = function () {
    var b = this.getDayOfYear() + (4 - this.getDay());
    var a = new Date(this.getFullYear(), 0, 1);
    var c = (7 - a.getDay() + 4);
    return _leftPad(((b - c) / 7) + 1, 2, "0")
};
Date.prototype.isLeapYear = function () {
    var a = this.getFullYear();
    return((a & 3) == 0 && (a % 100 || (a % 400 == 0 && a)))
};
Date.prototype.getFirstDayOfMonth = function () {
    var a = (this.getDay() - (this.getDate() - 1)) % 7;
    return(a < 0) ? (a + 7) : a
};
Date.prototype.getLastDayOfMonth = function () {
    var a = (this.getDay() + (Date.daysInMonth[this.getMonth()] - this.getDate())) % 7;
    return(a < 0) ? (a + 7) : a
};
Date.prototype.getFirstDateOfMonth = function () {
    return new Date(this.getFullYear(), this.getMonth(), 1)
};
Date.prototype.getLastDateOfMonth = function () {
    return new Date(this.getFullYear(), this.getMonth(), this.getDaysInMonth())
};
Date.prototype.getDaysInMonth = function () {
    Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28;
    return Date.daysInMonth[this.getMonth()]
};
Date.prototype.getSuffix = function () {
    switch (this.getDate()) {
        case 1:
        case 21:
        case 31:
            return"st";
        case 2:
        case 22:
            return"nd";
        case 3:
        case 23:
            return"rd";
        default:
            return"th"
    }
};
Date.daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
Date.monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
Date.dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
Date.y2kYear = 50;
Date.monthNumbers = {Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11};
Date.prototype.clone = function () {
    return new Date(this.getTime())
};
Date.prototype.clearTime = function (a) {
    if (a) {
        return this.clone().clearTime()
    }
    this.setHours(0);
    this.setMinutes(0);
    this.setSeconds(0);
    this.setMilliseconds(0);
    return this
};
Date.MILLI = "ms";
Date.SECOND = "s";
Date.MINUTE = "mi";
Date.HOUR = "h";
Date.DAY = "d";
Date.MONTH = "mo";
Date.YEAR = "y";
Date.prototype.add = function (b, c) {
    var f = this.clone();
    if (!b || c === 0) {
        return f
    }
    switch (b.toLowerCase()) {
        case Date.MILLI:
            f.setMilliseconds(this.getMilliseconds() + c);
            break;
        case Date.SECOND:
            f.setSeconds(this.getSeconds() + c);
            break;
        case Date.MINUTE:
            f.setMinutes(this.getMinutes() + c);
            break;
        case Date.HOUR:
            f.setHours(this.getHours() + c);
            break;
        case Date.DAY:
            f.setDate(this.getDate() + c);
            break;
        case Date.MONTH:
            var a = this.getDate();
            if (a > 28) {
                a = Math.min(a, this.getFirstDateOfMonth().add("mo", c).getLastDateOfMonth().getDate())
            }
            f.setDate(a);
            f.setMonth(this.getMonth() + c);
            break;
        case Date.YEAR:
            f.setFullYear(this.getFullYear() + c);
            break
    }
    return f
};
Date.prototype.between = function (c, a) {
    var b = this.getTime();
    return b >= c.getTime() && b <= a.getTime()
};
_leftPad = function (f, b, c) {
    var a = new String(f);
    if (c == null) {
        c = " "
    }
    while (a.length < b) {
        a = c + a
    }
    return a
};
_escape = function (a) {
    return a.replace(/('|\\)/g, "\\$1")
};
String.prototype.reverse = function () {
    var b = "";
    for (var a = this.length; a > 0; --a) {
        b += this.charAt(a - 1)
    }
    return b
};
xyposition = function (c, b, a) {
    xposition(c, b, a);
    yposition(c, b)
};
xposition = function (g, c, a) {
    var h;
    if (!$defined(a)) {
        h = g._getPosition().y - $(document.body).getScroll().y + g.getHeight() + c.getHeight() + 20
    } else {
        h = g._getPosition().y - $(document.body).getScroll().y - c.getHeight() - 5
    }
    var b = $(document.body).getHeight();
    if ((!$defined(a) && h > b) || ($defined(a) && h >= 0)) {
        var f = g._getPosition().y - c.getHeight();
        if (f < 0) {
            c.setStyle("top", (g._getPosition().y + g.getHeight()))
        } else {
            c.setStyle("top", f)
        }
    } else {
        c.setStyle("top", (g._getPosition().y + g.getHeight()))
    }
};
yposition = function (c, b) {
    var f = c._getPosition().x - $(document.body).getScrollWidth() + b.getWidth();
    var a = $(document.body).getWidth();
    if (f > 0) {
        b.setStyle("left", (a - b.getWidth()))
    } else {
        b.setStyle("left", c._getPosition().x)
    }
};
$dateFmt = function (b, g, a) {
    if (!$defined(b)) {
        return
    }
    if (!$defined(b) && !$defined(g)) {
        return
    }
    var f = b.split(".");
    if (f.length <= 2) {
        if (!_SwordDF.isDate(f[0], "yyyy-MM-dd HH:mm:ss")) {
            return false
        }
    } else {
        return false
    }
    if (!$defined(a)) {
        a = g.get("dataformat")
    }
    if (!$defined(a)) {
        a = "yyyy-MM-dd HH:mm:ss"
    }
    var c;
    if (_SwordDF.isDate(b, a)) {
        c = b
    } else {
        c = _SwordDF.formatStringToString(b, "yyyy-MM-dd HH:mm:ss", a)
    }
    g.set("realvalue", b);
    g.set("value", c);
    g.set("text", c);
    return true
};
$w = function (a) {
    return pageContainer.getWidget(a)
};
$print = function (a) {
    return JSON.encode(a)
};
$submit = function (b, f, a) {
    var c = null;
    if ($chk(a)) {
        $extend(a, {newFlag: "true"});
        c = new SwordSubmit(a)
    } else {
        c = new SwordSubmit({newFlag: "true"})
    }
    if ($chk(b)) {
        pageContainer.widgets.set(b, c)
    }
    f = f || [];
    f.each(function (l, j) {
        var k = ($type(l) == "object" ? l.widgetName : l);
        var n = pageContainer.getWidget(k);
        if (n) {
            var m = n.name;
            if ($defined(n)) {
                if (m == "SwordForm") {
                    if (n.isHasFile()) {
                        c.hasFile = true
                    }
                }
                var h = c.initConsoleAttr(m, l);
                var g = SwordSubmit.Command.newInstance(m, k, h, n);
                if ($defined(g)) {
                    c.widgetObjs.set(k, g)
                }
            }
        }
    });
    return c
};
Sword.utils.getDataByMenu = function (f, h, j, a) {
    var c = null;
    if ($chk(f) && $chk(h) && $chk(j)) {
        if (!$chk(j.has(f))) {
            alert("传递的参数中没有其对应的属性，请检查");
            return c
        }
        if ($defined(Sword.utils._containerData)) {
            c = Sword.utils._containerData.get(j.get(f));
            if (c) {
                return c
            }
        }
        var b = new SwordSubmit();
        b.options.mask = "false";
        b.setTid(h);
        var g = {};
        if ($chk(j) && $type(j) == "hash") {
            j.each(function (l, k) {
                g.name = k;
                g.value = l
            });
            b.pushData(g);
            c = b.submit();
            if (c && a !== false) {
                if (!$defined(Sword.utils._containerData)) {
                    Sword.utils._containerData = new Hash()
                }
                if (c.data && c.data.length > 0) {
                    Sword.utils._containerData.set(j.get(f), c.data[0]);
                    c = c.data[0]
                }
            }
            return c
        }
    } else {
        return c
    }
};
var SwordSelect = new Class({Implements: [Events, Options], name: "SwordSelect", $family: {name: "SwordSelect"}, options: {name: null, type: null, prikey: null, lines: 10, height: 21, data: null, pNode: null, edit: "true", disable: null, rule: null, msg: null, parent: null, child: null, dataname: null, sbmitcontent: null, onChange: $empty, onSelect: $empty, onShow: $empty, onHide: $empty, dataFilter: null, onSubmitBefore: $empty, popWidth: null, displayCode: "false", popdisplay: null, inputdisplay: null, handInput: "false", addAllItem: "false", allItemCode: "", allItemCap: ""}, box: null, selectbox: null, selectedIndex: null, currentElement: null, currentText: null, validate: null, selFx: null, rebuild: null, hasBoxDiv: false, CacheData: null, updateCache: function (b, c) {
    if (this.CacheData == null) {
        this.CacheData = new Hash();
        this.CacheData.set(b, c)
    } else {
        var a = this.CacheData.get(b);
        if ($defined(a)) {
            a.combine(c)
        } else {
            this.CacheData.set(b, c)
        }
    }
}, getDataInCache: function (h, b, g) {
    var a = false, f;
    if ($defined(this.box.get("parent"))) {
        if (!$defined(g) || !$chk(g)) {
            this.build_options([]);
            return
        }
    }
    if (this.CacheData != null && $defined(this.CacheData.get(b))) {
        f = this.dataFilter(this.CacheData.get(b));
        if (f.length == 0) {
            a = true
        }
    } else {
        a = true
    }
    if (a) {
        var j = null;
        this.options.onSubmitBefore = this.box.retrieve("onSubmitBefore");
        if ($defined(this.options.onSubmitBefore) && $chk(this.options.onSubmitBefore)) {
            j = this.getFunc(this.options.onSubmitBefore)[0](this)
        }
        this.selectLoading();
        if ($type(j) == "SwordSubmit") {
            if (this.box.get("initOnSubmitBefore") != "true") {
                j.addEvent("onSuccess", function (l, k) {
                    this.unselectLoding();
                    var m;
                    var n = this;
                    k.data.each(function (p, o) {
                        if (p.dataName == n.box.get("dataname") || p.name == n.box.get("name")) {
                            b = p.dataName || p.name;
                            m = p.data;
                            return
                        }
                    });
                    this.updateCache(b, m);
                    this.build_options(m);
                    xyposition(this.box, this.box_div)
                }.bind(this));
                j.addEvent("onError", function () {
                    alert("使用onSubmitBefore返回的提交组件：从后台返回数据出错了。")
                });
                this.box.set("initOnSubmitBefore", "true")
            }
            j.options.mask = "false";
            j.submit()
        } else {
            if (h) {
                var c = pc.getReq({tid: h, widgets: [
                    {sword: "SwordForm", name: b, data: {pcode: {value: g}}}
                ]});
                pc.postReq({req: c, loaddata: "widget", onSuccess: function (k) {
                    this.unselectLoding();
                    var l = $defined(k.data[0]) ? k.data[0].data : null;
                    this.updateCache(b, l);
                    this.build_options(l);
                    xyposition(this.box, this.box_div);
                    this.def_select(this.box.get("code"))
                }.bind(this), onError: function () {
                    alert("从服务器端获取数据出错了,请求的tid为【" + h + "】")
                }.bind(this)})
            }
        }
    } else {
        this.build_options(f)
    }
}, selectLoading: function () {
    if (this.box_div.get("state") != "loading") {
        var a = new Element("div", {"class": "swordselect-list-item", name: "loading"}).inject(this.selectbox);
        var b = new Element("div").inject(a);
        new Element("div", {"class": "selectLoding"}).inject(b);
        new Element("div", {"class": "selectLoding_text"}).appendText(i18n.selectLoading).inject(b)
    }
    this.box_div.set("state", "loading");
    this.selectbox.setStyle("height", "");
    this.box_div.setStyles({display: "block", left: this.box._getPosition().x, top: this.box._getPosition().y + this.box.getHeight()})
}, unselectLoding: function () {
    this.box_div.set("state", "");
    this.selectbox.getElements("div").each(function (a) {
        a.destroy()
    }.bind(this))
}, genarateInputContent: function (b) {
    var a = this.box.get("inputdisplay");
    if (!$defined(a)) {
        a = "{caption}"
    }
    return this.genarateContent(b, a)
}, genaratePopContent: function (b) {
    var a = this.box.get("popdisplay");
    if (!$defined(a)) {
        a = "{caption}"
    }
    return this.genarateContent(b, a)
}, genarateContent: function (b, a) {
    if (!$defined(a)) {
        a = this.box.get("sbmitcontent")
    }
    if (!$defined(a)) {
        a = "{code}"
    }
    if ($type(b) == "element") {
        b = {code: b.get("code"), caption: b.get("caption")}
    }
    return a.substitute(b)
}, initialize: function (a) {
    if (pc.SwordSelectWindowClick) {
        return
    }
    pc.SwordSelectWindowClick = true;
    window.document.addEvent("click", function (c) {
        var b = c.target;
        while (b.parentNode && b != this.box && b != this.selDiv) {
            b = b.parentNode
        }
        if (b != this.box && b != this.selDiv && this.box) {
            if (this.box.get("display") == "true") {
                if ($defined(this.box.onSelectBlur)) {
                    this.box.onSelectBlur(this.box.get("value"))
                }
            }
            if (this.box.get("handInput") == "true" && !$chk(this.box.get("realvalue")) && $chk(this.box.get("value"))) {
                this.box.set({code: this.box.get("value"), realvalue: this.box.get("value")})
            }
            this.hide();
            if (!$(c.target).hasClass("sGrid_data_row_item_select")) {
                this.execGridOnFinished()
            }
        }
    }.bind(this))
}, execGridOnFinished: function () {
    if ($defined(this.grid_onFinished)) {
        this.grid_onFinished(this.box.get("value"), this.box.get("code"), this.box.get("realvalue"), this.box.retrieve("allDb"));
        this.grid_onFinished = null
    }
}, setValidate: function (a) {
    this.validate = a
}, initParam: function (c, j) {
    if (j && j.name == "SwordGrid") {
        this.grid = j
    } else {
        this.grid = null
    }
    $extend(this.options, {name: null, type: null, prikey: null, lines: 10, width: null, height: 21, data: null, pNode: null, rule: null, parent: null, child: null, dataname: null, pcode: null, defValue: null, defIndex: null, tid: null, onChange: $empty, onSelect: $empty, onShow: $empty, onHide: $empty, dataFilter: null, onSubmitBefore: $empty, disable: null, sbmitcontent: null, popWidth: null, displayCode: "false", inputdisplay: null, popdisplay: null, edit: "true", handInput: "false", addAllItem: "false", allItemCode: "", allItemCap: ""});
    this.htmlOptions(c);
    if (j && j.name != "SwordGrid") {
        c.set({onChange: "", onchange: ""})
    }
    var a = this.options.pNode.retrieve("space");
    if ($defined(this.options.parent)) {
        var l = a.getElements("*[name='" + this.options.parent + "']")[0];
        l.set("child", this.options.name);
        if (!$chk(this.options.dataname)) {
            var g = this.getRoot();
            this.options.dataname = ($chk(g.get("dataname"))) ? g.get("dataname") : g.get("name")
        }
    }
    var k = a.getElements("*[parent]");
    for (var f = 0; f < k.length; f++) {
        var b = k[f].get("parent");
        var h = a.getElement("*[name='" + b + "']");
        if ($defined(h)) {
            h.set("child", k[f].get("name"))
        }
    }
    this.options.data = c.getChildren(">div");
    this.build_selectbox(j);
    if (this.box.get("mode") != 2) {
        this.addEventToEl("input", j);
        this.addEventToEl("div")
    } else {
        this.box.addEvent("click", function (m) {
            if ($defined(m)) {
                if (this.box == $(new Event(m).target)) {
                    this.rebuild = false
                } else {
                    if (this.box.get("display") == "true") {
                        this.hide()
                    }
                    this.box = $(new Event(m).target);
                    this.selDiv = this.getImgEl(this.box);
                    this.rebuild = true
                }
            }
            if (this.box.get("display") == "true") {
                this.hide()
            } else {
                this.change_element_by_char();
                this.box.focus()
            }
        }.bind(this));
        this.selDiv.addEvent("click", function (m) {
            if (this.selDiv == $(new Event(m).target)) {
                this.rebuild = false
            } else {
                if (this.box.get("display") == "true") {
                    this.hide()
                }
                this.selDiv = $(new Event(m).target);
                this.box = this.getBoxEl(this.selDiv);
                this.rebuild = true
            }
            if (this.box.get("display") == "true") {
                this.hide()
            } else {
                this.change_element_by_char();
                this.box.focus()
            }
        }.bind(this))
    }
    if ($defined(this.options.defValue) || $defined(this.options.defIndex)) {
        this.initData(this.options.defValue, this.box, this.options.defIndex)
    }
    this.box.addEvent("keyup", this.change_item_on_keyup.bind(this))
}, getBoxEl: function (a) {
    return a.getParent("table").getElement("input.swordform_item_oprate")
}, getImgEl: function (b) {
    var a = b.getParent();
    if ($chk(a)) {
        return a.getNext()
    }
    return null
}, boxtd: null, imgtd: null, getRoot: function () {
    var a = this.options.parent;
    var b = this.options.pNode.retrieve("space");
    while ($defined(a)) {
        var c = b.getElements("*[name='" + a + "']")[0].get("parent");
        if ($defined(c)) {
            a = c
        } else {
            break
        }
    }
    return b.getElements("*[name='" + a + "']")[0]
}, isMulti: function (a) {
    if (!$defined(a)) {
        return $defined(this.box.get("child")) || $defined(this.box.get("parent"))
    }
    return $defined(this.box.get("child")) || $defined(this.box.get("parent")) || (($type(a[0]) == "element") ? a[0].get("pcode") : $H(a[0]).has("pcode"))
}, initData: function (h, c, a) {
    this.hide();
    this.box = $(c);
    this.selDiv = this.getImgEl(this.box);
    if (h == "") {
        if ($defined(this.box.get("defValue")) || $defined(this.box.get("defIndex"))) {
            h = this.box.get("defValue");
            a = this.box.get("defIndex")
        } else {
            this.box.set("value", "").set("realvalue", "").set("code", "").store("allDb", {code: "", caption: ""});
            return
        }
    }
    if ((!$defined(h) || !$chk(h)) && (!$defined(a) || !$chk(a))) {
        return
    }
    if ($type(h) == "string") {
        h = h.toHash()
    }
    if ($type(h) == "object") {
        h = new Hash(h)
    }
    var j;
    if ($type(h) == "hash") {
        var g = {};
        h.each(function (m, l) {
            g[l] = m
        }, this);
        j = this.genarateContent(g);
        this.box.set({value: this.genarateInputContent(g), code: h.get("code"), realvalue: this.genarateContent(g)});
        this.box.store("allDb", g)
    } else {
        var f = this.getOptionsData();
        if (!$defined(f)) {
            return
        }
        if ($defined(h) || $chk(h)) {
            f.each(function (k) {
                if ($type(k) == "element") {
                    k = {caption: k.get("caption"), code: k.get("code")}
                }
                if (k.code == h) {
                    j = this.genarateContent(k);
                    this.box.set({value: this.genarateInputContent(k), code: k.code, realvalue: this.genarateContent(k)});
                    this.box.store("allDb", k)
                }
            }, this)
        } else {
            if ($defined(a) || $chk(a)) {
                var b = f[a / 1];
                if ($defined(b)) {
                    if ($type(b) == "element") {
                        b = {caption: b.get("caption"), code: b.get("code")}
                    }
                    j = this.genarateContent(b);
                    this.box.set({value: this.genarateInputContent(b), code: b.code, realvalue: this.genarateContent(b)});
                    this.box.store("allDb", b)
                }
            }
        }
    }
    return j
}, divTable: null, build_selectbox: function (b) {
    var c = 0;
    this.divTable = Sword.utils.createTable(this, true, true);
    if (this.options.pNode.hasClass("swordform_field_wrap")) {
        c = 1;
        this.divTable.setStyle("float", "left")
    }
    this.box = new Element("input", {type: "text", rule: this.options.rule, msg: this.options.msg, "class": "swordform_item_oprate swordform_item_input", widget: "select", name: this.options.name, sbmitcontent: this.options.sbmitcontent, prikey: this.options.prikey, child: this.options.child, parent: this.options.parent, lines: this.options.lines, lineheight: this.options.height, dataname: this.options.dataname, pcode: this.options.pcode, tid: this.options.tid, defValue: this.options.defValue, value: "", defIndex: this.options.defIndex, dataFilter: this.options.dataFilter, vType: this.validate.options.vType, styles: {"float": "left"}, popWidth: this.options.popWidth, displayCode: this.options.displayCode, inputdisplay: this.options.inputdisplay, popdisplay: this.options.popdisplay, handInput: this.options.handInput, addAllItem: this.options.addAllItem, allItemCode: this.options.allItemCode, allItemCap: this.options.allItemCap}).inject(this.boxtd);
    this.box.store("widgetObj", this);
    if (this.options.edit == "false") {
        this.box.set("readonly", true)
    }
    if (this.options.disable == "true") {
        this.box.set("disabled", true);
        this.box.setStyle("cursor", "default")
    }
    if (this.options.type == "selectsolely") {
        this.box.set("mode", 2)
    }
    this.box.store("data", this.options.data).store("onChange", this.options.onChange).store("onSelect", this.options.onSelect).store("onShow", this.options.onShow).store("onHide", this.options.onHide).store("onSubmitBefore", this.options.onSubmitBefore);
    this.selDiv = this.imgtd;
    this.selDiv.addClass("swordselect-selimg").set("vType", this.validate.options.vType).addEvents({mouseover: function (g) {
        var f = this.getBoxEl($(new Event(g).target));
        if (f.get("display") == "false") {
            Event(g).target.addClass("swordselect-selimg-over")
        }
    }.bind(this), mouseout: function (g) {
        var f = this.getBoxEl($(new Event(g).target));
        if (f.get("display") == "false") {
            Event(g).target.removeClass("swordselect-selimg-over")
        }
    }.bind(this)});
    if ((this.options.rule || "").indexOf("must") > -1 && b.options.requiredSign == "field") {
        new Element("span", {styles: {color: "red", "float": "left"}, html: "*"}).inject(this.divTable)
    }
    if (this.options.disable == "true") {
        this.disable(this.box)
    }
    var a;
    if (c == 0) {
        if (b.name == "SwordForm" && b.isVal() && $defined(this.options.rule)) {
            a = Sword.utils.createElAfter(this.divTable.getChildren()[0].getChildren()[0], this.box)
        }
        Sword.utils.setWidth(this.options.width, b ? b.userSize : null, this.divTable, this.box, true)
    }
    if (!this.hasBoxDiv) {
        this.createBoxDiv();
        this.hasBoxDiv = true
    }
}, createBoxDiv: function () {
    this.box_div = new Element("div", {"class": "swordselect-list"}).inject(document.body);
    this.selectbox = new Element("div", {"class": "swordselect-list-inner"}).inject(this.box_div);
    this.sConsole = new Element("div", {"class": "swordselect-list-inner"}).setStyle("display", "none").inject(this.box_div);
    new Element("div", {"class": "swordselect_csl_pre", events: {click: this.getNextPageData.bind(this, [-1])}}).inject(this.sConsole);
    new Element("div", {"class": "swordselect_csl_next", events: {click: this.getNextPageData.bind(this, [1])}}).inject(this.sConsole)
}, getValue: function () {
    return($chk(this.box.get("code"))) ? this.box.get("code") : this.box.get("value")
}, getParentValue: function () {
    var a = this.getBoxParent().retrieve("space").getElements("*[name='" + this.box.get("parent") + "']")[0];
    return($chk(a.get("code"))) ? a.get("code") : a.get("value")
}, getBoxParent: function () {
    return this.grid ? this.box.getParent("div.sGrid_data_row_item_div") : this.box.getParent().getParent().getParent().getParent().getParent()
}, getOptionsData: function (f) {
    var a = null;
    this.options.data = a = this.box.retrieve("data");
    if ((!$defined(this.options.data)) || this.options.data.length == 0) {
        var b = this.box.get("dataname");
        var h = ($defined(b)) ? pageContainer.getInitDataByDataName(b) : pageContainer.getInitData(this.box.get("name"));
        if (!$defined(h)) {
            return
        }
        a = this.options.data = h.data
    }
    if (!$defined(f) && this.options.data.length > 0) {
        a = this.dataFilter(this.options.data)
    }
    var j = this.box.get("dataFilter");
    if ($defined(j)) {
        try {
            a = this.getFunc(j)[0](a, this.box, this)
        } catch (g) {
            alert("执行下拉列表的数据过滤方法出错！请检查页面自定义函数" + j)
        }
    }
    var c = this.box.get("addAllItem");
    if ($chk(c) && c != "false") {
        a = [
            {caption: this.box.get("allItemCap"), code: this.box.get("allItemCode") || "all"}
        ].extend(a)
    }
    return a
}, dataFilter: function (c) {
    var f = this.box.get("pcode");
    if (this.isMulti(c) && $defined(this.box.get("parent"))) {
        var g = this.getParentValue();
        if ($chk(g)) {
            c = c.filter(function (b) {
                return($type(b) == "element") ? (b.get("pcode") == g) : (b.pcode == g)
            }, this)
        } else {
            c = []
        }
    } else {
        if (this.isMulti(c)) {
            var a = $defined(f) ? [f, null, "", undefined] : [null, "", undefined];
            c = c.filter(function (b) {
                return($type(b) == "element") ? a.contains(b.get("pcode")) : a.contains(b.pcode)
            }, this)
        }
    }
    return c
}, build_options: function (b) {
    var a = this.options.height * 2;
    if ($defined(b)) {
        a = (b.length < this.box.get("lines")) ? this.options.height * b.length : this.options.height * this.box.get("lines");
        var c = document.createDocumentFragment();
        b.each(function (h, g) {
            if ($type(h) == "element") {
                h = {caption: h.get("caption"), code: h.get("code")}
            }
            var f = new Element("div", {title: this.genaratePopContent(h), text: this.genaratePopContent(h), value: h.code, caption: h.caption, index: g, "class": "swordselect-list-item", events: {mouseover: function (j) {
                Event(j).target.addClass("swordselect-selected")
            }, mouseout: function (j) {
                Event(j).target.removeClass("swordselect-selected")
            }}});
            f.store("allDb", h);
            f.addEvent("click", function (j) {
                this.change_item(f);
                if (this.box.get("mode") == 2) {
                    this.getNextPageData()
                } else {
                    this.hide()
                }
                this.execGridOnFinished()
            }.bind(this));
            c.appendChild(f)
        }.bind(this));
        this.selectbox.appendChild(c);
        this.calculateConsole();
        this.options.popWidth = this.box.get("popWidth");
        this.selectbox.setStyles({width: $chk(this.options.popWidth) ? this.options.popWidth : this.box.getWidth() + 14, height: a + "px", "overflow-y": "auto"});
        this.box_div.setStyle("width", $chk(this.options.popWidth) ? this.options.popWidth : this.box.getWidth() + 14);
        this.toggle_selection();
        this.box.set("isbulid", "true");
        this.currentElement = null
    }
}, hide: function () {
    if ($chk(this.box) && this.box.get("display") == "true") {
        var h = this.selectbox.getFirst(":not(.swordselect-selected-none)");
        var a = this.box.get("value");
        var g = this.box.get("realvalue");
        var f = this.box.get("code");
        if ($chk(a) && h && this.currentElement == null) {
            if (this.box.get("handInput") == "true") {
                var b = this.selectbox.getFirst("div[value='" + g + "']");
                if (!$defined(b) || (b && b.get("caption") != a)) {
                    this.box.set({realvalue: a, code: a})
                }
            } else {
                this.change_item(h, true)
            }
        } else {
            if (!$chk(a) || !$chk(f) || !$chk(g)) {
                if (this.box.get("handInput") == "true") {
                    this.box.set({realvalue: a, code: a})
                } else {
                    this.box.set("value", "");
                    this.box.set("code", "");
                    this.box.set("realvalue", "")
                }
            } else {
                if (this.box.get("handInput") == "true" && this.currentElement == null) {
                    var b = this.selectbox.getFirst("div[value='" + g + "']");
                    if (!$defined(b) || (b && b.get("caption") != a)) {
                        this.box.set({realvalue: a, code: a})
                    }
                }
            }
        }
        this.box_div.setStyles({left: "-500px", top: "-500px"});
        this.box_div.set("state", "");
        this.selDiv.removeClass("swordselect-selimg-over");
        this.box.set("display", "false");
        this.selectbox.getElements("div").each(function (c) {
            if (c.getProperty("index") == this.selectedIndex) {
                this.unselect_lis();
                this.currentElement = c.addClass("swordselect-selected")
            }
        }.bind(this));
        if (this.box.get("rule")) {
            this.validate.validate(this.box)
        }
        this.options.onHide = this.box.retrieve("onHide");
        if ($defined(this.options.onHide) && $chk(this.options.onHide)) {
            this.execGridOnFinished();
            this.getFunc(this.options.onHide)[0](this.currentElement, this)
        }
    }
}, show: function () {
    if (!$defined(this.box.get("display")) || this.box.get("display") == "false") {
        this.reBuild(this.box.retrieve("data"));
        this.options.onShow = this.box.retrieve("onShow");
        if ($defined(this.options.onShow) && $chk(this.options.onShow)) {
            this.getFunc(this.options.onShow)[0](this.currentElement, this)
        }
        this.selDiv.addClass("swordselect-selimg-over");
        if (this.selectbox.getElements("div").length > 0) {
            xyposition(this.box, this.box_div);
            this.def_select(this.box.get("code"));
            this.box_div.setStyles({display: "block"});
            if (this.selectbox.scrollWidth > this.selectbox.clientWidth) {
                this.box_div.setStyle("width", $chk(this.options.popWidth) ? this.options.popWidth : this.selectbox.scrollWidth + 18);
                this.selectbox.setStyle("width", $chk(this.options.popWidth) ? this.options.popWidth : this.selectbox.scrollWidth + 18)
            }
        }
        this.box.set("display", "true");
        var a = this.box.get("rule");
        if ($defined(a) && a.contains("must")) {
            this.box.setStyle("background-color", "#b5e3df")
        }
    }
}, reBuild: function (c) {
    this.selectbox.getElements("div").each(function (g) {
        g.dispose()
    });
    this.options.data = c;
    var a = this.getOptionsData();
    if (!$defined(a)) {
        var b, f = this.box.get("tid");
        if (!$defined(f) && !$chk(f) && !$chk(this.box.retrieve("onSubmitBefore"))) {
            if (this.exSelectDataFunc) {
                this.exSelectDataFunc();
                this.build_options(this.getOptionsData())
            }
        } else {
            if (this.isMulti() && $defined(this.box.get("parent"))) {
                b = this.getParentValue()
            }
            this.getDataInCache(f, this.box.get("dataname") || this.box.get("name"), b)
        }
    } else {
        this.build_options(a)
    }
}, clearOptions: function (a, b) {
    a.set("text", "");
    a.set({value: "", code: "", realvalue: ""});
    if (b != false) {
        this.selectbox.getElements("div").each(function (c) {
            c.dispose()
        });
        a.set("isBuild", "false")
    }
    if (this.grid) {
        a.set({caption: ""});
        this.grid.updateCell(a, "")
    }
    return this
}, toggle_selection: function () {
}, unselect_lis: function () {
    this.selectbox.getChildren().removeClass("swordselect-selected")
}, getDataDivFxScroll: function () {
    if (this.dataDivFxScroll == null) {
        this.dataDivFxScroll = new Fx.Scroll(this.selectbox, {duration: 10})
    }
    return this.dataDivFxScroll
}, def_select: function (c) {
    var a = this.selectbox.getChildren();
    var b;
    for (b = 0; b < a.length; b++) {
        a[b].removeClass("swordselect-selected-fix");
        if (c == a[b].get("value")) {
            this.currentElement = a[b].addClass("swordselect-selected-fix");
            this.getDataDivFxScroll().toElement(a[b]);
            this.selectedIndex = this.currentElement.getProperty("index")
        }
    }
}, change_item: function (k, c) {
    if (k) {
        this.unselect_lis(this.selectbox);
        this.selectedIndex = k.getProperty("index");
        this.currentElement = k;
        this.currentElement.addClass("swordselect-selected")
    }
    if (!this.currentElement && !c) {
        this.hide();
        return
    }
    var h = this.box.get("code");
    var l = true;
    var j = this.currentElement.retrieve("allDb");
    this.box.set("value", this.genarateInputContent(j));
    var g = this.currentElement.get("value");
    this.box.set("code", g);
    if (h == g) {
        l = false
    }
    this.box.store("allDb", j);
    this.box.set("realvalue", this.genarateContent(this.currentElement.retrieve("allDb")));
    if ($chk(this.getBoxParent())) {
        this.getBoxParent().set({code: this.currentElement.get("value"), realvalue: this.genarateContent(this.currentElement.retrieve("allDb"))});
        if (l) {
            var b = this.getBoxParent().get("child") || this.box.get("child");
            while ($defined(b)) {
                var f = this.getBoxParent().retrieve("space").getElements("*[name='" + b + "']")[0];
                if ($defined(f)) {
                    this.clearOptions(f);
                    b = f.get("child")
                } else {
                    break
                }
            }
        }
    }
    this.options.onChange = this.box.retrieve("onChange");
    if (!c) {
        this.hide()
    }
    if ($defined(this.options.onChange) && $chk(this.options.onChange) && l) {
        var a = this.getOptionsData();
        this.execGridOnFinished();
        if ($chk(a)) {
            this.getFunc(this.options.onChange)[0](this.currentElement, a[this.selectedIndex], this, h)
        } else {
            this.getFunc(this.options.onChange)[0](this.currentElement, this.currentElement.retrieve("allDb"), this, h)
        }
    }
    this.options.onSelect = this.box.retrieve("onSelect");
    if ($defined(this.options.onSelect) && $chk(this.options.onSelect)) {
        this.getFunc(this.options.onSelect)[0](k)
    }
}, change_item_on_keyup: function (g) {
    if (g.key == "tab") {
        return true
    }
    if (g.key == "esc") {
        this.hide();
        return true
    }
    if (g.key == "enter") {
        if (this.grid) {
            var b = this.box.getParent("div.sGrid_data_row_item_div")
        }
        this.change_item();
        this.execGridOnFinished();
        if (this.grid) {
            this.grid.nextCell(b, g)
        }
    }
    if (g.key == "backspace" || g.key == "delete") {
        if (this.box.get("readonly")) {
            try {
                g.stop()
            } catch (g) {
            }
            return
        }
        if (this.box.get("mode") == 2) {
            this.box.set("code", "")
        } else {
            var f = this.box.get("value");
            this.box.set("value", "");
            this.box.set("realvalue", "");
            this.box.set("code", "");
            this.box.store("allDb", null);
            try {
                var h = this.getBoxParent().get("child") || this.box.get("child");
                while ($defined(h)) {
                    var c = this.getBoxParent().retrieve("space").getElements("*[name='" + h + "']")[0];
                    if ($defined(c)) {
                        this.clearOptions(c, false);
                        h = c.get("child")
                    } else {
                        break
                    }
                }
                this.options.onChange = this.box.retrieve("onChange");
                if ($defined(this.options.onChange) && $chk(this.options.onChange) && f != "") {
                    this.execGridOnFinished();
                    this.getFunc(this.options.onChange)[0](null, null, this)
                }
            } catch (g) {
            }
        }
        this.selectbox.getChildren(".swordselect-selected-fix").removeClass("swordselect-selected-fix");
        this.selectbox.getChildren(".swordselect-selected").removeClass("swordselect-selected");
        this.currentElement = null;
        try {
            g.stop()
        } catch (g) {
        }
    }
    if ((g.key == "up" || g.key == "down") && g.alt) {
        (this.box.get("display") == "true") ? this.hide() : this.show();
        return true
    }
    var a = null;
    if (g.key == "up" || g.key == "left") {
        a = this.change_element_by_method("getPrevious")
    } else {
        if (g.key == "down" || g.key == "right") {
            a = this.change_element_by_method("getNext")
        } else {
            if (g.code == 36 || g.code == 33) {
                a = this.change_element_by_method("getFirst", true)
            } else {
                if (g.code == 35 || g.code == 34) {
                    a = this.change_element_by_method("getLast", true)
                } else {
                    a = this.change_element_by_char(g.key)
                }
            }
        }
    }
    if (a != null) {
        this.unselect_lis(this.selectbox);
        this.selectedIndex = a.getProperty("index");
        this.currentElement = a;
        this.currentElement.addClass("swordselect-selected");
        this.getDataDivFxScroll().toElement(a);
        this.options.onSelect = this.box.retrieve("onSelect");
        if ($defined(this.options.onSelect) && $chk(this.options.onSelect)) {
            this.getFunc(this.options.onSelect)[0](a)
        }
    }
}, change_element_by_method: function (b, a) {
    if (!this.currentElement) {
        return this.currentElement = this.selectbox.getFirst("div:not(.swordselect-selected-none)")
    }
    return a ? this.currentElement.getParent()[b]("div:not(.swordselect-selected-none)") : this.currentElement[b]("div:not(.swordselect-selected-none)")
}, change_element_by_char: function (c) {
    var a = this.box.get("value");
    var b = this.box.get("name");
    if (this.box.get("mode") == 2) {
        this.selectLoading();
        var f = this.box.get("tid");
        this.getNextPageData.bind(this)()
    } else {
        this.filterSelectBox(a)
    }
}, filterSelectBox: function (a) {
    this.selectbox.getChildren().each(function (b) {
        if ((b.get("value") + "").search(a) == -1 && (b.get("text") + "").search(a) == -1) {
            b.addClass("swordselect-selected-none")
        } else {
            b.removeClass("swordselect-selected-none")
        }
    });
    this.currentElement = null
}, getNextPageData: function (b) {
    var a = this.box.get("name");
    this.selectLoading();
    if ($defined(b)) {
        this.getSelectSoleData(this.sConsole.retrieve("curPage").toInt() + b)
    } else {
        this.calculateConsole("clear");
        this.getSelectSoleData(1)
    }
}, getSelectSoleData: function (g) {
    var a = this.box.get("value");
    var f = this.box.get("code");
    var j = this.box.get("tid");
    var b = this.box.get("name");
    if (!$chk(a) || !$defined(a)) {
        f = ""
    }
    try {
        var c = pc.getReq({tid: j, widgets: [
            {sword: "SwordForm", name: this.box.get("name"), data: {caption: {value: a}, pcode: {value: f}, targetPage: {value: g}, rowsOfPage: {value: 10}}}
        ]});
        pc.postReq({req: c, loaddata: "widget", onSuccess: function (k) {
            this.unselectLoding();
            if (this.box.get("name") != b) {
            } else {
                this.calculateConsole("init", null, k.getAttr("totalRows"));
                this.build_options(k.data[0].data)
            }
        }.bind(this), onError: function () {
            alert("从服务器端获取数据出错了,请求的tid为【" + j + "】")
        }.bind(this)}).delay(1000, this)
    } catch (h) {
        return
    }
}, calculateConsole: function (g, f, c) {
    if (g == "init") {
        this.sConsole.store("rows", c);
        this.sConsole.store("pages", ((c % 10) == 0) ? c / 10 : (c / 10 + 1));
        var b = this.sConsole.retrieve("curPage");
        if (!$defined(b)) {
            this.sConsole.store("curPage", 1)
        }
    } else {
        if (g == "clear") {
            this.sConsole.store("rows", null);
            this.sConsole.store("curPage", null);
            this.sConsole.store("rows", null);
            this.sConsole.getElements("div").removeClass("swordselect_csl_hidden");
            this.sConsole.setStyle("display", "none")
        } else {
            var c = this.sConsole.retrieve("rows");
            if (c / 1 < 10) {
                this.sConsole.setStyle("display", "none")
            }
            var h = this.sConsole.retrieve("curPage") / 1 + f;
            var a = this.sConsole.retrieve("pages") / 1;
            if (h == 1) {
                this.sConsole.getElement("div.swordselect_csl_pre").addClass("swordselect_csl_hidden")
            } else {
                if (h == a) {
                    this.sConsole.getElement("div.swordselect_csl_next").addClass("swordselect_csl_hidden")
                }
            }
            if (a > 1) {
                this.sConsole.setStyle("display", "")
            }
        }
    }
}, clear: function () {
    this.hide();
    this.box.destroy();
    this.selDiv.destroy()
}, dm2mc: function (c, n, a) {
    if (n == "" || n == null || n == undefined) {
        if (c.get("defIndex") || c.get("defValue")) {
            this.box = $(c);
            this.box.store("data", this.box.getChildren(">div"));
            var b = this.initData(c.get("defValue"), c, c.get("defIndex"));
            return{code: c.get("code"), caption: c.get("value"), realvalue: b}
        }
        return""
    }
    if (n.indexOf("|") > -1 && n.indexOf("code") > -1 && n.indexOf("caption") > -1) {
        this.box = $(c);
        var m = n.toHash();
        var k = {};
        m.each(function (r, h) {
            k[h] = r
        }, this);
        var b = this.genarateContent(k);
        n = {code: m.get("code"), caption: m.get("caption"), realvalue: b}
    } else {
        this.box = $(c);
        this.box.store("data", this.box.getChildren(">div"));
        var p, q, f;
        if ($chk(c.get("parent")) && $chk(a)) {
            var o = a.getElement("[name=" + c.get("parent") + "][code]");
            if (o) {
                f = o.get("code")
            }
        }
        var l = this.getOptionsData("noFilter");
        if (!l) {
            return""
        }
        var j;
        for (var g = 0; g < l.length; g++) {
            j = l[g];
            if ($type(j) == "element") {
                j = {caption: j.get("caption"), code: j.get("code"), pcode: j.get("pcode")}
            }
            if ($chk(f)) {
                if (j.pcode == f && j.code == n) {
                    q = this.genarateContent(j);
                    p = this.genarateInputContent(j);
                    break
                }
            } else {
                if (j.code == n) {
                    q = this.genarateContent(j);
                    p = this.genarateInputContent(j);
                    break
                }
            }
        }
        if (p && q) {
            n = {code: n, caption: p, realvalue: q, allDb: j}
        }
    }
    return n
}, disable: function (b) {
    if ($defined(b)) {
        b.set("disabled", "true").addClass("select_input_disable").setStyle("background-color", "");
        var a = this.getImgEl(b);
        if (b.cloneFlag) {
            a.setStyle("display", "");
            a.getNext().setStyle("display", "none")
        } else {
            a.clone().addClass("swordselect-selimg-disable").inject(a, "before");
            a.setStyle("display", "none");
            b.cloneFlag = true
        }
    }
}, enable: function (c) {
    if ($defined(c) && c.cloneFlag) {
        var a = this.getImgEl(c);
        c.erase("disabled").removeClass("select_input_disable");
        a.setStyle("display", "none");
        a.getNext().setStyle("display", "");
        var b = c.get("rule");
        if ($defined(b) && b.contains("must")) {
            c.setStyle("background-color", "#b5e3df")
        }
    }
}, addEventToEl: function (a, b) {
    if (a == "input") {
        this.box.addEvent("focus", function (c) {
            if (b && b.name == "SwordGrid") {
                this.grid = b
            } else {
                this.grid = null
            }
            if ($defined(c)) {
                if (this.box == $(new Event(c).target)) {
                    this.rebuild = false
                } else {
                    if (this.box.get("display") == "true") {
                        this.hide();
                        if (!$(c.target).hasClass("sGrid_data_row_item_select")) {
                            this.execGridOnFinished()
                        }
                        this.box.set("display", "false")
                    }
                    this.box = $(new Event(c).target);
                    this.selDiv = this.getImgEl(this.box);
                    this.rebuild = true
                }
            }
            if (this.box.get("display") == "true") {
            } else {
                this.show()
            }
        }.bind(this))
    } else {
        this.selDiv.addEvent("click", function (c) {
            if (b && b.name == "SwordGrid") {
                this.grid = b
            } else {
                this.grid = null
            }
            if (this.selDiv == $(new Event(c).target)) {
                this.box = this.getBoxEl(this.selDiv);
                this.rebuild = false
            } else {
                if (this.box.get("display") == "true") {
                    this.hide();
                    if (!$(c.target).hasClass("sGrid_data_row_item_select")) {
                        this.execGridOnFinished()
                    }
                    this.box.set("display", "false")
                }
                this.selDiv = $(new Event(c).target);
                this.box = this.getBoxEl(this.selDiv);
                this.rebuild = true
            }
            if (this.box.get("display") == "true") {
            } else {
                this.show();
                this.box.focus()
            }
        }.bind(this))
    }
}});
var SwordSubmit = new Class({$family: {name: "SwordSubmit"}, Implements: [Events, Options], container: null, sign: {widgetSign: "widget", widgetNameSign: "widgetName", attrNameSign: "attrName", customerSign: "parent", commConsoleAttr: ["console"], SwordForm: ["isVal"], SwordGrid: ["check", "commit"]}, widgets: [], widgetObjs: new Hash(), dataContainer: [], button: null, isContinue: true, hasFile: false, isCustomer: false, options: {mask: true, pNode: null, name: null, newFlag: "false", tid: "", ctrl: "", page: "", value: "提交", btnName: null, enabled: "true", css: "", isSubmit: "true", isRedirect: null, forceAjax: null, reqData: null, resData: null, isShow: "true", postType: "ajax", title: "", async: "false", encodeData: "false", img: null, onValidatorBefore: $empty, onSubmitBefore: $empty, onSubmitAfter: $empty, onSuccess: $empty, onError: $empty, onAfterLoadData: $empty, maskOpacity: 1, submitConfirm: "false", submitConfirmMsg: null, isOneClick: "false"}, initialize: function () {
    if (arguments.length > 0) {
        var f = Array.link(arguments, {options: Object.type, element: $defined});
        for (var c in (f.options || {})) {
            if ($type(f.options[c]) != "function" && (/^on[A-Z]/).test(c)) {
                var a = this.getFunc(f.options[c]);
                for (var b = 0; b < a.length; b++) {
                    this.addEvent(c, a[b])
                }
            }
        }
        this.setOptions(f.options);
        if (this.options.newFlag == "false") {
            this.build()
        }
    }
    this.pc = pageContainer
}, initParam: function (a) {
    this.htmlOptions(a);
    this.options.value = this.options.btnName || a.getAttribute("value") || this.options.value;
    this.build();
    this.pc = pageContainer
}, initData: function (a) {
}, initConsoleAttr: function (g, f) {
    var a = {};
    var b = (this.sign[g] || []).combine(this.sign.commConsoleAttr || []);
    for (var c = 0; c < b.length; c++) {
        if (this.options.newFlag == "false") {
            a[b[c]] = f.get(b[c])
        } else {
            a[b[c]] = f[b[c]]
        }
    }
    return a
}, disabled: function () {
    if (!this.isCustomer) {
        this.button.disabled = true;
        Sword.utils.btn.disabled(this.button)
    }
}, enabled: function () {
    if (!this.isCustomer) {
        Sword.utils.btn.enabled(this.button);
        this.button.disabled = false
    }
}, show: function () {
    this.button.getParent().setStyle("display", "inline");
    this.options.isShow = "true"
}, hide: function () {
    this.button.getParent().setStyle("display", "none");
    this.options.isShow = "false"
}, build: function () {
    this.container = this.options.pNode;
    this.initContainer(this.container);
    if (this.options.isShow == "false") {
        this.hide()
    }
    this.initEvents()
}, initContainer: function (a) {
    var b = a.getElements("*[" + this.sign.customerSign + "=" + this.options.name + "]");
    a.setStyle("display", "inline");
    if (this.options.img) {
        a.addClass("submitCon")
    }
    if (b.length > 0) {
        this.button = b[0];
        this.isCustomer = true
    } else {
        a.grab(this.button = new Element("div"));
        this.button.set("text", this.options.value);
        if (!$chk(this.options.title)) {
            this.button.set("title", this.options.value)
        } else {
            this.button.set("title", this.options.title)
        }
    }
    if ($chk(this.options.css)) {
        this.button.set("style", this.options.css)
    }
    if (this.options.enabled == "false") {
        Sword.utils.btn.init(this.button);
        this.disabled()
    } else {
        if (!this.isCustomer) {
            Sword.utils.btn.init(this.button)
        }
    }
}, initEvents: function () {
    if ($defined(this.button)) {
        this.button.addEvent("click", function () {
            if (!this.button.disabled) {
                this.submit()
            }
        }.bind(this))
    }
}, pushData: function (f, c) {
    var a = [];
    if (arguments.length == 2) {
        if (c == null || c == undefined) {
            c = ""
        }
        var g = {name: f, value: c + ""};
        a.push(g)
    } else {
        if ($type(f) == "object") {
            a.push(f)
        } else {
            if ($type(f) == "array") {
                a = f
            }
        }
    }
    for (var b = 0; b < a.length; b++) {
        if (!a[b]["sword"]) {
            a[b]["sword"] = "attr"
        }
    }
    this.dataContainer.combine(a)
}, submit: function (a) {
    if (this.options.submitConfirm == "true") {
        var b = this.options.submitConfirmMsg;
        if (!$defined(b)) {
            b = "是否要" + this.options.btnName + "？"
        }
        swordConfirm(b, {onOk: function () {
            return this.onSubmit(a)
        }.bind(this), onCancel: function () {
        }})
    } else {
        return this.onSubmit(a)
    }
}, onSubmit: function (b) {
    this.isContinue = true;
    if (this.isContinue) {
        $extend(this.options, b);
        this.initSubmitWidget(this.container);
        this.fireEvent("onValidatorBefore", this);
        this.doBeforeEvents();
        if (this.isContinue) {
            this.fireEvent("onSubmitBefore", this)
        }
        if (this.options.isOneClick == "true") {
            this.disabled()
        }
        if (this.isContinue) {
            if (this.options.mask != "false") {
                var a = this.pc.getMask();
                a.options.opacity = this.options.maskOpacity;
                a.mask(document.body)
            }
            this.reqData = this.pc.getReq({tid: this.options.tid, ctrl: this.options.ctrl, page: this.options.page, widgets: this.dataContainer, postType: this.options.postType});
            if (this.isContinue) {
                this.doAction();
                if (this.isContinue) {
                    if (this.isHasFile() && this.isForce() != "true") {
                        this.postFile()
                    } else {
                        this.postData()
                    }
                    if (this.options.postType != "ajax") {
                        this.unMask()
                    }
                } else {
                    this.unMask()
                }
            }
            return this.resData
        }
    } else {
        this.unMask()
    }
}, postFile: function () {
    var a = this.pc.getUploadCommit().initParam({postData: this.reqData});
    a.commit(this.options.isRedirect, this.options.postType);
    this.unMask()
}, postData: function () {
    if ($defined(this.pc)) {
        try {
            if ($chk(this.options.ctrl) || $chk(this.options.tid)) {
                if (this.options.isSubmit == "true") {
                    pageContainer.postReq({req: this.reqData, async: this.options.async == "true", encodeData: this.options.encodeData, postType: this.options.postType, onSuccess: function (b) {
                        this.unMask();
                        this.resData = b;
                        this.fireEvent("onSuccess", [this.reqData, b])
                    }.bind(this), onError: function (b) {
                        if (this.options.isOneClick == "true") {
                            this.enabled()
                        }
                        this.resData = b;
                        this.doErrorEvents();
                        this.unMask();
                        this.fireEvent("onError", [this.reqData, b])
                    }.bind(this), onFinish: function (b) {
                        this.doAfterEvents();
                        this.unMask();
                        this.fireEvent("onSubmitAfter", [this.reqData, this.resData]);
                        if (this.options.postType.startWith("form_")) {
                            this.clear()
                        }
                    }.bind(this), onAfterLoadData: function (b) {
                        this.fireEvent("onAfterLoadData", [this.reqData, this.resData]);
                        this.clear()
                    }.bind(this)})
                } else {
                    this.unMask()
                }
            } else {
                this.unMask();
                this.fireEvent("onSubmitAfter", [this.reqData, this.resData]);
                this.clear()
            }
        } catch (a) {
            this.unMask();
            this.clear();
            throw new Error(a.message)
        }
    } else {
        throw new Error("数据提交失败!pageContainer为空")
    }
}, unMask: function () {
    if ((this.options.isRedirect == "false" || this.options.isRedirect == null) && this.pc) {
        if (this.options.mask != "false") {
            this.pc.getMask().unmask()
        }
    }
}, initSubmitWidget: function (a) {
    if (a && !$defined(this.load)) {
        var b = a.getElements("div");
        b.each(function (k, g) {
            var j = k.get(this.sign.widgetNameSign);
            var h = k.get(this.sign.attrNameSign);
            var m = this.pc.getWidget(j);
            if (m) {
                var l = m.name;
                if ($defined(m)) {
                    if (l == "SwordForm") {
                        if (m.isHasFile()) {
                            this.hasFile = true
                        }
                    }
                    var f = this.initConsoleAttr(l, k);
                    var c = SwordSubmit.Command.newInstance(l, j, f, m);
                    if ($defined(c)) {
                        this.widgetObjs.set(j, c)
                    }
                }
            } else {
                if ($chk(h)) {
                    this.pushData(h, k.get("value"))
                }
            }
        }.bind(this));
        this.load = "load"
    }
}, isHasFile: function () {
    return this.hasFile
}, isForce: function () {
    return this.options.forceAjax
}, doAction: function () {
    this.widgetObjs.each(function (b, a) {
        this.widgetObjs[a].doAction({data: this.dataContainer})
    }.bind(this))
}, doBeforeEvents: function () {
    this.widgetObjs.each(function (c, a) {
        var b = this.widgetObjs[a].doBeforeEvent();
        if ($defined(b) && !b) {
            this.isContinue = false;
            return
        }
    }.bind(this))
}, doAfterEvents: function () {
    this.widgetObjs.each(function (b, a) {
        this.widgetObjs[a].doAfterEvent()
    }.bind(this))
}, doErrorEvents: function () {
    this.widgetObjs.each(function (b, a) {
        this.widgetObjs[a].doError()
    }.bind(this))
}, clear: function () {
    this.dataContainer.empty();
    this.isContinue = true;
    delete this.reqData
}, stop: function () {
    this.isContinue = false
}, setTid: function (a) {
    this.options.tid = a
}, setCtrl: function (a) {
    this.options.ctrl = a
}, setCaption: function (a) {
    this.button.set("text", a);
    if (!$chk(this.options.title)) {
        this.button.set("title", a)
    }
}, setFunction: function (f, b, a) {
    b = b + "()";
    if (a == false) {
        this.options[f] = $empty;
        delete this.$events[f.replace("on", "").toLowerCase()]
    } else {
        var c = this.getFunc(b);
        if (c.length > 0) {
            this.options[f] = b;
            delete this.$events[f.replace("on", "").toLowerCase()];
            this.addEvent(f, c[0])
        }
    }
}});
SwordSubmit.Command = new Class({$family: {name: "SwordSubmit.Command"}, name: null, command: null, widgetObj: null, doAction: $empty, doBeforeEvent: $empty, doAfterEvent: $empty, doError: $empty, initialize: function (c, a, b) {
    this.name = c;
    this.console = a;
    this.widgetObj = b
}});
SwordSubmit.Command.newInstance = function (g, f, b, c) {
    var a;
    if (g == "SwordForm") {
        a = new SwordSubmit.SwordFormCommand(f, b, c)
    } else {
        if (g == "SwordGrid") {
            a = new SwordSubmit.SwordGridCommand(f, b, c)
        } else {
            if (g == "SwordMove") {
                a = new SwordSubmit.SwordMoveCommand(f, b, c)
            } else {
                if (g == "SwordTab") {
                    a = new SwordSubmit.SwordTabCommand(f, b, c)
                }
            }
        }
    }
    return a
};
SwordSubmit.SwordFormCommand = new Class({Extends: SwordSubmit.Command, doAction: function (a) {
    a.data.push(this.widgetObj.getSubmitData())
}, doBeforeEvent: function () {
    var a = true;
    if (this.console.isVal != "false") {
        if (!this.widgetObj.validate()) {
            a = false
        }
    }
    return a
}, doAfterEvent: function () {
}});
SwordSubmit.SwordGridCommand = new Class({Extends: SwordSubmit.Command, doAction: function (a) {
    if (this.console.console == "submitChecked") {
        a.data.push(this.widgetObj.getCheckedData(this.console.check))
    } else {
        if (this.console.console == "curPageData") {
            a.data.push(this.widgetObj.getCurPageGirdData())
        } else {
            if (this.console.console == "allData") {
                a.data.push(this.widgetObj.getAllGridData())
            } else {
                if (this.console.console == "allNoDeleteData") {
                    a.data.push(this.widgetObj.getAllNoDeleteGridData())
                } else {
                    if (this.console.console == "excel") {
                        a.data.combine(this.widgetObj.getGridExcelInfo(this.console.check))
                    } else {
                        a.data.push(this.widgetObj.getStatusGirdData())
                    }
                }
            }
        }
    }
}, doBeforeEvent: function () {
    var a = true;
    if (this.console.console == "submitChecked") {
        if (!this.widgetObj.validateCheckedRow(this.console.check)) {
            a = false
        }
    } else {
        if (!this.widgetObj.validate()) {
            a = false
        }
    }
    return a
}, doAfterEvent: function () {
    if (this.console.commit != "false") {
        this.widgetObj.commit()
    }
}, doError: function () {
}});
SwordSubmit.SwordMoveCommand = new Class({Extends: SwordSubmit.Command, doAction: function (a) {
    if (this.console.console == "curPageData") {
        a.data.push(this.widgetObj.getCurrentData())
    } else {
        a.data.push(this.widgetObj.getStatusData())
    }
}, doBeforeEvent: function () {
    var a = true;
    return a
}, doAfterEvent: function () {
}, doError: function () {
}});
SwordSubmit.SwordTabCommand = new Class({Extends: SwordSubmit.Command, doBeforeEvent: function () {
    return this.widgetObj.validateAllTab()
}, doAction: function (a) {
}, doAfterEvent: function () {
}});
var SwordTab = new Class({Implements: [Events, Options], $family: {name: "SwordTab"}, name: "SwordTab", options: {name: null, pNode: null, sword: null, tabType: null, tabTitles: null, tabSelectedIndex: 0, tabDivs: null, tabIframes: null, tabContentWidth: null, tabContentHeight: null, tabDirection: "up", onSelect: null, isRefresh: "false", onSelectedShowAfter: null, maxChars: 10, initLoad: "true"}, styles: {tabsUL: "tabs_ul", tabsLI: "tabs_li", tabsLICommon: "tabs_li_common", tabsLISelect: "tabs_li_select", outertabsDiv: "outer_tabs_div"}, tabMaskDiv: null, tabDivs: [], tabIframeDivs: [], tabIframes: [], tabSwordWiget: [], initialize: function (a) {
    this.setOptions(a)
}, setRefresh: function (a) {
    if (a == true) {
        this.options.isRefresh = "true"
    }
    if (a == false) {
        this.options.isRefresh = "false"
    }
}, initParam: function (a) {
    this.htmlOptions(a);
    if (this.options.tabTitles != null) {
        this.options.tabTitles = this.options.tabTitles.split(",")
    }
    if (this.options.tabDivs != null) {
        this.options.tabDivs = this.options.tabDivs.split(",")
    }
    if (this.options.tabIframes != null) {
        this.options.tabIframes = this.options.tabIframes.split(",")
    }
    this.options.pNode = a;
    this.defineStyles();
    this.createTab()
}, initData: function () {
}, defineStyles: function () {
    if (this.options.tabDirection == "up" || this.options.tabDirection == "down") {
        this.styles.tabsUL = this.styles.tabsUL + "_horizontal";
        this.styles.tabsLI = this.styles.tabsLI + "_horizontal";
        this.styles.tabsLICommon = this.styles.tabsLICommon + "_horizontal";
        this.styles.tabsLISelect = this.styles.tabsLISelect + "_horizontal";
        this.styles.outertabsDiv = this.styles.outertabsDiv + "_horizontal"
    } else {
        if (this.options.tabDirection == "left" || this.options.tabDirection == "right") {
            this.styles.tabsUL = this.styles.tabsUL + "_vertical";
            this.styles.tabsLI = this.styles.tabsLI + "_vertical";
            this.styles.tabsLICommon = this.styles.tabsLICommon + "_vertical";
            this.styles.tabsLISelect = this.styles.tabsLISelect + "_vertical";
            this.styles.outertabsDiv = this.styles.outertabsDiv + "_vertical"
        }
    }
}, computeTitleSize: function (c) {
    var b = 0;
    var f = this.options.maxChars;
    if (c.length > f) {
        for (var a = 0; a < c.length; a++) {
            if (/^[\u4e00-\u9fa5]+$/i.test(c.charAt(a))) {
                b = b + 2
            } else {
                b++
            }
        }
    }
    return b > 0 ? (c.substring(0, f) + "..") : c
}, createTab: function () {
    var c = new Element("div", {"class": "bbbbox_top_bg"}).inject(this.options.pNode);
    var h = new Element("div", {"class": "l"}).inject(c);
    var a = new Element("div", {"class": "r"}).inject(c);
    var b = new Element("div", {"class": "tabs"});
    b.inject(c);
    var g = new Element("ul", {id: "SwordTab_ul", "class": this.styles.tabsUL});
    this.options.tabTitles.each(function (m, l) {
        var j = new Element("li", {id: "SwordTab_li_" + l, "class": "" + this.styles.tabsLI + " " + this.styles.tabsLICommon}).inject(g);
        var k = new Element("div", {id: "SwordTab_div_" + l, html: this.computeTitleSize(this.options.tabTitles[l]), title: this.options.tabTitles[l]}).inject(j);
        j.addEvent("click", function (p) {
            if (j.get("isDisable") == "true") {
                return
            }
            var o = this.options.tabSelectedIndex;
            this.options.tabSelectedIndex = new Event(p).target.get("id").split("_")[2];
            if (this.options.onSelect) {
                if (this.getFunc(this.options.onSelect)[0](this, o, this.options.tabSelectedIndex) != false) {
                    this.options.tabSelectedIndex = o;
                    this.selectIndex(p);
                    if (this.options.onSelectedShowAfter) {
                        this.getFunc(this.options.onSelectedShowAfter)[0](this, o, this.options.tabSelectedIndex)
                    }
                } else {
                    this.options.tabSelectedIndex = o
                }
            } else {
                this.selectIndex(p);
                if (this.options.onSelectedShowAfter) {
                    this.getFunc(this.options.onSelectedShowAfter)[0](this, o, this.options.tabSelectedIndex)
                }
            }
            var n = this.tabDivs[this.options.tabSelectedIndex] || this.tabIframeDivs[this.options.tabSelectedIndex];
            this.tabMaskDiv.setStyles({left: n.offsetLeft, top: n.offsetTop - 1, width: n.offsetWidth, height: n.offsetHeight + 1});
            if (n.get("isMask") == "true") {
                this.tabMaskDiv.setStyle("display", "block")
            } else {
                this.tabMaskDiv.setStyle("display", "none")
            }
        }.bind(this));
        j.addEvent("mouseover", function (n) {
        }.bind(this));
        j.addEvent("mouseout", function (n) {
        }.bind(this))
    }.bind(this));
    var f = new Element("div", {id: "SwordTab_div", "class": this.styles.outertabsDiv, styles: {width: this.options.tabContentWidth, height: this.options.tabContentHeight}}).inject(b);
    if (this.options.tabType == "div") {
        this.options.tabDivs.each(function (k, j) {
            $(k).setStyle("position", "relative");
            $(k).setStyle("z-index", -1);
            this.tabDivs[j] = $(k);
            f.adopt($(k))
        }.bind(this))
    } else {
        this.options.tabIframes.each(function (l, k) {
            var j = new Element("div", {id: "SwordTab_iframeDiv_" + k, "class": this.styles.outertabsDiv, styles: {width: "100%", height: "100%"}});
            var m = new Element("iframe", {id: "SwordTab_iframe_" + k, allowTransparency: "true", frameborder: 0, styles: {border: "0px", width: "100%", height: "100%"}});
            m.inject(j);
            j.inject(f);
            if (Browser.Engine.trident) {
            }
            this.tabIframeDivs[k] = j;
            this.tabIframes[k] = m;
            j.setStyle("display", "none")
        }.bind(this))
    }
    if (this.options.tabDirection == "up" || this.options.tabDirection == "left") {
        if ($defined(g)) {
            g.inject(b, "top")
        }
    } else {
        if (this.options.tabDirection == "down" || this.options.tabDirection == "right") {
            if ($defined(g)) {
                g.inject(b)
            }
        }
    }
    this.tabMaskDiv = new Element("div", {styles: {"z-index": "30000", visibility: "visible", opacity: "0.1", position: "absolute", display: "none", background: "none repeat scroll 0% 0% gray"}}).inject(this.options.pNode, "before");
    if (this.options.initLoad == "true") {
        this.selectIndex(this.options.tabSelectedIndex)
    }
}, $: function (a) {
    return this.options.pNode.getElement("[id=" + a + "]")
}, selectIndex: function (index) {
    if (($type(index) == "event")) {
        index = new Event(index).target.get("id").split("_")[2]
    }
    if (this.options.tabSelectedIndex != index) {
        this.options.tabSelectedIndex = index
    }
    this.options.tabTitles.each(function (item, index1) {
        if (index != index1) {
            this.$("SwordTab_li_" + index1).removeClass(this.styles.tabsLISelect);
            this.$("SwordTab_li_" + index1).removeClass("tabs_li_over");
            this.$("SwordTab_li_" + index1).addClass(this.styles.tabsLICommon)
        } else {
            this.$("SwordTab_li_" + index1).removeClass(this.styles.tabsLICommon);
            this.$("SwordTab_li_" + index1).removeClass("tabs_li_over");
            this.$("SwordTab_li_" + index1).addClass(this.styles.tabsLISelect)
        }
    }.bind(this));
    if (this.options.tabType == "div") {
        this.options.tabDivs.each(function (item, index1) {
            if (index != index1) {
                $(item).setStyles({position: "absolute", left: -10000, top: -10000, "z-index": -1, clear: "both"}).addClass("tabs_div")
            } else {
                $(item).setStyles({position: "static", display: "", "z-index": 1, clear: "both"}).addClass("tabs_div");
                if ($(item).getAttribute("isload") != "true") {
                    var swordWidgets = $(item).getElements("div[sword][sword!='PageInit'][isload!='true']");
                    swordWidgets.each(function (value) {
                        if (pc.isEdit()) {
                            pc.getEditor().addEl(value)
                        }
                        var swordWidget = pageContainer.widgetFactory.create(value.getAttribute("sword"));
                        value.pNode = value;
                        swordWidget.initParam(value);
                        pageContainer.widgets.set(value.get("name"), swordWidget);
                        swordWidget.initData(pc.getInitData(value.get("name")) || pageContainer.getResData(value.get("name"), pageContainer.pinitData));
                        if ($type(this.tabSwordWiget[this.options.tabSelectedIndex]) != "array") {
                            this.tabSwordWiget[this.options.tabSelectedIndex] = new Array();
                            this.tabSwordWiget[this.options.tabSelectedIndex][0] = value.get("name")
                        } else {
                        }
                    }, this);
                    $(item).set("isload", "true")
                }
            }
        }.bind(this))
    } else {
        this.options.tabIframes.each(function (item, index1) {
            if (index != index1) {
                this.$("SwordTab_iframeDiv_" + index1).setStyles({display: "none", clear: "both"})
            } else {
                var Ifr = this.tabIframes[index1];
                if (this.options.isRefresh == "false") {
                    if ($defined(Ifr.src) && $defined(item)) {
                        if (Ifr.src != item) {
                            if (!$chk(Ifr.src)) {
                                $try(function () {
                                    var retFn = eval(item);
                                    if ($define(retFn)) {
                                        Ifr.src = retFn
                                    } else {
                                        Ifr.src = item
                                    }
                                }, function () {
                                    Ifr.src = item
                                })
                            }
                        }
                    }
                } else {
                    if (this.options.isRefresh == "true") {
                        Ifr.src = item
                    } else {
                        alert("SwordTab上定义了错误的isRefresh属性值！")
                    }
                }
                this.$("SwordTab_iframeDiv_" + index1).setStyles({display: "block", clear: "both"})
            }
        }.bind(this))
    }
}, getSelectWigetNameArray: function (b) {
    var a = new Array();
    if (this.options.tabType == "div") {
        this.tabDivs[this.options.tabSelectedIndex].getElements("div[sword][sword=" + b + "]").each(function (c) {
            a.include(c.getProperty("name"))
        })
    } else {
        alert("本方法只支持div")
    }
    return a
}, validateTab: function (b) {
    var a = true;
    this.tabSwordWiget[b].each(function (f, c) {
        if (pageContainer.getWidget(f).validate() == false) {
            a = false
        }
    });
    return a
}, validateAllTab: function () {
    if (this.validateTab(this.options.tabSelectedIndex) == false) {
        return false
    }
    for (var a = 0; a < this.options.tabTitles.length; a++) {
        if (a != this.options.tabSelectedIndex) {
            this.selectIndex(a);
            if (this.validateTab(a) == false) {
                return false
            }
        }
    }
}, show: function (a) {
    if (this.options.tabType != "div") {
        return
    }
    this.tabDivs[a].setStyle("display", "");
    this.options.pNode.getElementById("SwordTab_ul").getChildren()[a].setStyle("display", "")
}, hide: function (a) {
    if (this.options.tabType != "div") {
        return
    }
    this.tabDivs[a].setStyle("display", "none");
    this.options.pNode.getElementById("SwordTab_ul").getChildren()[a].setStyle("display", "none")
}, setTabTitle: function (a, c) {
    var b = this.options.pNode.getElement("div[id=SwordTab_div_" + a + "]");
    if (b) {
        b.set("html", c)
    }
}, setTabdivDisOrEnEdit: function (b, c) {
    var a = this.tabDivs[b] || this.tabIframeDivs[b];
    this.tabMaskDiv.setStyles({left: a.offsetLeft, top: a.offsetTop - 1, width: a.offsetWidth, height: a.offsetHeight + 1});
    a.set("isMask", "true");
    if (b == this.options.tabSelectedIndex) {
        this.tabMaskDiv.setStyle("display", "block")
    }
    if (c == "enable") {
        a.set("isMask", "false");
        if (b == this.options.tabSelectedIndex) {
            this.tabMaskDiv.setStyle("display", "none")
        }
    }
}, disOrEnEdit: function (a, b) {
    this.setTabdivDisOrEnEdit(a, b)
}, setTabdivDisOrEnClick: function (b, c) {
    var a = this.options.pNode.getElement("li#SwordTab_li_" + b);
    a.set("isDisable", "true");
    a.removeClass("tabs_li_common_horizontal").addClass("tabs_li_readonly_horizontal");
    if (c == "enable") {
        a.set("isDisable", "false");
        a.removeClass("tabs_li_readonly_horizontal").addClass("tabs_li_common_horizontal")
    }
}, disOrEnClick: function (a, b) {
    this.setTabdivDisOrEnClick(a, b)
}});
var SwordToolBar = new Class({Implements: [Events, Options], options: {name: "", type: "", pNode: null, isExtend: "true", showType: "normal", bindTo: null, isFixed: "true"}, associate: null, containerBuffer: null, enabledStatus: null, onAfterInit: $empty, itemEvents: [], initParam: function (a) {
    this.htmlOptions(a);
    this.initToolBar();
    this.onAfterInit()
}, initToolBar: function () {
    var h = this.pNode().getChildren();
    if ($type(this.pNode().get("showType")) && this.pNode().get("showType") == "mini") {
        this.options.showType = "mini"
    } else {
        this.options.showType = "normal"
    }
    var b = this.createContainer();
    var c = this.createBackBox(b);
    b.adopt(c);
    var g = this.pNode().getElement("div[name='associate']");
    pc.getPageInit().addEvent("onDataInit", function () {
        this.getAssociate(g)
    }.bind(this));
    if (h.length != 0) {
        h.each(function (q) {
            var m = q.get("name");
            var o = q.get("type");
            var k;
            var n = this.items[m] || this.items[o];
            if (n != null) {
                k = this.creatDefualtButton(q, m, o, n.pclass, n.caption, n.enabled);
                c.adopt(k)
            } else {
                var p = this.checkPro(q);
                if (p) {
                    var l = this.create(q);
                    k = l;
                    c.adopt(l)
                } else {
                    if (m != "associate") {
                        if (q.get("type") == "custom") {
                            k = this.creatBlankButtonDiv(q);
                            c.adopt(k)
                        } else {
                            if (this.alarm) {
                                alert("缺少必要属性：name,caption或者type!该标签将不被创建！" + q.getHTML())
                            }
                        }
                    }
                }
            }
            var j = q.get("isShow");
            if (j && j == "false") {
                if (k) {
                    k.setStyle("display", "none")
                }
            }
        }.bind(this))
    }
    var f = this.options.bindTo, a;
    if (f) {
        a = $w(f)
    }
    if (f && this.options.showType == "mini" && a) {
        if ("SwordForm" == a.name) {
            this.pNode().inject(a.wrapDiv.getElement("div.swordform-panel-box"), "after")
        } else {
            if ("SwordGrid" == a.name) {
                this.pNode().inject(a.scrollDiv, "before")
            }
        }
    }
    if (this.options.isFixed == "true" && !this.options.bindTo) {
        this.pNode().adopt(new Element("div", {styles: {height: this.options.showType == "mini" ? "24px" : "69px"}}))
    }
    this.pNode().adopt(b);
    this.containerBuffer = b;
    this.setEnabledStatus(b)
}, setEnabledStatus: function (a) {
    this.enabledStatus = new Object();
    if (a.getElement("div[name='box']").getChildren().length != 0) {
        a.getElement("div[name='box']").getChildren().each(function (b) {
            this.enabledStatus[b.get("name")] = b.get("enabled")
        }.bind(this))
    }
}, initStatus: function (a) {
    if ($chk(a.containerBuffer)) {
        a.containerBuffer.getElement("div[name='box']").getChildren().each(function (b) {
            a.enabledStatus[b.get("name")] == "true" ? a.setEnabled(b.get("name")) : a.setDisabled(b.get("name"))
        }.bind(a))
    }
}, pNode: function () {
    return this.options.pNode
}, checkPro: function (a) {
    return $chk(a.get("name")) && $chk(a.get("caption"))
}, checkButton: function (a) {
    return $chk(this.containerBuffer.getElement("div[name='box']").getElement("div[name='" + a + "']"))
}, isDefault: function (a) {
    return $chk(a.get("defualt")) && a.get("defualt") == "true"
}, getAssociate: function (a) {
    if ($chk(a)) {
        this.associate = new Object();
        var b = a.getElements("div[name='associateWighet']").length != 0 ? a.getElements("div[name='associateWighet']") : a.getElements("div[name='associateWidget']");
        b.each(function (h, f) {
            var g = h.get("widgetName");
            var c = this.loadWidget(g);
            var j = c.name;
            var k = this.associate[j];
            if (!$chk(k)) {
                k = (this.associate[j] = {})
            }
            this.build(h, j, g);
            this.regAssociateEvent(j, g)
        }.bind(this))
    } else {
        if (this.alarm) {
            alert("请设置ToolBar关联的组件！")
        }
    }
}, regAssociateEvent: function (k, g) {
    var j = $w(g);
    if (this.associate != null) {
        var h = this.associate[k][g];
        if ($chk(h)) {
            for (var b in h.events) {
                if (b) {
                    var c = this.getFunc(h.events[b]);
                    for (var a = 0; a < c.length; a++) {
                        var f = c[a];
                        j.addEvent(b, f.bind(this, [g]))
                    }
                }
            }
            if (k == "SwordGrid") {
                if ($chk(h.muiltCheckFunction)) {
                    j.addEvent("onAfterCreateHeader", function () {
                        var l = j.header().getElement("div[_for=" + h.muiltCheckName + "]").getElement("input");
                        if ($chk(l)) {
                            l.addEvent("click", h.muiltCheckFunction.bind(this, [l]))
                        }
                    }.bind(this))
                }
            }
        }
    }
}, getSwordGridAllCheckBox: function (a, b) {
    return($w(a).header().getElement("div[_for=" + b + "]").getElement("input"))
}, loadWidget: function (a) {
    var b = pc.getWidget(a);
    if ($chk(b)) {
        return b
    } else {
        if (this.alarm) {
            alert("ToolBar组件无法获取关联组件" + a)
        }
    }
}, buttonEvents: {onClick: {SwordGrid: {firstPage: function (b) {
    var a = $w(b);
    a.loadPage(1);
    this.initStatus(this)
}, endPage: function (b) {
    var a = $w(b);
    a.loadPage(a.totalPage());
    this.initStatus(this)
}, nextPage: function (b) {
    var a = $w(b);
    a.loadPage(a.pageNum() + 1);
    this.initStatus(this)
}, previousPage: function (b) {
    var a = $w(b);
    a.loadPage(a.pageNum() - 1);
    this.initStatus(this)
}}}}, wighetAssociates: {SwordGrid: {event: {onRowClick: function () {
    this.rowClick(this)
}, onAfterInitData: function () {
    this.initStatus(this)
}, onAllCheckClick: function () {
    this.allCheckClick(this)
}}}, SwordForm: null}});
SwordToolBar.implement({events: {SwordGrid: {onRowClick: "onRowClick", onAfterInitData: "onAfterInitData", onAllCheckClick: "onAllCheckClick"}}});
SwordToolBar.implement({items: {edit: {caption: i18n.toolEdit, type: "edit", pclass: "edit", enabled: "false"}, "new": {caption: i18n.toolNew, type: "new", pclass: "new", enabled: "true"}, "delete": {caption: i18n.toolDel, type: "delete", pclass: "delete", enabled: "false"}, refresh: {caption: i18n.toolFresh, type: "refresh", pclass: "refresh", enabled: "true"}, open: {caption: i18n.toolOpen, type: "open", pclass: "open", enabled: "false"}, find: {caption: i18n.toolFind, type: "find", pclass: "find", enabled: "true"}, firstPage: {caption: i18n.firstPage, type: "firstPage", pclass: "firstPage", enable: "true"}, endPage: {caption: i18n.endPage, type: "endPage", pclass: "endPage", enable: "true"}, nextPage: {caption: i18n.nextPage, type: "nextPage", pclass: "nextPage", enable: "true"}, previousPage: {caption: i18n.previousPage, type: "previousPage", pclass: "previousPage", enable: "true"}, save: {caption: i18n.toolSave, type: "save", pclass: "save", enabled: "true"}, back: {caption: i18n.toolBack, type: "back", pclass: "back", enable: "true"}, "export": {caption: i18n.toolExport, type: "export", pclass: "export", enable: "true"}, addtime: {caption: i18n.toolAddtime, type: "addtime", pclass: "addtime", enable: "true"}, reducetime: {caption: i18n.toolReducetime, type: "reducetime", pclass: "reducetime", enable: "true"}, addright: {caption: i18n.toolAddright, type: "addright", pclass: "addright", enable: "true"}, reduceright: {caption: i18n.toolReduceright, type: "reduceright", pclass: "reduceright", enable: "true"}, close: {caption: "关闭", type: "close", pclass: "close", enable: "true"}, print: {caption: "打印", type: "print", pclass: "print", enable: "true"}, revoke: {caption: "废弃", type: "revoke", pclass: "revoke", enable: "true"}, viewResult: {caption: "查看结果", type: "viewResult", pclass: "viewResult", enable: "true"}, consult: {caption: "磋商", type: "consult", pclass: "consult", enable: "true"}, revoke: {caption: "废弃", type: "revoke", pclass: "revoke", enable: "true"}, "import": {caption: "导入", type: "import", pclass: "import", enable: "true"}, lssue: {caption: "发出", type: "lssue", pclass: "lssue", enable: "true"}, investigation: {caption: "发函协查", type: "investigation", pclass: "investigation", enable: "true"}, ticket: {caption: "开票", type: "ticket", pclass: "ticket", enable: "true"}, debit: {caption: "扣款", type: "debit", pclass: "debit", enable: "true"}, inspect: {caption: "启动", type: "inspect", pclass: "inspect", enable: "true"}, sign: {caption: "签到", type: "sign", pclass: "sign", enable: "true"}, receive: {caption: "接收", type: "receive", pclass: "receive", enable: "true"}, violation: {caption: "违法登记", type: "violation", pclass: "violation", enable: "true"}, preview: {caption: "预览", type: "preview", pclass: "preview", enable: "true"}, push: {caption: "推送", type: "push", pclass: "push", enable: "true"}, accept: {caption: "确定", type: "accept", pclass: "accept", enable: "true"}, registration: {caption: "登记", type: "registration", pclass: "registration", enable: "true"}}});
SwordToolBar.implement({create: function (a) {
    if (!$chk(a.get("name"))) {
        return null
    }
    var g = a.get("type");
    if (!$chk(g)) {
        g = a.get("name")
    }
    var f = a.get("pclass");
    var j = new Element("div", {name: a.get("name"), type: g, "class": this.options.showType != "mini" ? this.globe.button.backGround : this.mini_globe.button.backGround, enabled: a.get("enabled") == null ? "true" : a.get("enabled")});
    var k = new Element("div", {"class": f == null ? "" : (a.get("enabled") == "true" || a.get("enabled") == null ? a.get("pclass") + "_enabled" : a.get("pclass") + "_disabled"), name: "image"});
    var h = "";
    var l = "";
    if (this.options.showType != "mini" && $chk(a.get("caption")) && a.get("caption").length > 4) {
        h = a.get("caption");
        l = a.get("caption").substring(0, 3) + "..."
    } else {
        h = a.get("altMes");
        l = a.get("caption")
    }
    if ($chk(h)) {
        j.set("title", h)
    }
    var c = new Element("div", {"class": this.options.showType != "mini" ? (a.get("enabled") == "true" || a.get("enabled") == null ? this.globe.text.enabled : this.globe.text.disabled) : (a.get("enabled") == "true" || a.get("enabled") == null ? this.mini_globe.text.enabled : this.mini_globe.text.disabled), name: "caption", html: a.get("caption") == null ? caption : l});
    j.adopt(k, c);
    if ($chk(a.get("x"))) {
        j.set({styles: {width: a.get("x")}})
    }
    var b = new ItemEvent();
    b.initParam(a);
    b.pNode = this.options.pNode;
    this.itemEvents.include(b);
    j.addEvent("click", function () {
        if (j.get("enabled") == "true") {
            b.regOnClick()
        }
    });
    j.addEvent("mouseover", function (m) {
        if (j.get("enabled") == "true") {
            b.regOnMouseOver(m)
        }
    });
    j.addEvent("mouseout", function (m) {
        if (j.get("enabled") == "true") {
            b.regOnMouseout(m)
        }
    });
    j.addEvent("mousedown", function (m) {
        if (j.get("enabled") == "true") {
            b.regOnMouseDown(m)
        }
    });
    j.addEvent("mouseup", function (m) {
        if (j.get("enabled") == "true") {
            b.regOnMouseUp(m)
        }
    });
    return j
}, creatDefualtButton: function (f, b, m, l, o, k, c) {
    if (!$chk(m)) {
        m = b
    }
    var a = new Element("div", {name: b, type: m, "class": this.options.showType != "mini" ? this.globe.button.backGround : this.mini_globe.button.backGround, enabled: !$chk(f.get("enabled")) ? ($chk(k) ? k : "true") : f.get("enabled")});
    var g = new Element("div", {"class": $chk(f.get("enabled")) ? (f.get("enabled") == "true" ? l + "_enabled" : l + "_disabled") : ($chk(k) ? (k == "true" ? l + "_enabled" : l + "_disabled") : l + "_enabled"), name: "image"});
    var n = "";
    var p = "";
    if (this.options.showType != "mini" && $chk(f.get("caption")) && f.get("caption").length > 4) {
        n = f.get("caption");
        p = f.get("caption").substring(0, 3) + "..."
    } else {
        n = f.get("altMes");
        p = f.get("caption")
    }
    if ($chk(n)) {
        a.set("title", n)
    }
    var j = new Element("div", {"class": this.options.showType != "mini" ? ($chk(f.get("enabled")) ? (f.get("enabled") == "true" ? this.globe.text.enabled : this.globe.text.disabled) : ($chk(k) ? (k == "true" ? this.globe.text.enabled : this.globe.text.disabled) : this.globe.text.enabled)) : ($chk(f.get("enabled")) ? (f.get("enabled") == "true" ? this.mini_globe.text.enabled : this.mini_globe.text.disabled) : ($chk(k) ? (k == "true" ? this.mini_globe.text.enabled : this.mini_globe.text.disabled) : this.mini_globe.text.enabled)), name: "caption", html: f.get("caption") == null ? o : p});
    a.adopt(g, j);
    if ($chk(f.get("x"))) {
        a.set({styles: {width: f.get("x")}})
    }
    var h = new ItemEvent();
    h.initParam(f);
    if ($chk(c)) {
        h.initEvents()
    }
    h.buttonEvents = this.buttonEvents;
    h.pNode = this.options.pNode;
    h.initStatus = this.initStatus.bind(this);
    this.itemEvents.include(h);
    a.addEvent("click", function () {
        if (a.get("enabled") == "true") {
            h.regOnClick()
        }
    });
    a.addEvent("mouseover", function (q) {
        if (a.get("enabled") == "true") {
            h.regOnMouseOver(q)
        }
    });
    a.addEvent("mouseout", function (q) {
        if (a.get("enabled") == "true") {
            h.regOnMouseout(q)
        }
    });
    a.addEvent("mousedown", function (q) {
        if (a.get("enabled") == "true") {
            h.regOnMouseDown(q)
        }
    });
    a.addEvent("mouseup", function (q) {
        if (a.get("enabled") == "true") {
            h.regOnMouseUp(q)
        }
    });
    return a
}, creatBlankButtonDiv: function (b) {
    var a = new Element("div", {name: name, "class": this.globe.blankButtonDiv});
    a.adopt(b);
    return a
}, setDisabled: function (c) {
    var b = this.options.pNode.getElements("div[name='container']");
    var n = b.getElements("div[type='" + c + "']")[0];
    if (n.length == 0) {
        return null
    }
    var g = 0;
    for (g = 0; g < n.length; g++) {
        var a = n[g];
        if (this.options.pNode.get("showType") == "mini" && a.hasClass("tb_mini_hover")) {
            a.removeClass("tb_mini_hover").removeClass("tb_mini_texthover")
        }
        a.set("enabled", "false");
        var l = a.getElements("div[name='image']")[0];
        var m = (l.get("class")).replace("_enabled", "_disabled");
        var j = null;
        if ($chk(j)) {
            var k = j.substring(j.lastIndexOf(".") + 1);
            var o = j.substring(0, j.lastIndexOf("."));
            var h = o.replace("_disabled", "") + "_disabled." + k;
            l.setStyles({"background-image": 'url("' + h + '")'})
        } else {
            l.set("class", m)
        }
        var f = a.getElements("div[name='caption']")[0];
        f.set("class", this.options.showType != "mini" ? this.globe.text.disabled : this.mini_globe.text.disabled)
    }
}, setEnabled: function (h) {
    var b = this.options.pNode.getElements("div[name='container']");
    var n = b.getElements("div[type='" + h + "']")[0];
    if (n.length == 0) {
        return null
    }
    var f = 0;
    for (f = 0; f < n.length; f++) {
        var a = n[f];
        a.set("enabled", "true");
        var l = a.getElements("div[name='image']")[0];
        var m = (l.get("class")).replace("_disabled", "_enabled");
        var j = null;
        if ($chk(j)) {
            var k = j.substring(j.lastIndexOf(".") + 1);
            var o = j.substring(0, j.lastIndexOf("."));
            var g = o.replace("_disabled", "") + "." + k;
            l.setStyles({"background-image": 'url("' + g + '")'})
        } else {
            l.set("class", m)
        }
        var c = a.getElements("div[name='caption']")[0];
        c.set("class", this.options.showType != "mini" ? this.globe.text.enabled : this.mini_globe.text.enabled)
    }
}, setDisplay: function (b) {
    var a = this.options.pNode.getElements("div[name='container']");
    var f = a.getElements("div[type='" + b + "']");
    if (f.length == 0) {
        return null
    }
    var c = f[0];
    c.setStyle("display", "")
}, setHide: function (b) {
    var a = this.options.pNode.getElements("div[name='container']");
    var f = a.getElements("div[type='" + b + "']");
    if (f.length == 0) {
        return null
    }
    var c = f[0];
    c.setStyle("display", "none")
}, buildDisablePic: function (g) {
    var f = g.lastIndexOf(".");
    var c = g.substring(f + 1);
    var b = g.substring(0, f);
    var a = b.replace("_disabled", "") + "_disabled";
    return a + "." + c
}, createContainer: function () {
    var a = new Element("div", {name: "container", "class": this.options.showType != "mini" ? this.globe.box.backGround : this.mini_globe.box.backGround});
    var g;
    var f;
    var b = new Element("div", {"class": this.options.showType != "mini" ? this.globe.box.left : this.mini_globe.box.left});
    var c = new Element("div", {"class": this.options.showType != "mini" ? this.globe.box.right : this.mini_globe.box.right});
    a.adopt(b, c);
    if (this.options.isFixed == "true" && !this.options.bindTo) {
        a.addClass("toolbar_fixed")
    }
    return a
}, createBackBox: function (a) {
    return new Element("div", {"class": this.options.showType != "mini" ? this.globe.box.back : this.mini_globe.box.back, name: "box"})
}});
SwordToolBar.implement({globe: {box: {backGround: "tb_box", top: "", bottom: "", left: "l", right: "r", back: "c"}, button: {backGround: "tb", top: "", bottom: "", left: "", right: ""}, text: {enabled: "text_enabled", disabled: "text_disabled"}, blankButtonDiv: "tb_blank"}, mini_globe: {box: {backGround: "tb_mini_box", top: "", bottom: "", left: "l", right: "r", back: "c"}, button: {backGround: "mini_tb", top: "", bottom: "", left: "", right: ""}, text: {enabled: "text_enabled", disabled: "text_disabled"}}, defaultCss: {"new": "new", open: "open", find: "find", "delete": "delete", refresh: "refresh"}});
SwordToolBar.implement({build: function (c, k, j) {
    if (k == "SwordGrid") {
        var h = this.events.SwordGrid;
        var b = this.associate[k][j];
        if (!$chk(b)) {
            b = (this.associate[k][j] = {})
        }
        this.associate[k][j].muiltCheckName = c.getElement("div[name='muiltCheck']").get("checkName");
        var a = b.events;
        if (!$chk(a)) {
            a = (b.events = {})
        }
        if (this.options.isExtend == "true") {
            this.pluginBuild(k, j)
        }
        for (var g in h) {
            var f = c.get(g);
            if ($chk(f)) {
                if ($chk(this.events[k][g])) {
                    this.associate[k][j].events[this.events[k][g]] = f
                }
            }
        }
    }
}, pluginBuild: function (g, c) {
    var f = this.wighetAssociates[g].event;
    for (var a in f) {
        this.associate[g][c].events[this.events[g][a]] = f[a]
    }
    var b = this.gridMuiltCheck;
    if ($chk(b)) {
        this.associate[g][c].muiltCheckFunction = b
    }
}});
SwordToolBar.implement({associate: {SwordGrid: {}, SwordForm: {}, SwordSubmit: {}}});
var ItemEvent = new Class({Implements: [Events, Options], options: {_onClick: null, onClick: null, onBlur: null, onMouseover: null, onMouseout: null, onMousedown: null, onMouseup: null, name: "", type: "", gridName: ""}, buttonEvents: null, pNode: null, initStatus: $empty, earseEvent: function (b, a) {
    a.each(function (g) {
        var c = b.get(g);
        if (c) {
            if (Browser.Engine.trident4 || Browser.Engine.trident5) {
                c += "";
                if (c.indexOf("{") != -1) {
                    c = c.substring(c.indexOf("{") + 1, c.lastIndexOf("}"))
                }
            }
            b.set("_" + g, c);
            b.erase(g)
        }
    })
}, initEvents: function () {
    if ($chk(this.options.gridName)) {
        if (!$chk(this.options.onClick)) {
            if ($chk(this.buttonEvents)) {
                for (var b in this.buttonEvents) {
                    var f = this.buttonEvents[b];
                    var a = f[$w(this.options.gridName).name];
                    var c = a[this.options.type];
                    if ($chk(c)) {
                        this.addEvent(b, c.bind(this, [this.options.gridName]))
                    }
                }
            }
        }
    }
    if (!$chk(this.options.onMouseover)) {
        this.addEvent("onMouseover", function (j) {
            var l = j.target.getParent("div[name='" + this.options.name + "']");
            if (!l) {
                return
            }
            var g = l.get("class")[0];
            var k;
            if (this.pNode.get("showType") != "mini") {
                l.removeClass("tb_hover");
                l.removeClass("tb_hover");
                l.addClass("tb_hover")
            } else {
                l.removeClass("tb_mini_hover");
                l.removeClass("tb_mini_hover");
                l.addClass("tb_mini_hover");
                var h = l.getElements("div[name='caption']")[0];
                h.removeClass("tb_mini_texthover");
                h.removeClass("tb_mini_texthover");
                h.addClass("tb_mini_texthover")
            }
        }.bind(this))
    }
    if (!$chk(this.options.onMouseout)) {
        this.addEvent("onMouseout", function (j) {
            var l = j.target.getParent("div[name='" + this.options.name + "']");
            if (!l) {
                return
            }
            var g = l.get("class")[0];
            var k;
            if (this.pNode.get("showType") != "mini") {
                l.removeClass("tb_hover");
                l.removeClass("tb_hover")
            } else {
                l.removeClass("tb_mini_hover");
                l.removeClass("tb_mini_hover");
                var h = l.getElements("div[name='caption']")[0];
                h.removeClass("tb_mini_texthover");
                h.removeClass("tb_mini_texthover")
            }
        }.bind(this))
    }
    if (!$chk(this.options.onMousedown)) {
        this.addEvent("onMousedown", function (j) {
            var l = j.target.getParent("div[name='" + this.options.name + "']");
            if (!l) {
                return
            }
            var g = l.get("class")[0];
            var k;
            if (this.pNode.get("showType") != "mini") {
                l.removeClass("tb_click");
                l.removeClass("tb_click");
                l.addClass("tb_click")
            } else {
                l.removeClass("tb_mini_click");
                l.removeClass("tb_mini_click");
                l.addClass("tb_mini_click");
                var h = l.getElements("div[name='caption']")[0];
                h.removeClass("tb_mini_textclick");
                h.removeClass("tb_mini_textclick");
                h.addClass("tb_mini_textclick")
            }
        }.bind(this))
    }
    if (!$chk(this.options.onMouseup)) {
        this.addEvent("onMouseup", function (j) {
            var l = j.target.getParent("div[name='" + this.options.name + "']");
            if (!l) {
                return
            }
            var g = l.get("class")[0];
            var k;
            if (this.pNode.get("showType") != "mini") {
                l.removeClass("tb_click");
                l.removeClass("tb_click");
                l.removeClass("tb_hover");
                l.removeClass("tb_hover");
                l.addClass("tb_hover")
            } else {
                l.removeClass("tb_mini_click");
                l.removeClass("tb_mini_click");
                l.removeClass("tb_mini_hover");
                l.removeClass("tb_mini_hover");
                l.addClass("tb_mini_hover");
                var h = l.getElements("div[name='caption']")[0];
                h.removeClass("tb_mini_textclick");
                h.removeClass("tb_mini_textclick");
                h.removeClass("tb_mini_texthover");
                h.removeClass("tb_mini_texthover");
                h.addClass("tb_mini_texthover")
            }
        }.bind(this))
    }
}, initParam: function (a) {
    this.earseEvent(a, ["onclick"]);
    this.htmlOptions(a);
    if (!$chk(this.options.type)) {
        this.options.type = this.options.name
    }
    pc.getPageInit().addEvent("onDataInit", this.initEvents.bind(this))
}, regOnClick: function () {
    if ($defined(this.options._onClick)) {
        this.getFunc(this.options._onClick)[0]()
    } else {
        if ($defined(this.options.onClick)) {
            this.getFunc(this.options.onClick)[0]()
        } else {
            this.fireEvent("onClick")
        }
    }
}, regOnMouseOver: function (a) {
    this.fireEvent("onMouseover", a)
}, regOnMouseDown: function (a) {
    this.fireEvent("onMousedown", a)
}, regOnMouseUp: function (a) {
    this.fireEvent("onMouseup", a)
}, regOnMouseout: function (a) {
    this.fireEvent("onMouseout", a)
}});
var SwordToolTips = new Class({Implements: [Events, Options], style: {styBase: "box_sty", defSty: "c", defCont: "cont"}, options: {imagePath: $SwordLoader.rootPath + "swordweb/styles/gt3new/SwordToolTips/images/", arrowImageFile: "green-arrow.gif", tarrowImageFileRight: "green-arrow-right.gif", formTooltipDivClassName: "DHTMLgoodies_formTooltipDiv", tooltipWidth: 150, tooltipBgColor: "blue", closeMessage: "关闭", disableTooltipMessage: "不再提示", tooltipPosition: "below", arrowRightWidth: 16, arrowTopHeight: 13, toptipHeight: 33, tooltipCornerSize: 10, tooltipDisabled: false, disableTooltipPossibility: false, disableTooltipClose: false, displayArrow: true, pageBgColor: "#FFFFFF"}, tooltipDiv: null, tooltipText: null, activeInput: null, tooltipContentDiv: null, positionLeft: null, positionTop: null, initialize: function (a) {
    this.setOptions(a);
    if (navigator.userAgent.indexOf("MSIE") >= 0 && navigator.userAgent.indexOf("MSIE 9") == -1) {
        this.isMSIE = true
    } else {
        this.isMSIE = false
    }
    window.refToFormTooltip = this;
    window.onresize = function () {
        window.refToFormTooltip.__positionCurrentToolTipObj()
    };
    if (window.refToFormTooltip.options.tooltipBgColor == "green") {
        window.refToFormTooltip.options.tooltipUpClassName = "DHTMLgoodies_green_formTooltip_upImg";
        window.refToFormTooltip.options.tooltipBottomClassName = "DHTMLgoodies_green_formTooltip_bottomImg";
        window.refToFormTooltip.options.tooltipRightClassName = "DHTMLgoodies_green_formTooltip_rightImg";
        window.refToFormTooltip.options.tooltipBgColor = "#589a82"
    } else {
        if (window.refToFormTooltip.options.tooltipBgColor == "blue") {
            window.refToFormTooltip.options.tooltipUpClassName = "DHTMLgoodies_blue_formTooltip_upImg";
            window.refToFormTooltip.options.tooltipBottomClassName = "DHTMLgoodies_blue_formTooltip_bottomImg";
            window.refToFormTooltip.options.tooltipRightClassName = "DHTMLgoodies_blue_formTooltip_rightImg";
            window.refToFormTooltip.options.tooltipBgColor = "#7d9bc5"
        }
    }
}, createTip: function (c, b) {
    var a = window.refToFormTooltip.getTopPos(c);
    if ($(document.body).getScroll().y == a) {
        return
    }
    window.refToFormTooltip.tooltipText = b;
    window.refToFormTooltip.activeInput = c;
    window.refToFormTooltip.__displayTooltip()
}, hide: function () {
    window.refToFormTooltip.__hideTooltip()
}, __displayTooltip: function () {
    if (window.refToFormTooltip.options.tooltipDisabled) {
        return
    }
    if (!window.refToFormTooltip.tooltipDiv) {
        window.refToFormTooltip.__createTooltip()
    }
    window.refToFormTooltip.__positionTooltip();
    window.refToFormTooltip.tooltipContentDiv.innerHTML = ("<div style='color:white;' id='cont'>");
    var a = window.refToFormTooltip.tooltipContentDiv.getElements("div[id='cont']")[0];
    a.appendText(window.refToFormTooltip.tooltipText);
    window.refToFormTooltip.tooltipDiv.style.display = "block"
}, __createTooltip: function () {
    window.refToFormTooltip.tooltipDiv = document.createElement("DIV");
    window.refToFormTooltip.tooltipDiv.style.position = "absolute";
    var c = new Element("div");
    if (window.refToFormTooltip.options.displayArrow) {
        if (window.refToFormTooltip.options.tooltipPosition == "below") {
            c.addClass(window.refToFormTooltip.options.tooltipBottomClassName)
        } else {
            if (window.refToFormTooltip.options.tooltipPosition == "right") {
                c.addClass(window.refToFormTooltip.options.tooltipRightClassName)
            } else {
                if (window.refToFormTooltip.options.tooltipPosition == "up") {
                    c.addClass(window.refToFormTooltip.options.tooltipUpClassName)
                }
            }
        }
        if (window.refToFormTooltip.options.tooltipPosition != "up") {
            window.refToFormTooltip.tooltipDiv.appendChild(c)
        }
    }
    var f = document.createElement("DIV");
    f.style.position = "relative";
    f.style.zIndex = 1000;
    if (window.refToFormTooltip.options.tooltipPosition != "up" && window.refToFormTooltip.options.tooltipPosition != "below" && window.refToFormTooltip.options.displayArrow) {
        f.style.left = window.refToFormTooltip.options.arrowRightWidth + "px"
    }
    f.id = "formTooltipDiv";
    f.className = window.refToFormTooltip.options.formTooltipDivClassName;
    f.style.backgroundColor = window.refToFormTooltip.options.tooltipBgColor;
    window.refToFormTooltip.tooltipDiv.appendChild(f);
    window.refToFormTooltip.tooltipContentDiv = document.createElement("DIV");
    window.refToFormTooltip.tooltipContentDiv.style.position = "relative";
    window.refToFormTooltip.tooltipContentDiv.id = "formTooltipContent";
    f.appendChild(window.refToFormTooltip.tooltipContentDiv);
    if (window.refToFormTooltip.options.disableTooltipClose) {
        var b = document.createElement("DIV");
        b.style.textAlign = "center";
        b.innerHTML = '<A class="DHTMLgoodies_formTooltip_closeMessage" href="#" onclick="window.refToFormTooltip.__hideTooltipFromLink();return false">' + window.refToFormTooltip.options.closeMessage + "</A>";
        if (window.refToFormTooltip.options.disableTooltipPossibility) {
            var a = b.innerHTML;
            a = a + ' | <A class="DHTMLgoodies_formTooltip_closeMessage" href="#" onclick="window.refToFormTooltip.disableTooltip();return false">' + window.refToFormTooltip.options.disableTooltipMessage + "</A>";
            b.innerHTML = a
        }
        f.appendChild(b)
    }
    if (window.refToFormTooltip.options.displayArrow && window.refToFormTooltip.options.tooltipPosition == "up") {
        window.refToFormTooltip.tooltipDiv.appendChild(c)
    }
    document.body.appendChild(window.refToFormTooltip.tooltipDiv);
    if (window.refToFormTooltip.options.tooltipCornerSize > 0) {
        window.refToFormTooltip.roundedCornerObj = new DHTMLgoodies_roundedCorners();
        window.refToFormTooltip.roundedCornerObj.addTarget("formTooltipDiv", window.refToFormTooltip.options.tooltipCornerSize, window.refToFormTooltip.options.tooltipCornerSize, window.refToFormTooltip.options.tooltipBgColor, window.refToFormTooltip.options.pageBgColor, 5);
        window.refToFormTooltip.roundedCornerObj.init()
    }
    window.refToFormTooltip.tooltipContentDiv = $("formTooltipContent");
    $("formTooltipDiv").addEvent("click", function (g) {
        window.refToFormTooltip.tooltipDiv.style.display = "none"
    })
}, __positionTooltip: function () {
    var a = window.refToFormTooltip.activeInput;
    var f = 0;
    var c = 0;
    var b = 0;
    if (!window.refToFormTooltip.options.displayArrow) {
        f = 3
    }
    if (window.refToFormTooltip.options.tooltipPosition == "below") {
        c = window.refToFormTooltip.getLeftPos(a);
        b = (window.refToFormTooltip.getTopPos(a) + a.offsetHeight + f)
    } else {
        if (window.refToFormTooltip.options.tooltipPosition == "right") {
            c = (window.refToFormTooltip.getLeftPos(a) + a.offsetWidth + f);
            b = window.refToFormTooltip.getTopPos(a)
        } else {
            if (window.refToFormTooltip.options.tooltipPosition == "up") {
                c = window.refToFormTooltip.getLeftPos(a);
                b = (window.refToFormTooltip.getTopPos(a) - a.offsetHeight - f - window.refToFormTooltip.options.toptipHeight)
            }
        }
    }
    window.refToFormTooltip.positionLeft = c;
    window.refToFormTooltip.positionTop = b;
    window.refToFormTooltip.tooltipDiv.style.left = c + "px";
    window.refToFormTooltip.tooltipDiv.style.top = b + "px";
    window.refToFormTooltip.tooltipDiv.style.width = window.refToFormTooltip.options.tooltipWidth + "px"
}, getLeftPos: function (c) {
    try {
        var j = c._getPosition().x - $(document.body).getScrollWidth();
        var f = 0;
        if (j > 0) {
            f = $(document.body).getWidth()
        } else {
            f = c._getPosition().x
        }
        return f
    } catch (g) {
        var b = document.documentElement.clientWidth;
        var h = document.documentElement.scrollWidth;
        var a = (b - h) / 4;
        return window.refToFormTooltip.positionLeft + a
    }
}, getTopPos: function (f) {
    try {
        var b = f._getPosition().y - $(document.body).getScroll().y + f.getHeight() + 20;
        var a = $(document.body).getHeight();
        if ((b > a || b >= 0)) {
            b = f._getPosition().y
        } else {
            b = f._getPosition().y + f.getHeight()
        }
        return b
    } catch (c) {
        return window.refToFormTooltip.positionTop
    }
}, getViewSize: function () {
    return{w: window.innerWidth || document.documentElement.clientWidth, h: window.innerHeight || document.documentElement.clientHeight}
}, getFullSize: function () {
    var a = Math.max(document.documentElement.clientWidth, document.body.clientWidth) + Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);
    var b = Math.max(document.documentElement.clientHeight, document.body.clientHeight) + Math.max(document.documentElement.scrollTop, document.body.scrollTop);
    a = Math.max(document.documentElement.scrollWidth, a);
    b = Math.max(document.documentElement.scrollHeight, b);
    return{w: a, h: b}
}, __positionCurrentToolTipObj: function () {
    if (window.refToFormTooltip.activeInput) {
        window.refToFormTooltip.__positionTooltip()
    }
}, getSrcElement: function (b) {
    var a;
    if (b.target) {
        a = b.target
    } else {
        if (b.srcElement) {
            a = b.srcElement
        }
    }
    if (a.nodeType == 3) {
        a = a.parentNode
    }
    return a
}, __hideTooltip: function () {
    try {
        window.refToFormTooltip.tooltipDiv.style.display = "none"
    } catch (a) {
    }
}, __hideTooltipFromLink: function () {
    setTimeout("window.refToFormTooltip.__hideTooltip()", 10)
}, disableTooltip: function () {
    window.refToFormTooltip.__hideTooltipFromLink();
    window.refToFormTooltip.options.tooltipDisabled = true
}, setTooltipPosition: function (a) {
    window.refToFormTooltip.options.tooltipPosition = a
}, setCloseMessage: function (a) {
    window.refToFormTooltip.options.closeMessage = a
}, setDisableTooltipMessage: function (a) {
    window.refToFormTooltip.options.disableTooltipMessage = a
}, setTooltipDisablePossibility: function (a) {
    window.refToFormTooltip.options.disableTooltipPossibility = a
}, setTooltipDisableClose: function (a) {
    window.refToFormTooltip.options.disableTooltipClose = a
}, setTooltipWidth: function (a) {
    window.refToFormTooltip.options.tooltipWidth = a
}, setArrowVisibility: function (a) {
    window.refToFormTooltip.options.displayArrow = a
}, setTooltipBgColor: function (a) {
    window.refToFormTooltip.options.tooltipBgColor = a
}, setTooltipCornerSize: function (a) {
    window.refToFormTooltip.options.tooltipCornerSize = a
}, setTopArrowHeight: function (a) {
    window.refToFormTooltip.options.arrowTopHeight = a
}, setRightArrowWidth: function (a) {
    window.refToFormTooltip.options.arrowRightWidth = a
}, setPageBgColor: function (a) {
    window.refToFormTooltip.options.pageBgColor = a
}});
function DHTMLgoodies_roundedCorners() {
    var a;
    this.roundedCornerTargets = new Array()
}
var string = "";
DHTMLgoodies_roundedCorners.prototype = {addTarget: function (l, j, f, b, k, h, a, c) {
    var g = this.roundedCornerTargets.length;
    this.roundedCornerTargets[g] = new Array();
    this.roundedCornerTargets[g]["divId"] = l;
    this.roundedCornerTargets[g]["xRadius"] = j;
    this.roundedCornerTargets[g]["yRadius"] = f;
    this.roundedCornerTargets[g]["color"] = b;
    this.roundedCornerTargets[g]["backgroundColor"] = k;
    this.roundedCornerTargets[g]["padding"] = h;
    this.roundedCornerTargets[g]["heightOfContent"] = a;
    this.roundedCornerTargets[g]["whichCorners"] = c
}, init: function () {
    for (var v = 0; v < this.roundedCornerTargets.length; v++) {
        whichCorners = this.roundedCornerTargets[v]["whichCorners"];
        divId = this.roundedCornerTargets[v]["divId"];
        xRadius = this.roundedCornerTargets[v]["xRadius"];
        yRadius = this.roundedCornerTargets[v]["yRadius"];
        color = this.roundedCornerTargets[v]["color"];
        backgroundColor = this.roundedCornerTargets[v]["backgroundColor"];
        padding = this.roundedCornerTargets[v]["padding"];
        heightOfContent = this.roundedCornerTargets[v]["heightOfContent"];
        whichCorners = this.roundedCornerTargets[v]["whichCorners"];
        var B = new Array();
        if (!whichCorners || whichCorners == "all") {
            B.top_left = true;
            B.top_right = true;
            B.bottom_left = true;
            B.bottom_right = true
        } else {
            B = whichCorners.split(/,/gi);
            for (var g in B) {
                B[B[g]] = true
            }
        }
        var C = xRadius / yRadius;
        var n = document.getElementById(divId);
        n.style.backgroundColor = null;
        n.style.backgroundColor = "transparent";
        var t = n.innerHTML;
        n.innerHTML = "";
        if (B.top_left || B.top_right) {
            var x = document.createElement("DIV");
            x.style.height = yRadius + "px";
            x.style.overflow = "hidden";
            n.appendChild(x);
            var j = 0;
            var p = 0;
            for (no = 1; no <= yRadius; no++) {
                var f = (xRadius - (this.getY((yRadius - no), yRadius, C)));
                var A = (xRadius - (this.getY_withDecimals((yRadius - no), yRadius, C)));
                var m = xRadius - A;
                var r = xRadius - f - Math.floor(p);
                var h = xRadius - (f + r);
                var c = document.createElement("DIV");
                c.style.overflow = "hidden";
                c.style.height = "1px";
                if (B.top_left) {
                    c.style.marginLeft = f + "px"
                }
                if (B.top_right) {
                    c.style.marginRight = f + "px"
                }
                x.appendChild(c);
                var l = x;
                for (var o = 1; o <= r; o++) {
                    switch (o) {
                        case 1:
                            if (o == r) {
                                blendMode = ((m + p) / 2) - h
                            } else {
                                var b = this.getY_withDecimals((xRadius - f - o), xRadius, 1 / C);
                                blendMode = (m - h - r + 1) * (b - (yRadius - no)) / 2
                            }
                            break;
                        case r:
                            var b = this.getY_withDecimals((xRadius - f - o + 1), xRadius, 1 / C);
                            blendMode = 1 - (1 - (b - (yRadius - no))) * (1 - (p - h)) / 2;
                            break;
                        default:
                            var k = this.getY_withDecimals((xRadius - f - o), xRadius, 1 / C);
                            var b = this.getY_withDecimals((xRadius - f - o + 1), xRadius, 1 / C);
                            blendMode = ((b + k) / 2) - (yRadius - no)
                    }
                    c.style.backgroundColor = this.__blendColors(backgroundColor, color, blendMode);
                    l.appendChild(c);
                    l = c;
                    var c = document.createElement("DIV");
                    c.style.height = "1px";
                    c.style.overflow = "hidden";
                    if (B.top_left) {
                        c.style.marginLeft = "1px"
                    }
                    if (B.top_right) {
                        c.style.marginRight = "1px"
                    }
                    c.style.backgroundColor = color
                }
                l.appendChild(c);
                p = m
            }
        }
        var q = document.createElement("DIV");
        q.className = n.className;
        q.style.border = "1px solid " + color;
        q.innerHTML = t;
        q.style.backgroundColor = color;
        q.style.paddingLeft = padding + "px";
        q.style.paddingRight = padding + "px";
        if (!heightOfContent) {
            heightOfContent = ""
        }
        heightOfContent = heightOfContent + "";
        if (heightOfContent.length > 0 && heightOfContent.indexOf("%") == -1) {
            heightOfContent = heightOfContent + "px"
        }
        if (heightOfContent.length > 0) {
            q.style.height = heightOfContent
        }
        n.appendChild(q);
        if (B.bottom_left || B.bottom_right) {
            var s = document.createElement("DIV");
            s.style.height = yRadius + "px";
            s.style.overflow = "hidden";
            n.appendChild(s);
            var j = 0;
            var p = 0;
            var D = false;
            var u = new Array();
            for (no = 1; no <= yRadius; no++) {
                var f = (xRadius - (this.getY((yRadius - no), yRadius, C)));
                var A = (xRadius - (this.getY_withDecimals((yRadius - no), yRadius, C)));
                var m = (xRadius - A);
                var r = xRadius - f - Math.floor(p);
                var h = xRadius - (f + r);
                var c = document.createElement("DIV");
                c.style.overflow = "hidden";
                c.style.height = "1px";
                if (B.bottom_left) {
                    c.style.marginLeft = f + "px"
                }
                if (B.bottom_right) {
                    c.style.marginRight = f + "px"
                }
                s.insertBefore(c, s.firstChild);
                var l = s;
                for (var o = 1; o <= r; o++) {
                    switch (o) {
                        case 1:
                            if (o == r) {
                                blendMode = ((m + p) / 2) - h
                            } else {
                                var b = this.getY_withDecimals((xRadius - f - o), xRadius, 1 / C);
                                blendMode = (m - h - r + 1) * (b - (yRadius - no)) / 2
                            }
                            break;
                        case r:
                            var b = this.getY_withDecimals((xRadius - f - o + 1), xRadius, 1 / C);
                            blendMode = 1 - (1 - (b - (yRadius - no))) * (1 - (p - h)) / 2;
                            break;
                        default:
                            var k = this.getY_withDecimals((xRadius - f - o), xRadius, 1 / C);
                            var b = this.getY_withDecimals((xRadius - f - o + 1), xRadius, 1 / C);
                            blendMode = ((b + k) / 2) - (yRadius - no)
                    }
                    c.style.backgroundColor = this.__blendColors(backgroundColor, color, blendMode);
                    if (l == s) {
                        u[u.length] = c
                    }
                    try {
                        var a = l.getElementsByTagName("DIV")[0];
                        l.insertBefore(c, l.firstChild)
                    } catch (z) {
                        l.appendChild(c);
                        D = true
                    }
                    l = c;
                    var c = document.createElement("DIV");
                    c.style.height = "1px";
                    c.style.overflow = "hidden";
                    if (B.bottom_left) {
                        c.style.marginLeft = "1px"
                    }
                    if (B.bottom_right) {
                        c.style.marginRight = "1px"
                    }
                }
                if (D) {
                    for (var w = u.length - 1; w >= 0; w--) {
                        s.appendChild(u[w])
                    }
                }
                c.style.backgroundColor = color;
                l.appendChild(c);
                p = m
            }
        }
    }
}, getY: function (a, c, b) {
    return Math.max(0, Math.ceil(b * Math.sqrt((c * c) - (a * a))))
}, getY_withDecimals: function (a, c, b) {
    return Math.max(0, b * Math.sqrt((c * c) - (a * a)))
}, __blendColors: function (h, f, c) {
    if (h.length == "4") {
        h = "#" + h.substring(1, 1) + h.substring(1, 1) + h.substring(2, 1) + h.substring(2, 1) + h.substring(3, 1) + h.substring(3, 1)
    }
    if (f.length == "4") {
        f = "#" + f.substring(1, 1) + f.substring(1, 1) + f.substring(2, 1) + f.substring(2, 1) + f.substring(3, 1) + f.substring(3, 1)
    }
    var b = [parseInt("0x" + h.substring(1, 3)), parseInt("0x" + h.substring(3, 5)), parseInt("0x" + h.substring(5, 7))];
    var k = [parseInt("0x" + f.substring(1, 3)), parseInt("0x" + f.substring(3, 5)), parseInt("0x" + f.substring(5, 7))];
    var j = Math.round(b[0] + (k[0] - b[0]) * c).toString(16);
    var g = Math.round(b[1] + (k[1] - b[1]) * c).toString(16);
    var a = Math.round(b[2] + (k[2] - b[2]) * c).toString(16);
    if (j.length == 1) {
        j = "0" + j
    }
    if (g.length == 1) {
        g = "0" + g
    }
    if (a.length == 1) {
        a = "0" + a
    }
    return"#" + j + g + a
}};
var SwordTree = new Class({$family: {name: "SwordTree"}, container: $empty, builder: $empty, Implements: [Events, Options], options: {pNode: null, treeContainerName: "", tid: "", ctrl: "", cacheLazy: "", ltid: "", lctrl: "", qtid: "", qctrl: "", qlength: 0, isInitLoadData: "true", dataStr: "", postData: null, title: null, pageDataLazy: null, treeType: "0", select: "false", height: "", width: "", rootNode: null, lazyLayer: 0, lazyLoadLayer: 1, lazyTime: 0, startLayer: 1, extendLayer: 2, cascadeSign: {id: "code", pid: "pcode"}, dataType: "jsonAptitude", stylePath: "", filterSign: "code", displayTag: "caption", isHighlight: "true", autoShrink: "false", inputWidth: null, selectRealKey: "code", sbmitcontent: "{code}", popdisplay: null, selReadOnly: "false", disable: "false", lazySelect: "true", initDataFlag: "false", rule: "", validate: null, isDrag: "false", isDragChildrenNode: "true", isDragCut: "true", isShow: "true", existRules: "", selectrule: "all", dragContainer: "", snap: 3, openTimer: 6, noDragRule: null, isCascadeCheckedClick: "true", autoExtendCaption: "false", onLoadDataFinish: $empty, onAfterLoadData: $empty, onCreateNode: $empty, onDragBefore: $empty, onAfterCreateChildNodes: $empty, onLazyNodesAppend: $empty, onNodeClick: $empty, onNodeClickBefore: $empty, onRightClick: $empty, onDblNodeClick: $empty, onIconClick: $empty, onIconDblClick: $empty, onCheckedBefore: $empty, onCheckedAfter: $empty, onExpand: $empty, onDragComplete: $empty, onDragSuccess: $empty, onDragMove: $empty, onSelectChange: $empty, onClickBefore: $empty, onSelectShow: $empty, onSelectBtnOk: $empty, onSelectBtnCancel: $empty, onSelectHide: $empty, onNodeContextMenu: $empty, onFinish: $empty, onLtidBefore: $empty, onQtidBefore: $empty, onAfterExtendByIdPath: $empty, rootPcode: undefined, isHideBtn: "false"}, initialize: function () {
    if (arguments.length == 2) {
        var a = Array.link(arguments, {options: Object.type, element: $defined});
        this.container = $(a.element);
        this.setOptions(a.options);
        if ($type(this.options.cascadeSign) == "string") {
            this.options.cascadeSign = JSON.decode(this.options.cascadeSign)
        }
        this.options.treeContainerName = this.container.get("name")
    }
}, item: null, initParam: function (a, b) {
    this.item = a;
    this.htmlOptions(a);
    if (a.get("selReadOnly") == "true") {
        a.set("disabled", true)
    }
    this.options.treeContainerName = a.get("name");
    if ($chk(this.options.nodeEvents) && $type(this.options.nodeEvents) == "string") {
        this.options.nodeEvents = JSON.decode(this.options.nodeEvents)
    }
    if ($type(this.options.cascadeSign) == "string") {
        this.options.cascadeSign = JSON.decode(this.options.cascadeSign)
    }
    if (a.get("cascadeSign") && !a.get("selectRealKey")) {
        this.options.selectRealKey = this.options.cascadeSign.id
    }
    this.container = this.options.pNode;
    if (($chk(this.options.tid) || $chk(this.options.ctrl)) || ((!$chk(this.options.tid) && !$chk(this.options.ctrl)) && $chk(this.options.dataStr))) {
        this.build({}, b);
        if (this.select) {
            sword_convertHTML(this.select.selBox, a);
            if (a.get("disable") == "false") {
                this.select.selBox.erase("disabled")
            }
        }
    }
}, initData: function (b, a) {
    if (this.inGrid == true && this.initDataFlag == true) {
        return
    }
    if (!$chk(this.options.tid) && !$chk(this.options.ctrl)) {
        if (JSON.encode(b)) {
            this.options.dataStr = b
        } else {
            this.options.dataStr = pc.getInitData(b.get("name"))
        }
        this.build({}, a);
        this.initDataFlag = true
    }
}, build: function (b, c) {
    $extend(this.options, b);
    if (this.options.isInitLoadData == "true") {
        this.container.set("name", this.options.treeContainerName);
        if (this.options.select == "true") {
            if (!this.select) {
                var a = new SwordTree.Select(this.options, this, c);
                this.select = a;
                this.select.build(this.container)
            } else {
                this.select.isBuild = false;
                this.select.buildTree(this.container)
            }
            Sword.utils.setWidth(this.options.inputWidth, ((c) ? c.userSize : null), this.select.divTable, this.select.selBox, true)
        } else {
            this.builder = new SwordTree.Builder(this.container, this.options, this.$events);
            this.builder.build()
        }
    }
    this.fireEvent("onFinish")
}, getSelectedNode: function () {
    if (!this.builder.draw) {
        return null
    }
    return this.builder.draw.getSelectedNode()
}, unSelectNode: function () {
    this.builder.draw.unSelectNode()
}, getAllChecked: function (f, b, a, c) {
    return this.builder.draw.getAllChecked(f, b, a, c)
}, getAllNode: function (f, b, a, c) {
    return this.builder.draw.getAllNode(f, b, a, c)
}, isLeaf: function (a) {
    return a.get("leaftype") == 1
}, getAllCheckedList: function (a, b) {
    if (this.builder && this.builder.draw) {
        return this.builder.draw.getAllCheckedList(a)
    }
}, setCheckedList: function (a) {
    this.builder.draw.setCheckedList(a)
}, setHalfOrCheckedList: function (b, a) {
    this.builder.draw.setHalfOrCheckedList(b, a)
}, addTreeNode: function (a) {
    this.builder.draw.addTreeNode(a)
}, updateTreeNode: function (b, a) {
    return this.builder.draw.updateTreeNode(b, a)
}, deleteTreeNode: function (a) {
    this.builder.draw.deleteTreeNode(a)
}, findTreeNode: function (a) {
    return this.builder.draw.findTreeNode(a)
}, filterTreeNodes: function (a) {
    this.builder.draw.filterTreeNodes(a)
}, removeTreeFilterHiddenClass: function () {
    if (this.builder.draw) {
        this.builder.draw.removeTreeFilterHiddenClass()
    }
}, findNodeByPath: function (a) {
    return this.builder.draw.findNodeByPath(a)
}, isContain: function (b) {
    var c = this.getTreeNode(b);
    var a = false;
    if ($defined(c)) {
        a = true
    }
    return a
}, getTreeNode: function (a) {
    if (this.builder && this.builder.draw) {
        return this.builder.draw.getTreeNode(a)
    }
}, getTreeNodes: function (a) {
    if (this.builder && this.builder.draw) {
        return this.builder.draw.getTreeNodes(a)
    }
}, getLikeTreeNode: function (a) {
    if (this.builder && this.builder.draw) {
        return this.builder.draw.getLikeTreeNode(a)
    }
}, getLikeTreeNodeNew: function (a) {
    if (this.builder && this.builder.draw) {
        return this.builder.draw.getLikeTreeNodeNew(a)
    }
}, getParent: function (b) {
    var a;
    if (b) {
        a = b.getParent("div[leaftype='-1']").getParent("div[leaftype!='-1']")
    }
    return a
}, hasChildren: function (a) {
    return this.builder.draw.hasChildren(a)
}, close: function () {
    this.builder.draw.close()
}, setValidate: function (a) {
    this.validate = a
}, getCheckedRadio: function () {
    return this.builder.draw.getCheckedRadio()
}, getRootNode: function () {
    return this.builder.draw.getRootNode()
}, setSelectedNode: function (a) {
    this.select.setSelectedNode(a)
}, setSelectValue: function (a) {
    if (this.select) {
        this.select.setValue(a)
    }
}, setSelectRealValue: function (a) {
    this.select.setRealValue(a)
}, setDisplayTagWithBuild: function (a) {
    this.builder.options.displayTag = a
}, getValue: function (a) {
    return this.select.getValue(a)
}, getCaption: function (a) {
    return this.select.getCaption(a)
}, reset: function () {
    return this.select.setValue("")
}, clearCheckedStatus: function () {
    if (this.builder.draw) {
        this.builder.draw.clearCheckedStatus()
    }
}, reloadSelectData: function (a) {
    this.options.dataStr = a;
    this.select.isBuild = false;
    this.select.selBox.set("value", "");
    this.select.selBox.set("realvalue", "")
}, reloadTree: function (a) {
    this.options.dataStr = a;
    this.build()
}, setNodeChecked: function (a) {
    this.builder.draw.setNodeChecked(a)
}, getNodeCheckedStatus: function (a) {
    return this.builder.draw.getNodeCheckedStatus(a)
}, addTreeData: function (a) {
    this.builder.draw.dom.domainData = a
}, extendNodeByIdPath: function (a) {
    return this.builder.draw.extendNodeByIdPath(a)
}});
SwordTree.Builder = new Class({$family: {name: "SwordTree.Builder"}, Implements: [Options, Events], container: $empty, draw: null, initialize: function (a, b, c) {
    this.container = a;
    this.setOptions(b);
    this.$events = $merge(this.$events, c)
}, build: function (a) {
    var f = this.domFactory({treeContainerName: this.options.treeContainerName, tid: this.options.tid, ctrl: this.options.ctrl, dataStr: this.options.dataStr, type: this.options.dataType, postData: this.options.postData}, this.$events);
    var c = this.iterator(f, this.options.dataType, this.options.cascadeSign);
    if ($defined(c)) {
        this.draw = this.drawFactory(this.options, a);
        this.draw.$events = $merge(this.draw.$events, this.$events);
        this.draw.build(this.container, c);
        if (this.options.isDrag == "true") {
            var b = this.dragFactory(this.draw, this.options);
            b.$events = $merge(b.$events, this.$events);
            b.startDrag()
        }
    }
}, domFactory: function (b, a) {
    var c = SwordTree.DomFactory.newInstance(b, a);
    return c
}, iterator: function (f, a, c) {
    var b = SwordTree.Iterator.newInstance(f, a, c);
    return b
}, drawFactory: function (c, b) {
    var a = new SwordTree.Draw(c, b);
    return a
}, dragFactory: function (c, a) {
    var b = new SwordTree.Drag(c, a);
    return b
}});
SwordTree.DomFactory = new Class({$family: {name: "SwordTree.DomFactory"}, props: null, events: null, initialize: function (b, a) {
    this.props = b;
    this.events = a
}, createDom: $empty});
SwordTree.DomFactory.newInstance = function (c, b) {
    var a = null;
    if ($defined(c.type) && ("json".test(c.type.trim(), "i") || "jsonAptitude".test(c.type.trim(), "i"))) {
        a = new SwordTree.JSONDomFactory(c, b)
    } else {
        a = new SwordTree.XMLDomFactory(c, b)
    }
    return a.createDom()
};
SwordTree.XMLDomFactory = new Class({Extends: SwordTree.DomFactory, createDom: function () {
    var b = null;
    if (Browser.Engine.trident) {
        b = new ActiveXObject("Msxml2.domdocument")
    }
    if ($defined(this.props)) {
        if ($chk(this.props.tid)) {
            if (!Browser.Engine.trident) {
                b = document.implementation.createDocument("", "", null)
            }
            b.async = false;
            if ($chk(document.getElementsByTagName("script")[0]["pageRealPath"])) {
                this.props.tid = document.getElementsByTagName("script")[0]["pageRealPath"] + "\\" + this.props.tid
            }
            b.load(this.props.tid)
        } else {
            if ($chk(this.props.dataStr)) {
                if (!Browser.Engine.trident) {
                    var a = new DOMParser();
                    b.async = false;
                    b = a.parseFromString(this.props.dataStr, "text/xml")
                } else {
                    b.async = false;
                    b.loadXML(this.props.dataStr)
                }
            }
        }
    } else {
        if (!Browser.Engine.trident) {
            b = document.implementation.createDocument("", "", null)
        }
        b.async = false
    }
    return b.documentElement
}});
SwordTree.JSONDomFactory = new Class({Extends: SwordTree.DomFactory, createDom: function () {
    var g;
    if ($defined(this.props)) {
        if ($chk(this.props.tid) || $chk(this.props.ctrl)) {
            var f = new Hash();
            f.set("sword", "SwordTree");
            f.set("name", this.props.treeContainerName);
            var b = this.props.postData;
            if ($type(b) == "string") {
                this.props.postData = b = JSON.decode(b)
            }
            $defined(b) ? f.set("data", [b]) : f.set("data", []);
            var a = new Hash();
            a.set("sword", "attr");
            a.set("name", "treeName");
            a.set("value", this.props.treeContainerName);
            var c = pageContainer.getReq({tid: this.props.tid, ctrl: this.props.ctrl, widgets: [f, a]});
            pageContainer.postReq({req: c, async: false, onSuccess: function (h) {
                var j = pageContainer.getResData(this.props.treeContainerName, h);
                g = j;
                if (this.events.loadDataFinish && this.events.loadDataFinish[0]) {
                    this.events.loadDataFinish[0].run(h)
                }
            }.bind(this), onError: function (h) {
                g = new Hash()
            }.bind(this)})
        } else {
            if ($chk(this.props.dataStr) && $type(this.props.dataStr) == "string") {
                g = new Hash(JSON.decode(this.props.dataStr))
            } else {
                if ($chk(this.props.dataStr) && $type(this.props.dataStr) == "object") {
                    g = this.props.dataStr
                }
            }
        }
    } else {
        g = new Hash()
    }
    return g
}});
SwordTree.Drag = new Class({$family: {name: "SwordTree.Drag"}, Implements: [Events, Options], Extends: Drag, startTarget: null, dragContainer: [], tpDragNode: true, options: {startPlace: ["displaySpan"], dragStyle: {treeGhost: "tree-ghost", treeDragCurrent: "tree-drag-current", treeGhostIcon: "tree-ghost-icon", treeGhostNotAllowed: "tree-ghost-notAllowed", treeGhostInside: "tree-ghost-inside"}}, selection: (Browser.Engine.trident) ? "selectstart" : "mousedown", initialize: function (c, a) {
    c.drag = this;
    this.setOptions(a);
    $extend(this, {swordTreeDraw: c, snap: this.options.snap});
    if ($chk(this.options.dragContainer)) {
        var b = this.options.dragContainer.split(",");
        this.dragContainer.combine(b)
    }
    this.current = SwordTree.Drag.current;
    this.document = c.container.getDocument();
    this.bound = {start: this.start.bind(this), check: this.check.bind(this), drag: this.drag.bind(this), stop: this.stop.bind(this), cancel: this.cancel.bind(this), eventStop: $lambda(false), keydown: this.keydown.bind(this)}
}, rDestory: function (a) {
    Element.empty(a);
    Element.dispose(a)
}, startDrag: function () {
    this.attach();
    this.addEvent("start", function (c) {
        if (SwordTree.Drag.current) {
            document.addEvent("keydown", this.bound.keydown);
            var b = this.swordTreeDraw.getSpan(SwordTree.Drag.current, "displaySpan").addClass(this.options.dragStyle.treeDragCurrent);
            var j = true;
            this.fireEvent("onDragBefore", [this, b.getParent("div.tree-node")]);
            if ($chk(this.options.noDragRule)) {
                var h = JSON.decode("[" + this.options.noDragRule + "]");
                var f = this.swordTreeDraw.getNode(b);
                for (var a = 0; a < h.length; a++) {
                    var g = h[a];
                    if (f.get(g.key) == g.value) {
                        j = false;
                        break
                    }
                }
            }
            if (j) {
                this.addGhost(c)
            } else {
                this.tpDragNode = false;
                c.stopPropagation()
            }
        }
    }, true);
    this.addEvent("complete", function () {
        if (SwordTree.Drag.current && this.tpDragNode) {
            document.removeEvent("keydown", this.bound.keydown);
            if ($defined(this.swordTreeDraw.getSpan(SwordTree.Drag.current, "displaySpan"))) {
                this.swordTreeDraw.getSpan(SwordTree.Drag.current, "displaySpan").removeClass(this.options.dragStyle.treeDragCurrent)
            }
            var a = SwordTree.Drag.startZone;
            if (a) {
                if (SwordTree.Drag.ghost) {
                    this.rDestory(SwordTree.Drag.ghost);
                    a.beforeDrop()
                }
                if ($defined(SwordTree.Container.mouseNode)) {
                    this.fireEvent("onDragComplete", this.swordTreeDraw.getNode(SwordTree.Container.mouseNode))
                }
            }
        }
    })
}, getElement: function () {
    return this.swordTreeDraw.container
}, attach: function () {
    var a = this.swordTreeDraw.container.getFirst("div");
    if ($defined(a)) {
        this.swordTreeDraw.container.getFirst("div").addEvent("mousedown", this.bound.start)
    }
    return this
}, detach: function () {
    var a = this.swordTreeDraw.container.getFirst("div");
    if ($defined(a)) {
        this.swordTreeDraw.container.getFirst("div").removeEvent("mousedown", this.bound.start)
    }
    return this
}, keydown: function (b) {
    if (b.key == "esc") {
        var a = SwordTree.Drag.startZone;
        if (a) {
            a.where = "notAllowed"
        }
        this.stop(b)
    }
}, start: function (a) {
    if ($defined(SwordTree.Drag.ghost)) {
        this.rDestory(SwordTree.Drag.ghost)
    }
    var b = a.target;
    if (b.tagName.test("span", "i")) {
        if (b.get("type") != "gadGetSpan" && b.get("type") != "iconSpan" && b.get("type") != "checkSpan") {
            this.swordTreeDraw.selectNode(b)
        }
        if (b.get("type") == "iconSpan") {
            b = b.getNext("span[type='displaySpan']")
        }
    }
    if (!b) {
        return
    }
    this.mouse = {start: a.page};
    this.document.addEvents({mousemove: this.bound.check, mouseup: this.bound.cancel});
    this.document.addEvent(this.selection, this.bound.eventStop)
}, check: function (a) {
    if (this.options.preventDefault) {
        a.preventDefault()
    }
    var c = Math.round(Math.sqrt(Math.pow(a.page.x - this.mouse.start.x, 2) + Math.pow(a.page.y - this.mouse.start.y, 2)));
    if (c > this.options.snap) {
        this.cancel();
        this.document.addEvents({mousemove: this.bound.drag, mouseup: this.bound.stop});
        var b = a.target;
        if (b.tagName != "SPAN" && !$defined(b.type)) {
            return
        }
        this.current = $splat(this.options.startPlace).contains(b.get("type")) ? this.swordTreeDraw.getSelectedNode() : false;
        this.startTarget = b;
        SwordTree.Drag.current = this.current;
        SwordTree.Drag.startZone = this;
        this.fireEvent("start", a).fireEvent("snap", this.element)
    }
}, drag: function (a) {
    if ($defined(SwordTree.Drag.ghost)) {
        SwordTree.Drag.ghost.position({x: a.page.x + 10, y: a.page.y + 10});
        var b = SwordTree.Drag.startZone;
        if (!b || !b.ondrag) {
            return
        }
        SwordTree.Drag.startZone.ondrag(a)
    }
}, ondrag: function (b) {
    var c = SwordTree.Container.mouseNode;
    if (!$defined(c)) {
        if ($defined(b) && b.target.tagName == "DIV" && (b.target.get("leaftype") == "root" || b.target.get("sword") == "SwordTree")) {
            if (b.target.get("leaftype") == "root") {
                c = b.target
            } else {
                if (b.target.get("sword") == "SwordTree") {
                    c = b.target.getFirst("div[leaftype='root']")
                }
            }
            SwordTree.Container.mouseNode = c
        } else {
            this.changeGhostState(1);
            return
        }
    }
    var f = true;
    if (this.dragContainer.length > 0) {
        if (!this.dragContainer.contains(SwordTree.Container.id)) {
            f = false
        }
    }
    if (f && $defined(c)) {
        if (c.tagName.test("span", "i") && $defined(this.swordTreeDraw.targetNode)) {
            if (c.get("type") == "displaySpan" && c != this.swordTreeDraw.targetNode) {
                if (this.swordTreeDraw.isParent(this.swordTreeDraw.getNode(c), this.swordTreeDraw.getNode(this.startTarget))) {
                    this.changeGhostState(1)
                } else {
                    this.changeGhostState(0)
                }
            } else {
                if (c.get("type") == "iconSpan" || c.get("type") == "gadGetSpan") {
                    if (c.get("type") == "iconSpan" && c != this.swordTreeDraw.targetNode.getPrevious()) {
                        if (this.swordTreeDraw.isParent(this.swordTreeDraw.getNode(c), this.swordTreeDraw.getNode(this.startTarget))) {
                            this.changeGhostState(1)
                        } else {
                            this.changeGhostState(0)
                        }
                    }
                    if (this.tempTarget != c) {
                        this.tempTarget = c;
                        if (c.hasClass(this.swordTreeDraw.options.treeStyle.treeLeafIcon) || c.hasClass(this.swordTreeDraw.options.treeStyle.treeGadGetPlus)) {
                            var a = SwordTree.Container.containerDraw.get(SwordTree.Container.id);
                            if ($defined(a)) {
                                a.extend.delay(this.options.openTimer, a, this.swordTreeDraw.getNode(c))
                            }
                        }
                    }
                } else {
                    this.changeGhostState(1)
                }
            }
        } else {
            if (c.get("leaftype") == "root") {
                if (c.getFirst("div").getChildren("div").length == 0) {
                    this.changeGhostState(0)
                } else {
                    this.changeGhostState(1)
                }
            } else {
                this.changeGhostState(1)
            }
        }
    }
    this.fireEvent("drag");
    this.fireEvent("onDragMove", [this, c])
}, changeGhostState: function (a) {
    if (a == 0) {
        SwordTree.Drag.ghost.removeClass(this.options.dragStyle.treeGhostNotAllowed);
        SwordTree.Drag.ghost.addClass(this.options.dragStyle.treeGhostInside)
    } else {
        SwordTree.Drag.ghost.removeClass(this.options.dragStyle.treeGhostInside);
        SwordTree.Drag.ghost.addClass(this.options.dragStyle.treeGhostNotAllowed)
    }
}, addGhost: function (a) {
    var m = new Element("span").addClass(this.options.dragStyle.treeGhost);
    var k = this.swordTreeDraw.getSpan(this.current);
    var h = k.displaySpan;
    var g = k.iconSpan;
    var f = new Hash();
    f.set(this.swordTreeDraw.options.displayTag, this.current.get(this.swordTreeDraw.options.displayTag));
    var c = new SwordTree.JSONIterator(f);
    var b = this.swordTreeDraw.createNode(new Element("div"), c, -1);
    var l = new Element("span").set("html", this.swordTreeDraw.space);
    var j = l.clone(true, true);
    m.grab(l);
    m.grab(b.getElements("span[type='wrapperSpan']")[0]);
    m.getElements("span[type='gadGetSpan']")[0].set("class", "");
    m.getElements("span[type='gadGetSpan']")[0].innerHTML = "";
    m.getFirst("span[type='wrapperSpan']").grab(j, "top");
    m.getFirst("span[type='wrapperSpan']").getFirst("span[type='iconSpan']").className = g.className;
    m.position({x: a.page.x + 10, y: a.page.y + 10});
    m.inject(document.body).addClass(this.options.dragStyle.treeGhostNotAllowed).setStyle("position", "absolute");
    SwordTree.Drag.ghost = m
}, beforeDrop: function () {
    var l = true;
    if ($defined(SwordTree.Container.mouseNode) && $chk(this.options.existRules) && SwordTree.Drag.ghost.hasClass(this.options.dragStyle.treeGhostInside) && SwordTree.Container.mouseNode.get("leaftype") != "root") {
        var j = this.swordTreeDraw.getRoot(SwordTree.Container.mouseNode);
        var m = SwordTree.Container.containerDraw.get(SwordTree.Container.id);
        if ($defined(m) && this.swordTreeDraw.containerID != SwordTree.Container.containerDraw.getValues()[0].containerID && $chk(m.options.existRules)) {
            var n = this.swordTreeDraw.options.existRules.split(",") || [];
            var f = m.options.existRules.split(",") || [];
            var h = new Hash();
            var b = this.swordTreeDraw.getNode(this.startTarget);
            var a = [b];
            a.extend(b.getElements("div[leaftype!='-1']"));
            for (var g = 0; g < a.length; g++) {
                for (var c = 0; c < f.length; c++) {
                    if ($defined(n[c])) {
                        h.set(f[c], a[g].get(n[c]))
                    }
                }
                if ($defined(this.swordTreeDraw.getChildNode(j, h))) {
                    alert("节点:[" + a[g].get(this.swordTreeDraw.options.displayTag) + "]已经存在!");
                    return
                }
            }
        }
    }
    if (l) {
        this.drop()
    }
}, drop: function () {
    if (SwordTree.Drag.ghost.hasClass(this.options.dragStyle.treeGhostInside)) {
        this.swordTreeDraw.unSelectNode();
        var a = this.dragTreeNode(this.startTarget, SwordTree.Container.mouseNode);
        this.fireEvent("onDragSuccess", [a, this.startTarget, SwordTree.Container.mouseNode])
    }
}, dragTreeCloneEvents: function (b, c) {
    if (b.getFirst()) {
        var a = b.getFirst().getChildren();
        c.getFirst().getChildren().each(function (j, f) {
            var g = j.retrieve("events");
            if (g) {
                for (var h in g) {
                    a[f].cloneEvents(j, h)
                }
            }
        })
    }
}, dragTreeNode: function (f, c) {
    var j = this.swordTreeDraw.getNode(f);
    if ($defined(j) && j.tagName == "SPAN") {
        return
    }
    var b = this.options.isDragCut;
    var l = SwordTree.Container.containerDraw.get(SwordTree.Container.id);
    if (this.options.isDragCut == "undefined") {
        if (window.confirm("是否剪切拖拽节点？")) {
            b = "true"
        }
    }
    var n = j.clone(this.options.isDragChildrenNode != "false", true);
    if (n.getChildren().length == 0) {
        var k = j.getElement("span").clone();
        k.getChildren().each(function (p, o) {
            if (p.hasClass("tree-gadjet-plus")) {
                p.removeClass("tree-gadjet-plus").addClass("tree-gadjet-none")
            }
            if (p.hasClass("tree-gadjet-minus")) {
                p.removeClass("tree-gadjet-minus").addClass("tree-gadjet-none")
            }
            if (p.hasClass("tree-leaf-icon")) {
                p.removeClass("tree-leaf-icon").addClass("tree-close-icon")
            }
            if (p.hasClass("tree-open-icon")) {
                p.removeClass("tree-open-icon").addClass("tree-close-icon")
            }
        });
        k.inject(n)
    }
    n.addClass(this.swordTreeDraw.options.treeStyle.treeNodeLast);
    var h = this.swordTreeDraw.getNode(c);
    this.dragTreeCloneEvents(n, h);
    n.store("data", j.retrieve("data"));
    if (h.get("leaftype") == "root") {
        this.changeDepth(n, 0);
        h.getFirst("div[leaftype='-1']").grab(n);
        if ($defined(n.get(this.options.cascadeSign.pid))) {
            n.setProperty(this.options.cascadeSign.pid, "")
        }
    } else {
        this.changeDepth(n, h);
        var g = this.swordTreeDraw.beforeAddTreeNode(h);
        var a = g.childrenElement;
        if ($defined(n.get(this.options.cascadeSign.id))) {
            n.setProperty(this.options.cascadeSign.pid, h.get(this.options.cascadeSign.id))
        }
        var m = l.getSpan(h, "gadGetSpan");
        if ($defined(l) && m.hasClass(l.options.treeStyle.treeGadGetPlus)) {
            l.extend.delay(this.options.openTimer, l, h)
        }
        a.grab(n)
    }
    if (b == "true") {
        this.swordTreeDraw.deleteTreeNode(j)
    }
    return n
}, changeDepth: function (g, f) {
    var a = g.getElements("div[leaftype!='-1']").include(g);
    var b = 0;
    if (f) {
        b = f.get("depth").toInt()
    }
    g.setProperty(this.options.cascadeSign.pid, f.get(this.options.cascadeSign.id));
    var c = g.get("depth").toInt();
    var h = c - (b + 1);
    a.each(function (j) {
        j.setProperty("depth", j.get("depth") - h)
    })
}, setIsDragChildrenNode: function (a) {
    this.options.isDragChildrenNode = a + ""
}, setNodeDragLayers: function (c, a, g) {
    var f = c.getElement("div.tree-children");
    if (f && a > 0) {
        if (a == 1) {
            c.getElement("span").getChildren().each(function (k, j) {
                if (k.hasClass("tree-gadjet-plus")) {
                    k.removeClass("tree-gadjet-plus").addClass("tree-gadjet-none")
                }
                if (k.hasClass("tree-gadjet-minus")) {
                    k.removeClass("tree-gadjet-minus").addClass("tree-gadjet-none")
                }
                if (k.hasClass("tree-leaf-icon")) {
                    k.removeClass("tree-leaf-icon").addClass("tree-close-icon")
                }
                if (k.hasClass("tree-open-icon")) {
                    k.removeClass("tree-open-icon").addClass("tree-close-icon")
                }
            });
            f.destroy()
        } else {
            if (g < a - 1) {
                var h = f.getChildren("div");
                for (var b = h.length - 1; b > 0; b--) {
                    g = f.getFirst("div.tree-node").get("depth") / 1;
                    this.setNodeDragLayers(h[b], a, g)
                }
            } else {
                f.getChildren("div.tree-node").each(function (k, j) {
                    k.getElement("span").getChildren().each(function (m, l) {
                        if (m.hasClass("tree-gadjet-plus")) {
                            m.removeClass("tree-gadjet-plus").addClass("tree-gadjet-none")
                        }
                        if (m.hasClass("tree-gadjet-minus")) {
                            m.removeClass("tree-gadjet-minus").addClass("tree-gadjet-none")
                        }
                        if (m.hasClass("tree-leaf-icon")) {
                            m.removeClass("tree-leaf-icon").addClass("tree-close-icon")
                        }
                        if (m.hasClass("tree-open-icon")) {
                            m.removeClass("tree-open-icon").addClass("tree-close-icon")
                        }
                    });
                    if (k.getElement("div")) {
                        k.getElement("div").destroy()
                    }
                })
            }
        }
    }
}});
SwordTree.Draw = new Class({$family: {name: "SwordTree.Draw"}, Implements: [Options, Events], space: Browser.Engine.trident ? "&shy;" : (Browser.Engine.webkit ? "&#8203" : ""), container: null, containerID: null, targetNode: null, current: null, dom4nodeHash: new Hash(), depth: -1, isInitLazy: false, rootContainer: null, options: {checkSign: "ischecked", noCheckSign: "nochecked", isLoadSign: "isLoadSign", treeStyle: {treeContainerX: "tree-container-x", treeContainerY: "tree-container-y", treeWrapper: "tree-wrapper", treeTitle: "tree-title", treeNode: "tree-node", treeNodeLast: "tree-node-last", treeChildren: "tree-children", treeNodeLast: "tree-node-last", treeNodeWrapper: "tree-node-wrapper", treeNodeSelected: "tree-node-selected", treeGadGet: "tree-gadjet", treeGadGetMinus: "tree-gadjet-minus", treeGadGetNone: "tree-gadjet-none", treeGadGetPlus: "tree-gadjet-plus", treeGadjetLoad: "tree-gadjet-load", treeIcon: "tree-icon", treeLeafIcon: "tree-leaf-icon", treeOpenIcon: "tree-open-icon", treeCloseIcon: "tree-close-icon", treeName: "tree-name", treeFilterHidden: "tree-filter-hidden", treeRadio: "tree-radio", treeCheckbox: "tree-checkbox", treeNodeChecked: "tree-node-checked", treeNodeHalfChecked: "tree-node-half-checked", treeNodeUnchecked: "tree-node-unchecked", treeNodeNocheckedChecked: "tree-node-nochecked-checked", treeNodeNocheckedNotChecked: "tree-node-nochecked-notchecked", treeHighlighter: "tree-highlighter"}}, initialize: function (b, a) {
    this.setOptions(b);
    this.swordTree = a
}, build: function (a, h) {
    a.empty();
    this.rootContainer = a;
    this.initElementEnum();
    if ($chk(this.options.stylePath)) {
        this.loadCSS(a, this.options.stylePath)
    }
    this.containerID = a.get("id") || a.get("name");
    var c = this.nodeEnum("div");
    if (this.options.isShow == "false") {
        c.setStyle("display", "none")
    }
    c.setProperties({depth: this.depth + 1, leaftype: "root"});
    c.addClass("tree-root-node");
    a.grab(c);
    this.initParam();
    c.addClass(this.options.treeStyle.treeWrapper);
    var g = c;
    if ($defined(this.options.title)) {
        var b = this.nodeEnum("div");
        b.innerHTML = this.options.title;
        b.addClass(this.options.treeStyle.treeTitle);
        c.grab(b)
    }
    if (this.options.startLayer == 0 || !h.hasChildNodes()) {
        var f = this.nodeEnum("div");
        f.setProperty("leaftype", "-1");
        c.grab(f);
        g = f
    }
    this.container = c;
    this.dom = h;
    SwordTree.Container.containerDraw.set(this.containerID, this);
    this.startDepth = this.depth + 1;
    this.createNode(g, this.dom, this.depth);
    if ($defined(this.options.rootNode)) {
        this.appendRootNode(this.options.rootNode)
    }
    this.isInitLazy = true;
    this.initEvents();
    this.initCheckedTree();
    if ($chk(this.options.height)) {
        if (this.options.height != "auto") {
            c.setStyle("height", this.options.height);
            c.addClass(this.options.treeStyle.treeContainerY)
        } else {
            c.setStyle("height", a.getParent().getHeight() - 5);
            c.addClass(this.options.treeStyle.treeContainerY)
        }
    }
    if ($chk(this.options.width)) {
        c.setStyle("width", this.options.width);
        c.addClass(this.options.treeStyle.treeContainerX)
    }
    this.reset()
}, initParam: function () {
    this.options.startLayer = this.options.startLayer.toInt();
    this.options.extendLayer = this.options.extendLayer.toInt();
    this.options.lazyLayer = this.options.lazyLayer.toInt();
    this.options.startLayer = this.options.startLayer < 0 ? 0 : this.options.startLayer;
    this.options.extendLayer = this.options.extendLayer < 0 ? 10000 : this.options.extendLayer;
    if ($chk(this.options.ltid) && this.options.lazyLayer == 0) {
        this.options.lazyLayer = 1
    }
    this.options.lazyLayer = this.options.lazyLayer < 0 ? 0 : this.options.lazyLayer;
    if ($defined(this.options.rootNode) && this.options.startLayer == 0 && this.options.dataType != "xml") {
        this.options.startLayer = 1
    }
}, reset: function () {
    this.startDepth = 0;
    this.options.startLayer = 0
}, initEvents: function () {
    this.container.addEvents({mousedown: this.toggleClick.bindWithEvent(this), mousemove: this.mousemove.bindWithEvent(this), mouseout: this.mouseout.bindWithEvent(this)})
}, initElementEnum: function () {
    SwordTree.Draw.Div = new Element("div");
    SwordTree.Draw.WrapperSpan = new Element("span", {type: "wrapperSpan"});
    SwordTree.Draw.GadGetSpan = new Element("span", {type: "gadGetSpan"});
    SwordTree.Draw.CheckSpan = new Element("span", {type: "checkSpan"});
    SwordTree.Draw.Radio = new Element("input", {type: "radio", id: "radio", name: "radio"});
    SwordTree.Draw.IconSpan = new Element("span", {type: "iconSpan"});
    SwordTree.Draw.DisplaySpan = new Element("span", {type: "displaySpan"})
}, nodeEnum: function (a) {
    switch (a) {
        case"div":
            return SwordTree.Draw.Div.clone(false);
        case"wrapperSpan":
            return SwordTree.Draw.WrapperSpan.clone(false);
        case"gadGetSpan":
            return SwordTree.Draw.GadGetSpan.clone(false);
        case"checkSpan":
            return SwordTree.Draw.CheckSpan.clone(false);
        case"radio":
            return SwordTree.Draw.Radio.clone(false);
        case"iconSpan":
            return SwordTree.Draw.IconSpan.clone(false);
        case"displaySpan":
            return SwordTree.Draw.DisplaySpan.clone(false)
    }
}, initCheckedTree: function () {
    if (this.options.treeType == "1") {
        var a = this.container.getElements("div[" + this.options.checkSign + "='true'],div[" + this.options.noCheckSign + "='true']");
        if (this.options.selectrule == "leaf") {
            a.each(function (f, b) {
                var g = this.getSpan(f, "checkSpan");
                var c = this.getCheckedState(g);
                this.checkedClick(f, c, true)
            }.bind(this))
        } else {
            this.setNodeChecked(a)
        }
    }
}, isLazyTree: function () {
    return(this.options.lazyLayer > 0 && "jsonAptitude".test(this.options.dataType, "i")) || $chk(this.options.ltid) || this.options.cacheLazy == "true"
}, createWrapperSpan: function (c) {
    var f = this.nodeEnum("wrapperSpan");
    f.addClass(this.options.treeStyle.treeNodeWrapper);
    var k = this.nodeEnum("gadGetSpan");
    k.addClass(this.options.treeStyle.treeGadGet);
    k.addEvent("click", function (m) {
        this.fireEvent("onExpand", m.target.getParent("div[leaftype!='-1']"))
    }.bind(this));
    k.innerHTML = this.space;
    var b;
    var l;
    switch (this.options.treeType) {
        case"1":
            b = this.nodeEnum("checkSpan");
            b.addClass(this.options.treeStyle.treeCheckbox);
            b.innerHTML = this.space;
            b.addClass(this.options.treeStyle.treeNodeUnchecked);
            var j = ($defined(c.getAttribute(this.options.checkSign)) && c.getAttribute(this.options.checkSign) == "true");
            var a = ($defined(c.getAttribute(this.options.noCheckSign)) && c.getAttribute(this.options.noCheckSign) == "true");
            if (a) {
                if (j) {
                    b.removeClass(this.options.treeStyle.treeNodeChecked);
                    b.addClass(this.options.treeStyle.treeNodeNocheckedChecked)
                } else {
                    b.removeClass(this.options.treeStyle.treeNodeUnchecked);
                    b.addClass(this.options.treeStyle.treeNodeNocheckedNotChecked)
                }
            } else {
                if (this.isLazyTree()) {
                    if (j) {
                        b.removeClass(this.options.treeStyle.treeNodeUnchecked);
                        b.addClass(this.options.treeStyle.treeNodeChecked)
                    } else {
                        b.removeClass(this.options.treeStyle.treeNodeChecked);
                        b.addClass(this.options.treeStyle.treeNodeUnchecked)
                    }
                }
            }
            break;
        case"2":
            l = this.nodeEnum("radio");
            l.addClass(this.options.treeStyle.treeRadio);
            break
    }
    var g = this.nodeEnum("iconSpan");
    g.addClass(this.options.treeStyle.treeIcon);
    g.innerHTML = this.space;
    g.addEvents({click: function (m) {
        this.fireEvent("onIconClick", m.target.getParent("div[leaftype!='-1']"))
    }.bind(this), dblclick: function (m) {
        this.fireEvent("onIconDblClick", m.target.getParent("div[leaftype!='-1']"))
    }.bind(this)});
    var h = this.nodeEnum("displaySpan");
    h.addClass(this.options.treeStyle.treeName);
    h.addEvents({click: function (m) {
        this.fireEvent("onNodeClick", m.target.getParent("div[leaftype!='-1']"))
    }.bind(this), dblclick: function (m) {
        this.fireEvent("onDblNodeClick", m.target.getParent("div[leaftype!='-1']"))
    }.bind(this), contextmenu: function (m) {
        this.fireEvent("onNodeContextMenu", [m.target.getParent("div[leaftype!='-1']"), m])
    }.bind(this), mousedown: function (m) {
        if (m.event.button == 2) {
            m.preventDefault();
            this.fireEvent("onRightClick", [m.target.getParent("div[leaftype!='-1']"), m]);
            document.oncontextmenu = function () {
                return false
            }
        }
    }.bind(this)});
    if ($defined(c.getAttribute(this.options.displayTag))) {
        h.innerHTML = this.dealCaption(c)
    }
    f.adopt([k, b, l, g, h]);
    return{wrapperSpan: f, gadGetSpan: k, iconSpan: g}
}, createNode: function (m, t, x, j) {
    var n = true;
    if ($defined(j) && !j) {
        x--, x--
    }
    x++;
    var c = this.nodeEnum("div");
    c.setProperties({"class": this.options.treeStyle.treeNode, leaftype: "0"});
    var l = t.isLast();
    if (l) {
        c.addClass(this.options.treeStyle.treeNodeLast)
    }
    var h = t.getAttributes();
    var o = new Hash();
    for (var r = 0; r < h.length; r++) {
        c.setProperty(h[r].nodeName, h[r].nodeValue);
        o.set(h[r].nodeName, h[r].nodeValue)
    }
    if ($defined(t.getAttribute(this.options.displayTag))) {
        c.setProperty("title", this.dealCaption(t))
    }
    c.store("data", o);
    var g = this.createWrapperSpan(t);
    var w = g.wrapperSpan;
    var b = g.gadGetSpan;
    var a = g.iconSpan;
    c.grab(w);
    c.setProperty("depth", (x - this.options.startLayer + 1));
    var u = true;
    if (this.isLazyTree()) {
        if (this.isInitLazy) {
            this.options.lazyLayer = this.options.lazyLoadLayer
        }
        u = ((x - this.startDepth) < this.options.lazyLayer) && t.hasChildNodes();
        if ((x - this.startDepth) == this.options.lazyLayer) {
            if ($chk(t.node.leaftype) && t.node.leaftype == "1") {
                this.setSpanClass(b, "gadGetSpan", this.options.treeStyle.treeGadGetNone);
                this.setSpanClass(a, "iconSpan", this.options.treeStyle.treeCloseIcon);
                n = false
            } else {
                this.setSpanClass(b, "gadGetSpan", this.options.treeStyle.treeGadGetPlus);
                this.setSpanClass(a, "iconSpan", this.options.treeStyle.treeLeafIcon);
                n = false
            }
        }
    } else {
        u = t.hasChildNodes();
        c.setProperty(this.options.isLoadSign, true)
    }
    var f = this.nodeEnum("div");
    if ((this.options.dataType == "xml" || this.options.pageDataLazy == "true") && this.options.extendLayer <= x) {
        this.dom4nodeHash.set(c.get(this.options.cascadeSign.id), t);
        if (u) {
            c.setProperty(this.options.isLoadSign, true);
            c.setProperty("leaftype", "0");
            this.setSpanClass(b, "gadGetSpan", this.options.treeStyle.treeGadGetPlus);
            this.setSpanClass(a, "iconSpan", this.options.treeStyle.treeLeafIcon);
            n = false;
            b.addEvents({click: function () {
                if (!$type(c.getElement(".tree-children"))) {
                    f.setProperty("leaftype", "-1");
                    var y = t.getChildNodes();
                    for (var z = 0; z < y.length; z++) {
                        f.grab(this.createNode(f, y[z], x))
                    }
                    if (this.options.treeType == "1" && this.options.isCascadeCheckedClick == "true" && this.getSpan(c, "checkSpan").hasClass(this.options.treeStyle.treeNodeChecked)) {
                        var k = f.getElements("div.tree-node");
                        if (k) {
                            this.changeCheckedState2(k.getElement("span[type='checkSpan']"), 1);
                            k.set(this.options.checkSign, "true")
                        }
                    }
                    if ((x - this.options.startLayer) >= (this.options.extendLayer - 1)) {
                        f.setStyle("display", "block");
                        this.setSpanClass(b, "gadGetSpan", this.options.treeStyle.treeGadGetMinus);
                        this.setSpanClass(a, "iconSpan", this.options.treeStyle.treeOpenIcon)
                    } else {
                        f.setStyle("display", "none");
                        this.setSpanClass(b, "gadGetSpan", this.options.treeStyle.treeGadGetPlus);
                        this.setSpanClass(a, "iconSpan", this.options.treeStyle.treeLeafIcon)
                    }
                    if (x >= this.options.startLayer) {
                        f.addClass(this.options.treeStyle.treeChildren);
                        c.grab(f)
                    }
                    this.setSpanClass(b, "gadGetSpan", this.options.treeStyle.treeGadGetPlus);
                    this.setSpanClass(a, "iconSpan", this.options.treeStyle.treeLeafIcon);
                    f.setStyle("display", "none")
                }
                this.extend(c)
            }.bind(this)});
            a.addEvents({click: function () {
                if (!$type(c.getElement(".tree-children"))) {
                    c.setProperty(this.options.isLoadSign, true);
                    f.setProperty("leaftype", "-1");
                    var y = t.getChildNodes();
                    for (var z = 0; z < y.length; z++) {
                        f.grab(this.createNode(f, y[z], x))
                    }
                    if (this.options.treeType == "1" && this.options.isCascadeCheckedClick == "true" && this.getSpan(c, "checkSpan").hasClass(this.options.treeStyle.treeNodeChecked)) {
                        var k = f.getElements("div.tree-node");
                        if (k) {
                            this.changeCheckedState2(k.getElement("span[type='checkSpan']"), 1);
                            k.set(this.options.checkSign, "true")
                        }
                    }
                    if ((x - this.options.startLayer) >= (this.options.extendLayer - 1)) {
                        f.setStyle("display", "block");
                        this.setSpanClass(b, "gadGetSpan", this.options.treeStyle.treeGadGetMinus);
                        this.setSpanClass(a, "iconSpan", this.options.treeStyle.treeOpenIcon)
                    } else {
                        f.setStyle("display", "none");
                        this.setSpanClass(b, "gadGetSpan", this.options.treeStyle.treeGadGetPlus);
                        this.setSpanClass(a, "iconSpan", this.options.treeStyle.treeLeafIcon)
                    }
                    if (x >= this.options.startLayer) {
                        f.addClass(this.options.treeStyle.treeChildren);
                        c.grab(f)
                    }
                    this.setSpanClass(b, "gadGetSpan", this.options.treeStyle.treeGadGetPlus);
                    this.setSpanClass(a, "iconSpan", this.options.treeStyle.treeLeafIcon);
                    f.setStyle("display", "none")
                }
                this.extend(c)
            }.bind(this)})
        } else {
            this.setSpanClass(b, "gadGetSpan", this.options.treeStyle.treeGadGetMinus);
            this.setSpanClass(a, "iconSpan", this.options.treeStyle.treeCloseIcon)
        }
        u = false
    }
    if (u) {
        c.setProperty(this.options.isLoadSign, true);
        c.setProperty("leaftype", "0");
        f.setProperty("leaftype", "-1");
        if ((x - this.options.startLayer) >= (this.options.extendLayer - 1)) {
            f.setStyle("display", "none");
            this.setSpanClass(b, "gadGetSpan", this.options.treeStyle.treeGadGetPlus);
            this.setSpanClass(a, "iconSpan", this.options.treeStyle.treeLeafIcon)
        } else {
            f.setStyle("display", "block");
            this.setSpanClass(b, "gadGetSpan", this.options.treeStyle.treeGadGetMinus);
            this.setSpanClass(a, "iconSpan", this.options.treeStyle.treeOpenIcon)
        }
        if (x >= this.options.startLayer) {
            f.addClass(this.options.treeStyle.treeChildren);
            c.grab(f)
        }
        var p = t.getChildNodes(this.options.rootPcode);
        var v = document.createDocumentFragment();
        for (var s = 0; s < p.length; s++) {
            v.appendChild(this.createNode(f, p[s], x))
        }
        f.appendChild(v)
    } else {
        if (n) {
            c.setProperty(this.options.isLoadSign, true);
            c.setProperty("leaftype", "1");
            this.setSpanClass(b, "gadGetSpan", this.options.treeStyle.treeGadGetNone);
            this.setSpanClass(a, "iconSpan", this.options.treeStyle.treeCloseIcon)
        }
    }
    if (x > this.options.startLayer || this.options.startLayer == 0) {
        if (this.isLazyTree() && $defined(j) && x == this.startDepth) {
            m.adopt(f.getChildren("div"));
            this.fireEvent("onLazyNodesAppend", [this, m])
        } else {
            m.grab(c);
            this.fireEvent("onCreateNode", c);
            if (l) {
                this.fireEvent("onAfterCreateChildNodes")
            }
        }
    } else {
        if (x == this.options.startLayer) {
            this.container.grab(m);
            this.fireEvent("onCreateNode", c)
        } else {
            if (f) {
                var q = f.getChildren();
                if (q && q.length > 0) {
                    q.each(function (y, k) {
                        this.fireEvent("onCreateNode", y)
                    });
                    if (l) {
                        this.fireEvent("onAfterCreateChildNodes")
                    }
                }
            }
        }
    }
    return c
}, extend: function (c) {
    if (this.isLazyExtend(c) && c.get("leaftype") == "0") {
        this.lazyExtend(c)
    } else {
        var f = c.getFirst("span[type='wrapperSpan']").getNext("div[leaftype='-1']");
        if ($defined(f)) {
            var b = c.getFirst("span[type='wrapperSpan']");
            var a = b.getFirst("span[type='iconSpan']");
            var h = b.getFirst("span[type='gadGetSpan']");
            if (h.hasClass(this.options.treeStyle.treeGadGetPlus)) {
                if (this.options.autoShrink == "true") {
                    if ($defined(this.shrinkNode)) {
                        var g = this.getNode(h).getParent("div[leaftype!='-1']");
                        if (g && g != this.shrinkNode) {
                            this.close();
                            this.findTreeNode(this.getNode(h))
                        }
                    }
                    this.shrinkNode = this.getNode(h)
                }
                this.setSpanClass(h, "gadGetSpan", this.options.treeStyle.treeGadGetMinus);
                this.setSpanClass(a, "iconSpan", this.options.treeStyle.treeOpenIcon)
            } else {
                this.setSpanClass(h, "gadGetSpan", this.options.treeStyle.treeGadGetPlus);
                this.setSpanClass(a, "iconSpan", this.options.treeStyle.treeLeafIcon)
            }
            if (!h.hasClass(this.options.treeStyle.treeGadGetPlus)) {
                f.setStyle("display", "block")
            } else {
                f.setStyle("display", "none")
            }
            if ($defined($("div[id='" + SwordTree.Container.id + "']"))) {
                new Fx.Scroll($("div[id='" + SwordTree.Container.id + "']").getFirst("div"), {duration: 50}).toElement(c)
            }
        }
    }
}, isLazyExtend: function (a) {
    var b = a.get(this.options.isLoadSign);
    return !b && this.isLazyTree()
}, setSpanClass: function (g, b, a) {
    if ($defined(g)) {
        var f;
        if (g.get("tag") == "div") {
            f = this.getSpan(g, b)
        } else {
            f = g
        }
        if ($defined(f)) {
            var c = f.getProperty("type");
            if (c == "gadGetSpan") {
                f.setProperty("class", this.options.treeStyle.treeGadGet)
            } else {
                if (c == "iconSpan") {
                    f.setProperty("class", this.options.treeStyle.treeIcon)
                }
            }
            f.addClass(a)
        }
    }
}, lazyExtend: function (g, j, k, b) {
    this.setSpanClass(g, "iconSpan", this.options.treeStyle.treeGadjetLoad);
    var f = g.retrieve("data");
    var a = new SwordTree.JSONAptitudeIterator(f, g.get("depth").toInt());
    var h = this.getData(f);
    a.domainData.extend(h);
    g.setProperty(this.options.isLoadSign, true);
    if (h.length == 0) {
        g.setProperty("leaftype", "1")
    }
    this.startDepth = g.get("depth").toInt() - 1;
    var c = function (o, s, u, l, m) {
        this.addTreeNode(o, s, u);
        var v = this.swordTree;
        if ($chk(v)) {
            var t = v.select;
            if ($chk(t)) {
                var r = t.selBox;
                if ($chk(r.get("value"))) {
                    if (v.options.treeType == 1) {
                        var q = [];
                        var n = [];
                        var p = r.get("checkPath").split("|");
                        p.each(function (w, y) {
                            var x = w.split(",");
                            var A = x.indexOf(o.node.code) + 1;
                            if (A != 0) {
                                var z = new Hash();
                                if (A < x.length) {
                                    z.set(v.options.cascadeSign.id, x[A]);
                                    if (x.length == A + 1) {
                                        q.include(v.getTreeNode(z))
                                    } else {
                                        n.include(v.getTreeNode(z))
                                    }
                                }
                            }
                        });
                        if (q.length != 0) {
                            v.setHalfOrCheckedList(q)
                        }
                        if (n.length != 0) {
                            v.setHalfOrCheckedList(n, true)
                        }
                    }
                }
            }
        }
        if (l) {
            return l(m)
        }
    }.bind(this);
    if (!$defined(b)) {
        c.delay(this.options.lazyTime, this, [a, false, g, j, k])
    } else {
        return c(a, false, g, j, k)
    }
}, hasChildData: function (b) {
    var a = 0;
    var g = new Array();
    var h = this.options.cascadeSign.pid;
    var f = this.options.cascadeSign.id;
    for (var c = 0; c < this.dom.domainData.length; c++) {
        var k = this.dom.domainData[c];
        if ((k[h] || k[h.toUpperCase()]) == (b.get(f) || b.get(f.toUpperCase()))) {
            g[a++] = k
        }
    }
    return g
}, childrenIdArray: null, extendNodeByIdPath: function (c) {
    if (c && !$chk(this.childrenIdArray)) {
        this.childrenIdArray = c.get(this.options.cascadeSign.id)
    }
    var f = new Hash();
    if (this.childrenIdArray && this.childrenIdArray.length > 0) {
        var b = this.childrenIdArray[0];
        f.set(this.options.cascadeSign.id, b);
        var a = this.getTreeNode(f);
        if (a) {
            this.childrenIdArray.erase(b);
            if (this.isLazyExtend(a) && a.get("leaftype") == "0") {
                this.lazyExtend(a)
            } else {
                this.extendNodeByIdPath()
            }
        }
    }
    if (this.childrenIdArray != null && this.childrenIdArray.length == 0) {
        this.childrenIdArray = null;
        this.fireEvent("onAfterExtendByIdPath");
        this.extendByIdPathAfter()
    }
}, extendByIdPathAfter: function () {
    var b = this.swordTree;
    var a = b.select.selBox.get("realvalue");
    if (b && a) {
        var c = new Hash();
        c.set(this.options.cascadeSign.id, a);
        b.findTreeNode(c)
    }
}, getData: function (f) {
    var b = this.hasChildData(f);
    if (b.length == 0 && ($chk(this.options.ltid) || $chk(this.options.lctrl))) {
        this.fireEvent("onLtidBefore", f);
        var g = new Hash();
        g.set("sword", "SwordTree");
        g.set("name", this.options.treeContainerName);
        g.set("loaddata", "widget");
        g.set("data", [f]);
        var a = new Hash();
        a.set("sword", "attr");
        a.set("name", "treeName");
        a.set("value", this.options.treeContainerName);
        var c = pageContainer.getReq({tid: this.options.ltid, ctrl: this.options.lctrl, widgets: [g, a]});
        pageContainer.postReq({req: c, async: false, loaddata: "widget", onSuccess: function (h) {
            var j = pageContainer.getResData(this.options.treeContainerName, h);
            b = $defined(j) ? j.data : [];
            if (b.length == 0) {
                this.findTreeNode(f)
            }
        }.bind(this), onError: function (h) {
        }.bind(this), onFinish: function (h) {
            this.fireEvent("onAfterLoadData", [f, h])
        }.bind(this)})
    } else {
        if (b.length == 0 && this.options.cacheLazy == "true") {
            if (this.swordTree.cacheTreeDataFunc && $chk(this.swordTree.options.cacheDataStr)) {
                var g = this.swordTree.cacheTreeDataFunc(this.swordTree.options.treeContainerName, this.swordTree.options.cacheDataStr, f.code);
                b = $defined(g) ? g.data : []
            }
        } else {
            this.fireEvent("onAfterLoadData", [f, b])
        }
    }
    return b
}, toggleClick: function (b) {
    var k = b.target;
    if (k.tagName.test("span", "i")) {
        var g = this.getNode(k);
        var l = k.get("type");
        if (l == "gadGetSpan" || l == "iconSpan") {
            if (this.options.dataType != "xml") {
                this.extend(g)
            }
        } else {
            if (l == "checkSpan") {
                var g = this.getNode(k);
                var h = this.options.onCheckedBefore;
                var n = true;
                if ($defined(h)) {
                    var c = this.getFunc(h)[0](g);
                    if (c == false) {
                        n = false
                    }
                }
                var f = g.get(this.options.noCheckSign) && g.get(this.options.noCheckSign) == "true";
                if (n && !f) {
                    var m = this.getCheckedState(k);
                    this.checkedClick(g, m, true)
                }
                this.fireEvent("onCheckedAfter", g);
                var o = this.swordTree;
                if ($chk(o)) {
                    var a = o.select;
                    var j = o.options.isHideBtn;
                    if (j == "true") {
                        if (o.options.selectrule == "leaf") {
                            a.selBox.set("value", this.swordTree.getAllChecked(this.options.displayTag, 1));
                            if (this.options.selectRealKey == "code") {
                                a.setRealValue(o.getAllChecked(this.options.cascadeSign.id, 1))
                            } else {
                                a.setRealValue(o.getAllChecked(this.options.selectRealKey, 1))
                            }
                        } else {
                            a.selBox.set("value", o.getAllChecked(this.options.displayTag));
                            if (this.options.selectRealKey == "code") {
                                a.setRealValue(o.getAllChecked(this.options.cascadeSign.id))
                            } else {
                                a.setRealValue(o.getAllChecked(this.options.selectRealKey))
                            }
                        }
                        a.tempCheckList = o.getAllCheckedList()
                    }
                }
            } else {
                if (l == "displaySpan") {
                    if (this.options.autoExtendCaption == "true") {
                        if (this.options.dataType != "xml") {
                            this.extend(g)
                        }
                    }
                    this.selectNode(b)
                }
            }
        }
    } else {
        if (k.hasClass("tree-radio")) {
            var g = this.getNode(k);
            var h = this.options.onCheckedAfter;
            if ($defined(h)) {
                this.getFunc(h)[0](g);
                k.set("checked", true)
            }
            this.fireEvent("onCheckedAfter", g)
        }
    }
    return false
}, selectNode: function () {
    var a;
    if ($type(arguments[0]) == "element") {
        a = arguments[0]
    } else {
        a = arguments[0].target || event
    }
    if ($defined(this.targetNode)) {
        this.targetNode.removeClass(this.options.treeStyle.treeHighlighter)
    }
    a.addClass(this.options.treeStyle.treeHighlighter);
    this.targetNode = a;
    this.current = this.getNode(a)
}, unSelectNode: function () {
    if ($defined(this.targetNode)) {
        this.targetNode.removeClass(this.options.treeStyle.treeHighlighter)
    }
    this.targetNode = null;
    this.current = null
}, getSelectedNode: function () {
    return this.current
}, mousemove: function (a) {
    var b = a.target;
    SwordTree.Container.id = this.containerID;
    SwordTree.Container.mouseNode = b;
    SwordTree.Container.containerDraw.include(this.containerID, this);
    if (this.options.isHighlight == "true") {
        if (b.tagName.test("span", "i") && b.get("type") == "displaySpan") {
            SwordTree.Container.mouseNode.addClass("treenode_hover")
        }
    }
}, mouseout: function (a) {
    if (this.options.isHighlight == "true") {
        if ($defined(SwordTree.Container.mouseNode)) {
            SwordTree.Container.mouseNode.removeClass("treenode_hover")
        }
    }
    SwordTree.Container.id = null;
    SwordTree.Container.mouseNode = null;
    SwordTree.Container.containerDraw.empty()
}, getNode: function (b) {
    var a;
    if ($defined(b)) {
        var f = b.getParent("span[type='wrapperSpan']");
        if ($defined(f)) {
            var c = f.getParent("div[leaftype!='-1']");
            if ($defined(c)) {
                a = c
            } else {
                a = f
            }
        } else {
            a = b
        }
    }
    return a
}, getCheckedState: function (b) {
    var a;
    if (b.hasClass(this.options.treeStyle.treeNodeChecked)) {
        a = 0
    } else {
        if (b.hasClass(this.options.treeStyle.treeNodeUnchecked)) {
            a = 1
        } else {
            if (b.hasClass(this.options.treeStyle.treeNodeHalfChecked)) {
                a = 2
            }
        }
    }
    return a
}, checkedClick: function (o, a, c, g) {
    if (this.options.isCascadeCheckedClick == "false") {
        o.setProperty(this.options.checkSign, a == 1 ? "true" : (a == 2 ? "true" : "false"));
        this.changeCheckedState2(o.getElements("span[type='checkSpan']")[0], a)
    } else {
        if ($defined(o)) {
            var n = o.getParent("div[leaftype='0']");
            if (c) {
                var f = o.getElements("span[type='checkSpan']");
                f.each(function (s, r) {
                    if (a == 0) {
                        this.changeCheckedState(s, 0)
                    } else {
                        if (a == 1) {
                            if (g) {
                                this.changeCheckedState(s, 3)
                            } else {
                                this.changeCheckedState(s, 2)
                            }
                        } else {
                            if (a == 2) {
                                this.changeCheckedState(s, 4)
                            }
                        }
                    }
                }.bind(this));
                var b = o.getElements("div[leaftype!='-1']").include(o);
                b.each(function (s, r) {
                    s.setProperty(this.options.checkSign, a == 1 ? "true" : (a == 2 ? "true" : "false"))
                }.bind(this))
            }
            if ($defined(n)) {
                var j = false;
                var q = n.getFirst("div[leaftype='-1']").getChildren("div[leaftype!='-1'][" + this.options.noCheckSign + "!='true']") || [];
                var p = q.filter(function (r) {
                    return r.get(this.options.checkSign) == "true"
                }.bind(this));
                var m = p.filter(function (r) {
                    return r.get(this.options.checkSign) == "true" && this.getSpan(r, "checkSpan").hasClass(this.options.treeStyle.treeNodeHalfChecked)
                }.bind(this));
                if (!((a == 1 || a == 2) && m.length > 0 && q.length == p.length) || (a == 1 && q.length == p.length)) {
                    var k = q.length;
                    var l = p.length;
                    var h = this.getSpan(n, "checkSpan");
                    if (a == 0 && l > 0) {
                        this.changeCheckedState(h, 1)
                    } else {
                        if (a == 0 && l == 0) {
                            n.setProperty(this.options.checkSign, "false");
                            this.changeCheckedState(h, 5)
                        } else {
                            if (a == 1 && l >= 0 && l < k) {
                                n.setProperty(this.options.checkSign, "true");
                                this.changeCheckedState(h, 3)
                            } else {
                                if (a == 1 && l == k) {
                                    n.setProperty(this.options.checkSign, "true");
                                    this.changeCheckedState(h, 4)
                                } else {
                                    if (a == 2 && l == k) {
                                        this.changeCheckedState(h, 4)
                                    }
                                }
                            }
                        }
                    }
                    this.checkedClick(n, a, false)
                }
            }
        }
    }
}, changeCheckedState2: function (b, a) {
    if (a == 0) {
        b.removeClass(this.options.treeStyle.treeNodeChecked);
        b.removeClass(this.options.treeStyle.treeNodeHalfChecked);
        b.addClass(this.options.treeStyle.treeNodeUnchecked)
    } else {
        if (a == 1) {
            b.removeClass(this.options.treeStyle.treeNodeUnchecked);
            b.removeClass(this.options.treeStyle.treeNodeHalfChecked);
            b.addClass(this.options.treeStyle.treeNodeChecked)
        }
    }
}, changeCheckedState: function (b, a) {
    if (a == 0) {
        b.removeClass(this.options.treeStyle.treeNodeChecked);
        b.removeClass(this.options.treeStyle.treeNodeHalfChecked);
        b.addClass(this.options.treeStyle.treeNodeUnchecked)
    } else {
        if (a == 1) {
            b.removeClass(this.options.treeStyle.treeNodeChecked);
            b.removeClass(this.options.treeStyle.treeNodeUnchecked);
            b.addClass(this.options.treeStyle.treeNodeHalfChecked)
        } else {
            if (a == 2) {
                b.removeClass(this.options.treeStyle.treeNodeUnchecked);
                b.removeClass(this.options.treeStyle.treeNodeHalfChecked);
                b.addClass(this.options.treeStyle.treeNodeChecked)
            } else {
                if (a == 3) {
                    b.removeClass(this.options.treeStyle.treeNodeChecked);
                    b.removeClass(this.options.treeStyle.treeNodeUnchecked);
                    b.addClass(this.options.treeStyle.treeNodeHalfChecked)
                } else {
                    if (a == 4) {
                        b.removeClass(this.options.treeStyle.treeNodeUnchecked);
                        b.removeClass(this.options.treeStyle.treeNodeHalfChecked);
                        b.addClass(this.options.treeStyle.treeNodeChecked)
                    } else {
                        if (a == 5) {
                            b.removeClass(this.options.treeStyle.treeNodeChecked);
                            b.removeClass(this.options.treeStyle.treeNodeHalfChecked);
                            b.addClass(this.options.treeStyle.treeNodeUnchecked)
                        }
                    }
                }
            }
        }
    }
}, beforeAddTreeNode: function (f) {
    var c = f.getFirst("div[leaftype='-1']");
    var b = f.getFirst("span[type='wrapperSpan']");
    var g = b.getFirst("span[type='gadGetSpan']");
    if ($defined(c)) {
        var a = c.getLast("div[leaftype!='-1']");
        if ($defined(a)) {
            a.removeClass(this.options.treeStyle.treeNodeLast)
        }
    } else {
        c = this.nodeEnum("div");
        c.setProperty("leaftype", "-1");
        c.addClass(this.options.treeStyle.treeChildren);
        g.addClass(this.options.treeStyle.treeGadGetPlus);
        f.grab(c)
    }
    f.setProperty("leaftype", "0");
    return{childrenElement: c, gadGetSpan: g}
}, addTreeNode: function (h, j, q) {
    var g;
    var l;
    var c;
    if ($defined(q)) {
        l = q
    } else {
        l = this.getSelectedNode() || this.getRootNode();
        if (this.isLazyTree() && !l.get(this.options.isLoadSign)) {
            var f = function (s) {
                var r = this.getTreeNode(s);
                this.setSpanClass(r, "gadGetSpan", this.options.treeStyle.treeGadGetNone);
                this.setSpanClass(r, "iconSpan", this.options.treeStyle.treeCloseIcon)
            }.bind(this);
            this.lazyExtend(l, f, h);
            return
        }
    }
    if ($type(h) == "SwordTree.Iterator") {
        g = h
    } else {
        g = new SwordTree.JSONIterator(h);
        g.setLastSign(true)
    }
    if ($defined(l)) {
        l.store("data", h);
        if ($defined(j)) {
            if (!g.hasChildNodes()) {
                this.setSpanClass(l, "gadGetSpan", this.options.treeStyle.treeGadGetNone);
                this.setSpanClass(l, "iconSpan", this.options.treeStyle.treeCloseIcon);
                return
            }
        }
        var k = this.beforeAddTreeNode(l);
        var a = k.childrenElement;
        c = this.createNode(a, g, l.get("depth").toInt(), j);
        c.setProperty(this.options.isLoadSign, true);
        if ($chk(l.get(this.options.cascadeSign.id))) {
            c.setProperty(this.options.cascadeSign.pid, l.get(this.options.cascadeSign.id))
        }
        var n = k.gadGetSpan;
        if (n.hasClass(this.options.treeStyle.treeGadGetPlus)) {
            this.extend(l)
        }
        if (this.options.treeType == "1") {
            var m = l.getFirst("span[type='wrapperSpan']");
            var b = m.getFirst("span[type='checkSpan']");
            if (b.hasClass(this.options.treeStyle.treeNodeChecked)) {
                var o = this.getCheckedState(b);
                this.checkedClick(c, o, false);
                if (this.options.isCascadeCheckedClick == "true") {
                    var p = a.getElements("div.tree-node");
                    if (p) {
                        this.changeCheckedState2(p.getElement("span[type='checkSpan']"), 1);
                        p.set(this.options.checkSign, "true")
                    }
                }
            }
        }
    } else {
        if (this.container.getFirst("div").getChildren("div").length == 0) {
            c = this.createNode(this.container, g, this.depth + 1);
            this.container.getFirst("div").grab(c)
        }
    }
    this.reset();
    this.extendNodeByIdPath()
}, updateTreeNode: function (f, b) {
    var c = this.getTreeNode(f);
    var a = false;
    if ($defined(c)) {
        b.getKeys().each(function (h) {
            if (h == this.options.displayTag) {
                var g = c.getFirst("span[type='wrapperSpan']").getFirst("span[type='displaySpan']");
                g.set("text", b.get(h))
            }
            c.setProperty(h, b.get(h))
        }.bind(this));
        a = true
    }
    return a
}, getTreeNode: function (j, g) {
    var a;
    if ($type(j) != "hash") {
        a = new Hash(j)
    } else {
        a = j
    }
    var l = a.getValues();
    if (l.length == 1) {
        if (l[0].contains("|")) {
            var b = l[0].toHash();
            return new Element("div", {code: b.get("code"), caption: b.get("caption")})
        }
    }
    var f = "";
    a.getKeys().each(function (h) {
        f = f + "[" + h + "='" + a.get(h) + "']"
    });
    var k;
    if ($chk(g)) {
        k = g.getElements("div[leaftype!='-1']" + f)
    } else {
        k = this.container.getElements("div[leaftype!='-1']" + f)
    }
    var c = null;
    if (k.length > 0) {
        c = k[0]
    }
    return c
}, getTreeNodes: function (f, c) {
    var a;
    if ($type(f) != "hash") {
        a = new Hash(f)
    } else {
        a = f
    }
    var b = "";
    a.getKeys().each(function (h) {
        b = b + "[" + h + "='" + a.get(h) + "']"
    });
    var g;
    if ($chk(c)) {
        g = c.getElements("div[leaftype!='-1']" + b)
    } else {
        g = this.container.getElements("div[leaftype!='-1']" + b)
    }
    return g
}, foundNode: null, extendTreeNodeUtilFindNode: function (f, l) {
    var h;
    if ($chk(l)) {
        h = l.getElements("div[leaftype!='-1']")
    } else {
        h = this.container.getElements("div[leaftype!='-1']")
    }
    var j = this.options.cascadeSign.id;
    for (var g = 0; g < h.length; g++) {
        var k = h[g];
        if (this.dom4nodeHash.has(k.get(j)) && k.getElements("div[" + j + "]").length == 0 && this.dom4nodeHash.get(k.get(j)).hasChildNodes()) {
            var a = this.nodeEnum("div");
            a.setProperty("leaftype", "-1");
            a.setStyle("display", "none");
            a.addClass(this.options.treeStyle.treeChildren);
            k.grab(a);
            var b = this.dom4nodeHash.get(k.get(j)).getChildNodes();
            for (var c = 0; c < b.length; c++) {
                a.grab(this.createOneLeaveNode(a, b[c], k.get("depth").toInt()))
            }
            if (this.getTreeNode(f, k) != null) {
                this.foundNode = this.getTreeNode(f, k);
                break
            } else {
                if (this.getTreeNode(f, k) == null) {
                    this.extendTreeNodeUtilFindNode(f, k)
                }
            }
        }
    }
}, dealCaption: function (c) {
    var b = this.options.popdisplay;
    if (!$defined(b)) {
        b = "{caption}"
    }
    var a = {code: c.getAttribute(this.options.cascadeSign.id), caption: c.getAttribute(this.options.displayTag)};
    return b.substitute(a)
}, createOneLeaveNode: function (c, j, n) {
    var f = true;
    var o = this.nodeEnum("div");
    if (j.isLast()) {
        o.addClass(this.options.treeStyle.treeNodeLast)
    }
    var l = j.getAttributes();
    var b = new Hash();
    for (var h = 0; h < l.length; h++) {
        o.setProperty(l[h].nodeName, l[h].nodeValue);
        b.set(l[h].nodeName, l[h].nodeValue)
    }
    if ($defined(j.getAttribute(this.options.displayTag))) {
        o.setProperty("title", this.dealCaption(j))
    }
    o.store("data", b);
    var q = this.createWrapperSpan(j);
    var m = q.wrapperSpan;
    var r = q.gadGetSpan;
    var p = q.iconSpan;
    o.grab(m);
    o.setProperty("depth", (n + 1));
    var g = true;
    g = j.hasChildNodes();
    o.setProperty(this.options.isLoadSign, true);
    var a = this.nodeEnum("div");
    this.dom4nodeHash.include(o.get(this.options.cascadeSign.id), j);
    if (g) {
        o.setProperties({"class": this.options.treeStyle.treeNode, leaftype: "0"});
        this.setSpanClass(r, "gadGetSpan", this.options.treeStyle.treeGadGetPlus);
        this.setSpanClass(p, "iconSpan", this.options.treeStyle.treeLeafIcon);
        f = false;
        r.addEvents({click: function () {
            if (!$type(o.getElement(".tree-children"))) {
                o.setProperty(this.options.isLoadSign, true);
                a.setProperty("leaftype", "-1");
                var k = j.getChildNodes();
                for (var s = 0; s < k.length; s++) {
                    a.grab(this.createNode(a, k[s], n))
                }
                if ((n - this.options.startLayer) >= (this.options.extendLayer - 1)) {
                    a.setStyle("display", "block");
                    this.setSpanClass(r, "gadGetSpan", this.options.treeStyle.treeGadGetMinus);
                    this.setSpanClass(p, "iconSpan", this.options.treeStyle.treeOpenIcon)
                } else {
                    a.setStyle("display", "none");
                    this.setSpanClass(r, "gadGetSpan", this.options.treeStyle.treeGadGetPlus);
                    this.setSpanClass(p, "iconSpan", this.options.treeStyle.treeLeafIcon)
                }
                if (n >= this.options.startLayer) {
                    a.addClass(this.options.treeStyle.treeChildren);
                    o.grab(a)
                }
            }
        }.bind(this)});
        p.addEvents({click: function () {
            if (!$type(o.getElement(".tree-children"))) {
                o.setProperty(this.options.isLoadSign, true);
                a.setProperty("leaftype", "-1");
                var k = j.getChildNodes();
                for (var s = 0; s < k.length; s++) {
                    a.grab(this.createNode(a, k[s], n))
                }
                if ((n - this.options.startLayer) >= (this.options.extendLayer - 1)) {
                    a.setStyle("display", "block");
                    this.setSpanClass(r, "gadGetSpan", this.options.treeStyle.treeGadGetMinus);
                    this.setSpanClass(p, "iconSpan", this.options.treeStyle.treeOpenIcon)
                } else {
                    a.setStyle("display", "none");
                    this.setSpanClass(r, "gadGetSpan", this.options.treeStyle.treeGadGetPlus);
                    this.setSpanClass(p, "iconSpan", this.options.treeStyle.treeLeafIcon)
                }
                if (n >= this.options.startLayer) {
                    a.addClass(this.options.treeStyle.treeChildren);
                    o.grab(a)
                }
            }
        }.bind(this)})
    } else {
        o.setProperties({"class": this.options.treeStyle.treeNode, leaftype: "1"});
        this.setSpanClass(r, "gadGetSpan", this.options.treeStyle.treeGadGetMinus);
        this.setSpanClass(p, "iconSpan", this.options.treeStyle.treeCloseIcon)
    }
    if (f) {
        o.setProperty(this.options.isLoadSign, true);
        this.setSpanClass(r, "gadGetSpan", this.options.treeStyle.treeGadGetNone);
        this.setSpanClass(p, "iconSpan", this.options.treeStyle.treeCloseIcon)
    }
    if (n > this.options.startLayer || this.options.startLayer == 0) {
        if (this.isLazyTree() && n == this.startDepth) {
            c.adopt(a.getChildren("div"))
        } else {
            c.grab(o)
        }
    } else {
        if (n == this.options.startLayer) {
            this.container.grab(c)
        }
    }
    this.fireEvent("onCreateNode", o);
    return o
}, hasChildren: function (g) {
    var b = false;
    var a = this.getSelectedNode();
    if (this.isLazyTree() && !a.get(this.options.isLoadSign)) {
        var f = function (k) {
            var h = false;
            var j = this.getTreeNode(k);
            if (j) {
                h = (j.getChildren("div[leaftype='-1']") || []).length > 0
            }
            return h
        }.bind(this);
        b = this.lazyExtend(a, f, g, false);
        this.extend(a)
    } else {
        var c = this.getTreeNode(g);
        if (c) {
            b = (c.getChildren("div[leaftype='-1']") || []).length > 0
        }
    }
    return b
}, getLikeTreeNode: function (c) {
    var j;
    if ($type(c) != "hash") {
        j = new Hash(c)
    } else {
        j = c
    }
    var l = j.getKeys()[0];
    var h = j.get(l);
    var b = [];
    var a = this.container.getElements("div[leaftype!='-1']");
    for (var f = 0; f < a.length; f++) {
        var m = a[f].getElement("[type='gadGetSpan']");
        if (m.hasClass("tree-gadjet-plus")) {
            var g = window.event;
            var k;
            if (!g) {
                if (document.createEvent) {
                    g = document.createEvent("MouseEvents");
                    k = new Event(g)
                } else {
                    k = {}
                }
            } else {
                k = {}
            }
            k.target = m;
            this.toggleClick(k)
        }
    }
    a = this.container.getElements("div[leaftype!='-1']");
    for (var f = 0; f < a.length; f++) {
        if (this.options.filterSign == "all") {
            if (a[f].get(this.options.displayTag).contains(h) || a[f].get(this.options.cascadeSign.id).contains(h)) {
                b.push(this.getNode(a[f]))
            }
        } else {
            if (a[f].get(l).contains(h)) {
                b.push(this.getNode(a[f]))
            }
        }
    }
    return b
}, getLikeTreeNodeNew: function (j) {
    var c;
    if ($type(j) != "hash") {
        c = new Hash(j)
    } else {
        c = j
    }
    var b = c.getKeys()[0];
    var h = c.get(b);
    var f = [];
    var g = this.container.getElements("div[leaftype!='-1']");
    for (var a = 0; a < g.length; a++) {
        if (this.options.filterSign == "all") {
            if (g[a].get(this.options.displayTag).contains(h) || g[a].get(this.options.cascadeSign.id).contains(h)) {
                f.push(this.getNode(g[a]))
            }
        } else {
            if (g[a].get(b).contains(h)) {
                f.push(this.getNode(g[a]))
            }
        }
    }
    return f
}, deleteTreeNode: function (p) {
    var b;
    if ($type(p) == "hash") {
        b = this.getTreeNode(p)
    } else {
        b = p
    }
    if ($defined(b)) {
        var n = b.getPrevious("div[leaftype!='-1']");
        var q = b.getNext("div[leaftype!='-1']");
        var h = b.getParent("div[leaftype='0']");
        var j = b.hasClass(this.options.treeStyle.treeNodeLast);
        if (this.current == b) {
            this.current = null;
            this.targetNode = null
        }
        b.destroy();
        if (j) {
            if ($defined(n)) {
                n.addClass(this.options.treeStyle.treeNodeLast)
            } else {
                if (!$defined(q)) {
                    if ($defined(h)) {
                        var l = h.getFirst("span[type='wrapperSpan']");
                        var k = l.getFirst("span[type='gadGetSpan']");
                        var f = l.getFirst("span[type='iconSpan']");
                        k.removeClass(this.options.treeStyle.treeGadGetMinus);
                        k.removeClass(this.options.treeStyle.treeGadGetPlus);
                        k.addClass(this.options.treeStyle.treeGadGetNone);
                        f.removeClass(this.options.treeStyle.treeLeafIcon);
                        f.removeClass(this.options.treeStyle.treeOpenIcon);
                        f.addClass(this.options.treeStyle.treeCloseIcon);
                        h.setProperty("leaftype", "1");
                        var c = h.getFirst("div");
                        c.destroy()
                    }
                }
            }
        }
        if (this.options.treeType == "1") {
            if ($defined(h)) {
                var l = h.getFirst("span[type='wrapperSpan']");
                var a = l.getFirst("span[type='checkSpan']");
                if (a.hasClass(this.options.treeStyle.treeNodeHalfChecked)) {
                    var j = h.getFirst("div[leaftype='-1']");
                    var g = false;
                    if ($defined(j)) {
                        var o = h.getFirst("div[leaftype='-1']").getChildren("div");
                        g = o.some(function (r) {
                            return r.get(this.options.checkSign) != "true"
                        }, this)
                    }
                    if (!g) {
                        var m = this.getCheckedState(a);
                        this.checkedClick(h, m, true)
                    }
                }
            }
        }
    }
}, findNodeByPath: function (f) {
    var a;
    this.foundNode = null;
    if ($type(f) == "hash") {
        var q = f.get(this.options.cascadeSign.id);
        var p = q.split(",");
        if (p.length == 0) {
            var n = new Hash();
            n.set(this.options.cascadeSign.id, p[0]);
            a = this.getTreeNode(n);
            if (a == null) {
                this.extendTreeNodeUtilFindNode(n);
                a = this.foundNode
            }
        } else {
            if (p.length > 0) {
                for (var l = 0; l < p.length; l++) {
                    this.func4findNodeByPath(p[l])
                }
                a = this.foundNode
            }
        }
    }
    var g = a;
    if ($defined(a)) {
        var m = this.getSpan(a);
        var j = m.displaySpan;
        if ($defined(this.targetNode)) {
            this.targetNode.removeClass(this.options.treeStyle.treeHighlighter)
        }
        j.addClass(this.options.treeStyle.treeHighlighter);
        this.targetNode = j;
        this.current = a;
        var o = a.getParent("div[leaftype='0']");
        var h = a;
        for (var c = a.get("depth").toInt(); c >= 0; c--) {
            o = a.getParent("div[leaftype='0']");
            if ($defined(o)) {
                var k = this.getSpan(o).gadGetSpan;
                if (k.hasClass(this.options.treeStyle.treeGadGetPlus)) {
                    this.extend(o)
                }
                a = o
            } else {
                break
            }
        }
        var b = new Fx.Scroll(this.container, {duration: 10}).toElement(h)
    }
    return g
}, func4findNodeByPath: function (j) {
    var b = this.options.cascadeSign.id;
    var h = new Hash();
    h.set(b, j);
    if (this.getTreeNode(h, this.foundNode) != null) {
        this.foundNode = this.getTreeNode(h, this.foundNode)
    } else {
        if ($chk(this.foundNode)) {
            var f = this.foundNode;
            if (this.dom4nodeHash.has(f.get(b)) && f.getElements("div[" + b + "]").length == 0 && this.dom4nodeHash.get(f.get(b)).hasChildNodes()) {
                var g = this.nodeEnum("div");
                g.setProperty("leaftype", "-1");
                g.setStyle("display", "none");
                g.addClass(this.options.treeStyle.treeChildren);
                f.grab(g);
                var a = this.dom4nodeHash.get(f.get(b)).getChildNodes();
                for (var c = 0; c < a.length; c++) {
                    g.grab(this.createOneLeaveNode(g, a[c], f.get("depth").toInt()))
                }
                if (this.getTreeNode(h, f) != null) {
                    this.foundNode = this.getTreeNode(h, f)
                }
            }
        } else {
            this.extendTreeNodeUtilFindNode(h)
        }
    }
}, findTreeNode: function (m) {
    var a;
    if ($type(m) == "hash") {
        a = this.getTreeNode(m);
        if (a == null && this.options.dataType == "xml") {
            this.extendTreeNodeUtilFindNode(m);
            a = this.foundNode
        }
    } else {
        a = m
    }
    var f = a;
    if ($defined(a)) {
        var k = this.getSpan(a);
        var h = k.displaySpan;
        if ($defined(this.targetNode)) {
            this.targetNode.removeClass(this.options.treeStyle.treeHighlighter)
        }
        h.addClass(this.options.treeStyle.treeHighlighter);
        this.targetNode = h;
        this.current = a;
        var l = a.getParent("div[leaftype='0']");
        var g = a;
        for (var c = a.get("depth").toInt(); c >= 0; c--) {
            l = a.getParent("div[leaftype='0']");
            if ($defined(l)) {
                var j = this.getSpan(l).gadGetSpan;
                if (j.hasClass(this.options.treeStyle.treeGadGetPlus)) {
                    this.extend(l)
                }
                a = l
            } else {
                break
            }
        }
        var b = new Fx.Scroll(this.container, {duration: 10}).toElement(g)
    }
    return f
}, hiddenAllTreeNodes: function () {
    var a = this.container.getElements("div[leaftype!='-1']") || [];
    a.each(function (c, b) {
        c.addClass(this.options.treeStyle.treeFilterHidden)
    }.bind(this))
}, filterTreeNodes: function (a) {
    this.hiddenAllTreeNodes();
    a.each(function (g, b) {
        g.removeClass(this.options.treeStyle.treeFilterHidden);
        for (var f = g.get("depth").toInt(); f >= 0; f--) {
            var c = g.getParent("div[leaftype='0']");
            if ($defined(c)) {
                c.removeClass(this.options.treeStyle.treeFilterHidden);
                g = c
            } else {
                break
            }
        }
    }.bind(this))
}, removeTreeFilterHiddenClass: function () {
    var a = this.container.getElements("div[leaftype!='-1']") || [];
    a.each(function (c, b) {
        c.removeClass(this.options.treeStyle.treeFilterHidden)
    }.bind(this))
}, getSpan: function (g, f) {
    if (g) {
        var h = g.getFirst("span[type='wrapperSpan']");
        var c;
        if ($defined(h)) {
            if ($defined(f)) {
                c = h.getFirst("span[type='" + f + "']");
                return c
            } else {
                var b = h.getFirst("span[type='displaySpan']");
                var k = h.getFirst("span[type='gadGetSpan']");
                var a = h.getFirst("span[type='iconSpan']");
                var j = {gadGetSpan: k, iconSpan: a, displaySpan: b};
                return j
            }
        } else {
            return null
        }
    }
}, getRoot: function (b) {
    var a = b.getParents("div[leaftype='root']");
    if ($chk(a)) {
        return a[0]
    } else {
        return null
    }
}, getChildNode: function (b, g) {
    var a;
    if ($type(g) != "hash") {
        a = new Hash(g)
    } else {
        a = g
    }
    var f = "";
    a.getKeys().each(function (j) {
        f = "[" + j + "='" + a.get(j) + "']"
    });
    var h = b.getElements("div[leaftype!='-1']" + f);
    var c = null;
    if (h.length > 0) {
        c = h[0]
    }
    return c
}, loadCSS: function (b, c, a) {
    return new Element("link", $merge({rel: "stylesheet", media: "screen", type: "text/css", href: c}, a)).inject(b)
}, getAllChecked: function (k, a, b, c) {
    var h = "div[ischecked='true']";
    if (c) {
        h += c
    }
    if ($chk(a)) {
        if (a == 1) {
            h = h + "[leaftype='1']"
        }
        if (a == 0) {
            h = h + "[leaftype='0']"
        }
    }
    var g = this.container.getElements(h);
    var j = "";
    if ($chk(k)) {
        if (!$defined(b)) {
            b = ","
        }
        var l = [];
        if (k.contains("|")) {
            l = k.split("|")
        }
        var f = l.length;
        g.each(function (n, m) {
            if (f > 0) {
                l.each(function (o, p) {
                    j = j + n.get(o) + "|"
                });
                j = j.substring(0, j.length - 1);
                j = j + b
            } else {
                j = j + n.get(k) + b
            }
        }.bind(this));
        if (g.length > 0) {
            j = j.substring(0, j.length - b.length)
        }
    }
    return j
}, getAllNode: function (c, b, a, g) {
    var k = "div[leaftype!='-1']";
    if ($chk(b)) {
        if (b == 1) {
            k = k + "[leaftype='1']"
        }
        if (b == 0) {
            k = k + "[leaftype='0']"
        }
    }
    var j = this.container.getElements(k);
    var h = "";
    if ($chk(c)) {
        if (!$defined(a)) {
            a = ","
        }
        if (!$defined(g)) {
            g = "[@]"
        }
        var f = [];
        if ($type(c) == "array") {
            f.combine(c)
        } else {
            f.include(c)
        }
        j.each(function (n, l) {
            for (var m = 0; m < f.length - 1; m++) {
                h += n.get(f[m]) + a
            }
            h += n.get(f[m]);
            h += g
        }.bind(this));
        if (j.length > 0) {
            h = h.substring(0, h.length - g.length)
        }
    } else {
        return j
    }
    return h
}, getAllCheckedList: function (a, b) {
    var f = "div[ischecked='true']";
    if (b) {
        f += b
    }
    if ($chk(a)) {
        if (a == 1) {
            f = f + "[leaftype='1']"
        }
        if (a == 0) {
            f = f + "[leaftype='0']"
        }
    }
    var c = this.container.getElements(f);
    return c
}, isParent: function (g, c) {
    var b = false;
    var f = g.get("depth").toInt() - 1;
    for (var a = f; a > 0; a--) {
        if (c == g.getParent("div[leaftype!='-1'][depth=" + a + "]")) {
            b = true;
            break
        }
    }
    return b
}, setCheckedList: function (a) {
    if ($defined(a) && $type(a) == "array") {
        a.each(function (b) {
            if ($defined(b)) {
                b.setProperty("ischecked", "true")
            }
        });
        this.initCheckedTree()
    }
}, setHalfOrCheckedList: function (b, a) {
    if ($defined(b) && $type(b) == "array") {
        b.each(function (f) {
            if ($defined(f)) {
                f.setProperty("ischecked", "true");
                var g = this.getSpan(f, "checkSpan");
                var c = this.getCheckedState(g);
                this.checkedClick(f, c, true, a)
            }
        }.bind(this))
    }
}, close: function () {
    var a = this.container.getElements("div[leaftype!='-1']") || [];
    a.each(function (g, c) {
        var h = g.get("depth");
        if ($chk(h) && h >= this.options.extendLayer) {
            var f = this.getSpan(g, "iconSpan");
            if ($defined(f) && f.hasClass(this.options.treeStyle.treeOpenIcon) && g.get("leaftype") == "0") {
                this.setSpanClass(g, "gadGetSpan", this.options.treeStyle.treeGadGetPlus);
                this.setSpanClass(g, "iconSpan", this.options.treeStyle.treeLeafIcon)
            }
            var b = g.getFirst("div[leaftype='-1']");
            if ($defined(b)) {
                b.setStyle("display", "none")
            }
        }
    }.bind(this));
    this.unSelectNode()
}, appendRootNode: function (b) {
    var f = new SwordTree.JSONIterator(JSON.decode(b));
    var g = new Element("div");
    g.addClass(this.options.treeStyle.treeChildren);
    g.setStyle("display", "block");
    g.setProperty("leaftype", "-1");
    var a = this.createNode(g, f, -1);
    if (this.container.getFirst("div[leaftype='-1']").getFirst("div")) {
        a.setProperty("leaftype", "0")
    }
    this.container.getFirst("div[leaftype='-1']").addClass(this.options.treeStyle.treeChildren);
    a.grab(this.container.getFirst("div[leaftype='-1']"));
    g.grab(a);
    this.setSpanClass(this.getSpan(a, "gadGetSpan"), "gadGetSpan", this.options.treeStyle.treeGadGetMinus);
    var c = this.getSpan(a, "gadGetSpan");
    if (c.hasClass(this.options.treeStyle.treeGadGetPlus)) {
        this.setSpanClass(this.getSpan(a, "iconSpan"), "iconSpan", this.options.treeStyle.treeLeafIcon)
    } else {
        this.setSpanClass(this.getSpan(a, "iconSpan"), "iconSpan", this.options.treeStyle.treeOpenIcon)
    }
    this.container.grab(g)
}, getCheckedRadio: function () {
    var a = this.container.getElement("input[type='radio'][name='radio'][checked]");
    var b;
    if (a) {
        b = a.getParent("span").getParent("div")
    }
    return b
}, getRootNode: function () {
    var a = this.container.getElement("div[leaftype='-1']");
    if (a) {
        a = this.container.getElement("div[leaftype='-1']").getElement("div[leaftype!='-1']")
    } else {
        a = null
    }
    return a
}, clearCheckedStatus: function () {
    if (this.options.treeType == 1) {
        var a = this.container.getElements("div[ischecked='true']") || [];
        a.set("ischecked", "false");
        var c = this.container.getElements("span." + this.options.treeStyle.treeNodeChecked + "[type='checkSpan']") || [];
        c.removeClass(this.options.treeStyle.treeNodeChecked);
        c.addClass(this.options.treeStyle.treeNodeUnchecked);
        var b = this.container.getElements("span." + this.options.treeStyle.treeNodeHalfChecked + "[type='checkSpan']") || [];
        b.removeClass(this.options.treeStyle.treeNodeHalfChecked);
        b.addClass(this.options.treeStyle.treeNodeUnchecked)
    }
}, setNodeChecked: function (a) {
    if (this.options.treeType == "1" && $defined(a) && $type(a) == "array") {
        a.each(function (b) {
            b.setProperty("ischecked", "true");
            var c = this.getSpan(b, "checkSpan");
            c.removeClass(this.options.treeStyle.treeNodeUnchecked);
            c.removeClass(this.options.treeStyle.treeNodeHalfChecked);
            c.removeClass(this.options.treeStyle.treeNodeChecked);
            c.addClass(this.options.treeStyle.treeNodeChecked)
        }.bind(this))
    }
}, getNodeCheckedStatus: function (a) {
    if (this.options.treeType == "1") {
        var b = this.getSpan(a, "checkSpan");
        return this.getCheckedState(b)
    }
}});
SwordTree.Container = {id: null, mouseNode: null, containerDraw: new Hash()};
SwordTree.Iterator = new Class({$family: {name: "SwordTree.Iterator"}, node: $empty, iterator: $empty, lastSign: true, dataDetph: 0, domainData: [], initialize: function (a, b) {
    this.iterator(a);
    if ($defined(b)) {
        this.dataDepth = b
    }
}, hasChildNodes: $lambda(false), isLast: $lambda(true), getAttributes: $empty, getAttribute: $empty, getChildNodes: $empty, setParentSign: function (a, b) {
    SwordTree.Iterator.code = a;
    SwordTree.Iterator.pcode = b
}});
SwordTree.Iterator.newInstance = function (f, b, c) {
    var a = null;
    SwordTree.Iterator.treeNodeNum = 0;
    if ($chk(b) && "json".test(b.trim(), "i")) {
        a = new SwordTree.JSONIterator(f || {}, 0)
    } else {
        if ($chk(b) && "jsonAptitude".test(b.trim(), "i")) {
            var g = [];
            if ($defined(f) && $defined(f.data)) {
                g = f.data
            } else {
                return null
            }
            a = new SwordTree.JSONAptitudeIterator(g, 0);
            a.setDomainData(g);
            a.setParentSign(c.id, c.pid, f)
        } else {
            a = new SwordTree.XMLIterator(f, 0)
        }
    }
    return a
};
SwordTree.XMLIterator = new Class({Extends: SwordTree.Iterator, setLastSign: function (a) {
    this.lastSign = a
}, iterator: function (a) {
    this.node = a
}, hasChildNodes: function () {
    return this.node.hasChildNodes()
}, getChildNodes: function () {
    var b = new Array();
    this.dataDepth++;
    for (var a = 0; a < this.node.childNodes.length; a++) {
        if ((/[^\t\n\r ]/.test(this.node.childNodes[a].data))) {
            var c = new SwordTree.XMLIterator(this.node.childNodes[a], this.dataDepth);
            c.setLastSign(false);
            b.push(c)
        }
    }
    if (b.length > 0) {
        b[b.length - 1].setLastSign(true)
    }
    return b
}, getAttributes: function () {
    return this.node.attributes
}, getAttribute: function (a) {
    return this.node.getAttribute(a)
}, isLast: function () {
    if (this.node.parentNode == null || this.node.parentNode.nodeName == "#document" || this.lastSign) {
        return true
    }
    return false
}});
SwordTree.JSONIterator = new Class({Extends: SwordTree.Iterator, attributes: [], iterator: function (a) {
    this.node = new Hash(a)
}, setLastSign: function (a) {
    this.lastSign = a
}, hasChildNodes: function () {
    var a = false;
    a = this.node.some(function (c, b) {
        return $type(c) == "array" || $type(c) == "object"
    });
    return a
}, getChildNodes: function () {
    var a = new Array();
    this.dataDepth++;
    this.node.getKeys().each(function (f, b) {
        if ($type(this.node.get(f)) == "array") {
            this.node.get(f).each(function (h) {
                var g = new SwordTree.JSONIterator(h, this.dataDepth);
                g.setLastSign(false);
                a.push(g)
            }.bind(this))
        } else {
            if ($type(this.node.get(f)) == "object") {
                var c = new SwordTree.JSONIterator(this.node.get(f), this.dataDepth);
                c.setLastSign(false);
                a.push(c)
            }
        }
    }.bind(this));
    if (a.length > 0) {
        a[a.length - 1].setLastSign(true)
    }
    return a
}, getAttributes: function () {
    if (this.attributes.length != 0) {
        return this.attributes
    }
    var a = new Array();
    this.node.getKeys().each(function (b) {
        switch ($type(this.node.get(b))) {
            case"string":
            case"number":
            case"boolean":
                a.push({nodeName: b, nodeValue: this.node.get(b)});
            case false:
                return null
        }
    }.bind(this));
    this.attributes = a;
    return a
}, getAttribute: function (a) {
    if ($defined(this.node)) {
        return this.node.get(a)
    } else {
        return null
    }
}, isLast: function () {
    return this.lastSign
}});
SwordTree.JSONAptitudeIterator = new Class({Extends: SwordTree.Iterator, current: null, iterator: function (a) {
    this.node = a
}, setLastSign: function (a) {
    this.lastSign = a
}, hasChildNodes: function () {
    var a = SwordTree.Iterator.pcode;
    var b = SwordTree.Iterator.code;
    if (this.dataDepth == 0) {
        return this.domainData.length > 0
    } else {
        var c = this.node[b] || this.node[b.toUpperCase()];
        return this.domainData.some(function (f) {
            return(f[a] || f[a.toUpperCase()]) == c && (f[b] || f[b.toUpperCase()]) != c
        }, this)
    }
}, setDomainData: function (a) {
    this.domainData = a
}, getChildNodes: function (f) {
    var n = SwordTree.Iterator.pcode;
    var c = SwordTree.Iterator.code;
    var m = new Array();
    if (this.dataDepth == 0) {
        this.dataDepth++;
        if ($defined(this.domainData) && this.domainData.length > 0) {
            for (var k = 0; k < this.domainData.length; k++) {
                var o = true;
                if (f != null) {
                    var b = this.domainData[k][n] || this.domainData[k][n.toUpperCase()];
                    if (f == "null") {
                        o = b == "null" || b == null
                    } else {
                        o = b == f
                    }
                } else {
                    for (var g = 0; g < this.domainData.length; g++) {
                        if ((this.domainData[k][n] || this.domainData[k][n.toUpperCase()]) == (this.domainData[g][c] || this.domainData[g][c.toUpperCase()]) && k != g) {
                            o = false;
                            break
                        }
                    }
                }
                if (o) {
                    var h = new SwordTree.JSONAptitudeIterator(this.domainData[k], this.dataDepth);
                    h.setLastSign(false);
                    m.push(h);
                    h.setDomainData(this.domainData)
                }
            }
        }
    } else {
        if ($defined(this.domainData) && this.domainData.length > 0) {
            for (var k = 0; k < this.domainData.length; k++) {
                var a = (this.domainData[k][n] || this.domainData[k][n.toUpperCase()]);
                var l = (this.domainData[k][c] || this.domainData[k][c.toUpperCase()]);
                var q = (this.node[c] || this.node[c.toUpperCase()]);
                if (a == q && l != q) {
                    var h = new SwordTree.JSONAptitudeIterator(this.domainData[k], this.dataDepth);
                    h.setLastSign(false);
                    m.push(h);
                    this.domainData.splice(k, 1);
                    h.setDomainData(this.domainData);
                    k--
                }
            }
        }
        this.dataDepth++
    }
    if (m.length > 0) {
        m[m.length - 1].setLastSign(true)
    }
    return m
}, getAttributes: function () {
    var b = new Array();
    var a = new Hash(this.node);
    a.getKeys().each(function (c) {
        switch ($type(a.get(c))) {
            case"string":
            case"number":
            case"boolean":
                b.push({nodeName: c, nodeValue: a.get(c)});
            case false:
                return null
        }
    });
    return b
}, getAttribute: function (a) {
    if ($defined(this.node)) {
        return this.node[a] || this.node[a.toUpperCase()]
    } else {
        return null
    }
}, isLast: function () {
    return this.lastSign
}});
SwordTree.Select = new Class({$family: {name: "SwordTree.Select"}, Implements: [Options, Events], findNodes: [], showIndex: 0, isBuild: false, leaveSign: null, options: {treeStyle: {treeSelectWrap: "swordform_field_wrap swordtree_wrap", treeSelectSelimg: "tree-select-selimg", treeSelectSelimgOver: "tree-select-selimg-over", treeSelectSelimgClick: "tree-select-selimg-click", treeSelectList: "tree-select-list", treeSelectListInner: "tree-select-list-inner", treeSelectConsole: "tree-select-console"}, formSubSign: "swordform_item_oprate swordform_item_input"}, initialize: function (b, a, c) {
    this.setOptions(b);
    this.swordTree = a;
    if (!this.swordTree.options.ltid && !this.swordTree.options.lctrl && this.swordTree.options.cacheLazy != "true") {
        this.options.lazySelect = "false"
    }
    this.$events = $merge(this.$events, this.swordTree.$events)
}, setValidate: function (a) {
    this.validate = a
}, build: function (a) {
    var b = this.drawSelDiv(a);
    this.initEvent();
    if (this.options.initDataFlag == "true") {
        this.buildTree()
    }
    return b
}, boxtd: null, imgtd: null, divTable: null, drawSelDiv: function (a) {
    this.divTable = Sword.utils.createTable(this, true, true).addClass("swordtree_wrap");
    a.grab(this.divTable);
    var g = new Element("div", {"class": this.options.treeStyle.treeSelectListInner});
    g.set("id", a.get("id"));
    this.listDiv = new Element("div", {"class": this.options.treeStyle.treeSelectList}).inject(document.body);
    this.listDiv.grab(g);
    if (this.options.treeType == "1") {
        var b = new Element("div", {"class": this.options.treeStyle.treeSelectConsole});
        this.console = b;
        if (this.swordTree.options.isHideBtn == "true") {
            this.console.setStyle("display", "none")
        }
        var c = new Element("button");
        this.btnOk = c;
        c.set("html", "确定");
        Sword.utils.btn.init(c);
        var f = new Element("button");
        this.btnCancel = f;
        f.set("html", "关闭");
        Sword.utils.btn.init(f);
        b.grab(c);
        b.grab(f);
        this.listDiv.grab(b)
    }
    this.selBox = new Element("input", {type: "text", swordType: "tree", rule: this.options.rule, name: a.get("name"), display: "true", realvalue: "", widget: "tree", evnSign: "true", widgetGetValue: "true", disabled: (this.options.selReadOnly == "true" || this.options.disable == "true"), styles: {"float": "left", cursor: "text"}, "class": this.options.formSubSign}).inject(this.boxtd);
    this.storeTid();
    this.selBox.store("widgetObj", this);
    this.selDiv = this.imgtd;
    this.selDiv.addClass(this.options.treeStyle.treeSelectSelimg);
    if (this.options.selReadOnly == "true" || this.options.disable == "true") {
        this.selBox.setStyle("cursor", "default")
    }
    if (this.options.disable == "true") {
        this.disable(this.selBox)
    }
    this.selDiv.set({events: {mouseover: function (h) {
        Event(h).target.addClass(this.options.treeStyle.treeSelectSelimgOver)
    }.bind(this), mouseout: function (h) {
        Event(h).target.removeClass(this.options.treeStyle.treeSelectSelimgOver)
    }.bind(this)}});
    a.set({id: "", name: ""});
    this.treeDiv = g;
    return g
}, initEvent: function () {
    window.document.addEvent("click", function (b) {
        if (this.showByJs == true) {
            this.showByJs = false;
            return
        }
        var a = b.target;
        while (a.parentNode && a != this.selBox && a != this.selDiv && a != this.listDiv) {
            a = a.parentNode
        }
        if (a != this.selBox && a != this.selDiv && a != this.listDiv && this.selBox) {
            if (this.selBox.get("display") == "false") {
                this.hide()
            }
        }
    }.bind(this));
    this.selBox.addEvent("focus", function (c) {
        if (this.swordTree.inGrid == true) {
            var b = c.target.getParent("div.sGrid_data_row_item_div");
            this.fireEvent("onClickBefore", [
                {},
                b
            ])
        } else {
            this.fireEvent("onClickBefore")
        }
        this.clickBefore();
        this.selInput();
        if (Browser.Engine.trident) {
            var f = event.srcElement;
            if (f.get("tag") == "input") {
                var a = f.createTextRange();
                a.moveStart("character", f.value.length);
                a.collapse(true);
                a.select()
            }
        }
    }.bind(this));
    this.selBox.addEvent("blur", this.selectBlur.bind(this));
    this.selDiv.addEvent("click", function () {
        this.fireEvent("onClickBefore");
        this.clickBefore();
        this.leaveSign = false;
        this.selInput()
    }.bind(this));
    this.listDiv.addEvent("mouseenter", this.mouseenter.bind(this));
    this.listDiv.addEvent("mouseleave", this.mouseleave.bind(this));
    this.swordTree.addEvent("onNodeClick", this.getSelectedNode.bind(this));
    if (this.options.treeType == "1") {
        this.btnOk.addEvent("click", function () {
            if (this.swordTree.options.selectrule == "leaf") {
                this.selBox.set("value", this.swordTree.getAllChecked(this.options.displayTag, 1));
                if (this.options.selectRealKey == "code") {
                    this.setRealValue(this.swordTree.getAllChecked(this.options.cascadeSign.id, 1))
                } else {
                    this.setRealValue(this.swordTree.getAllChecked(this.options.selectRealKey, 1))
                }
            } else {
                this.selBox.set("value", this.swordTree.getAllChecked(this.options.displayTag));
                if (this.options.selectRealKey == "code") {
                    this.setRealValue(this.swordTree.getAllChecked(this.options.cascadeSign.id))
                } else {
                    this.setRealValue(this.swordTree.getAllChecked(this.options.selectRealKey))
                }
            }
            this.tempCheckList = this.swordTree.getAllCheckedList();
            this.selInput();
            this.fireEvent("onSelectBtnOk", this.selBox)
        }.bind(this));
        this.btnCancel.addEvent("click", function () {
            this.selInput();
            this.fireEvent("onSelectBtnCancel")
        }.bind(this))
    }
    this.selBox.addEvent("keyup", function (a) {
        this.keyDown(a)
    }.bind(this))
}, clickBefore: function (c) {
    var b = c || this.selBox.get("codePath");
    if (b) {
        if (!$chk(c)) {
            this.show();
            this.hide()
        }
        var a = new Hash();
        b = c || this.selBox.get("codePath");
        a.set(this.options.cascadeSign.id, b.split(","));
        this.swordTree.builder.draw.extendNodeByIdPath(a);
        this.selBox.set("codePath", "")
    }
}, processValueChange: function (b) {
    if (this.options.lazySelect == "true" && ($chk(this.options.qtid) || $chk(this.options.qctrl))) {
        this.hide();
        this.emptyTid();
        if (b == "") {
            this.retrieveTid();
            this.swordTree.options.dataStr = ""
        } else {
            if (b.length >= this.swordTree.options.qlength) {
                var c = {inputValue: b};
                this.swordTree.options.dataStr = this.queryData(c)
            }
        }
        this.isBuild = false;
        this.show();
        this.findTreeNode()
    } else {
        var a = this.swordTree.options.filterSign;
        this.swordTree.options.filterSign = "all";
        this.swordTree.builder.draw.options.filterSign = "all";
        this.findTreeNodes(this.swordTree.options.filterSign);
        this.swordTree.options.filterSign = a;
        this.swordTree.builder.draw.options.filterSign = a
    }
}, mouseenter: function () {
    this.leaveSign = true
}, mouseleave: function () {
    this.leaveSign = false
}, keyDown: function (f) {
    switch (f.code) {
        case 8:
            var a = this.getValue() == null ? "" : this.getValue();
            var g = f.target.value;
            if (a != g) {
                this.fireEvent("onSelectChange", [g, a])
            }
            this.setRealValue("");
            this.selBox.value = "";
            if (this.options.treeType == "1") {
                var b = this.swordTree;
                b.clearCheckedStatus()
            }
            this.processValueChange(f.target.value);
            break;
        case 13:
            var c = this.swordTree.getSelectedNode();
            if ($defined(c)) {
                this.fireEvent("onNodeClick", c)
            }
            this.getSelectedNode();
            break;
        case 40:
            if (this.findNodes.length > 0) {
                if ((this.showIndex + 1) == this.findNodes.length) {
                    this.showIndex = 0
                } else {
                    ++this.showIndex
                }
                this.swordTree.findTreeNode(this.findNodes[this.showIndex])
            }
            break;
        case 38:
            if (this.findNodes.length > 0) {
                if (this.showIndex == 0) {
                    this.showIndex = this.findNodes.length - 1
                } else {
                    --this.showIndex
                }
                this.swordTree.findTreeNode(this.findNodes[this.showIndex])
            }
            break;
        default:
            if (f.target.originValue == f.target.value) {
                return
            }
            f.target.set("originValue", f.target.value);
            this.processValueChange(f.target.value);
            break
    }
}, getSelectedNode: function () {
    var c = this.swordTree.getSelectedNode();
    if ($defined(c)) {
        var f = false;
        var b = this.swordTree.options.onNodeClickBefore;
        var a = null;
        if ($defined(b)) {
            var g = this.getFunc(b)[0](c, this.selBox);
            if (g == true) {
                f = true
            } else {
                if ($type(g) == "string") {
                    a = g;
                    f = true
                }
            }
        } else {
            if (!$defined(b) && !f) {
                if ((this.swordTree.options.selectrule == "leaf" && c.get("leaftype") == 1) || (this.swordTree.options.selectrule == "all")) {
                    f = true
                }
            }
        }
        if (f) {
            if (this.swordTree.options.treeType == 1) {
                return
            }
            this.setSelectedNode(c, a)
        } else {
            this.swordTree.builder.draw.extend(c)
        }
    }
}, setSelectedNode: function (g, h) {
    if ($defined(g)) {
        if ($type(g) == "array" && g.length >= 1) {
            var f = [], a = [];
            g.each(function (o) {
                f.include(o.get(this.swordTree.options.selectRealKey) || "");
                a.include(o.get(this.swordTree.options.displayTag) || "")
            }.bind(this));
            this.setValue(a.join(","));
            this.setRealValue(f.join(","));
            this.tempCheckList = g;
            this.selInput();
            this.selInput()
        } else {
            g = $$(g);
            var l = g.get(this.swordTree.options.displayTag);
            if (this.swordTree.options.selectRealKey == "code") {
                var b = this.getValue();
                var c = g.get(this.swordTree.options.selectRealKey);
                if (b != c) {
                    this.fireEvent("onSelectChange", [c, b])
                }
                this.setRealValue(c);
                if (g.length == 0) {
                    this.swordTree.clearCheckedStatus()
                }
            } else {
                var n = [];
                var m = this.swordTree.options.selectRealKey;
                if (m.contains("|")) {
                    n = m.split("|")
                }
                var j = n.length;
                var k = "";
                if (j > 0) {
                    n.each(function (p, o) {
                        k = k + g.get(p) + "|"
                    });
                    k = k.substring(0, k.length - 1);
                    var b = this.getValue();
                    var c = k;
                    if (b != c) {
                        this.fireEvent("onSelectChange", [c, b])
                    }
                    this.setRealValue(k)
                } else {
                    var b = this.getValue();
                    var c = g.get(m);
                    if (b != c) {
                        this.fireEvent("onSelectChange", [c, b])
                    }
                    this.setRealValue(c)
                }
            }
            this.tempCheckList = g;
            this.selBox.value = l;
            this.selBox.value = (h == null) ? l : h;
            this.selBox.store("treeData", g.retrieve("data"));
            this.hide();
            this.swordTree.unSelectNode()
        }
    }
}, findTreeNode: function (b) {
    if (this.selBox.get("display") == "true") {
        this.show()
    }
    var c = new Hash();
    if ($defined(b)) {
        if (b == "caption") {
            c.set(this.swordTree.options.displayTag, this.selBox.value)
        } else {
            if (b == "code") {
                c.set(this.swordTree.options.cascadeSign.id, this.selBox.get("realvalue"))
            } else {
                c.set(b, this.selBox.value)
            }
        }
    } else {
        c.set(this.swordTree.options.displayTag, this.selBox.value)
    }
    var a = this.swordTree.getLikeTreeNodeNew(c);
    if (!$chk(this.selBox.get("realvalue")) && a.length == 0) {
        this.clear()
    } else {
        if (a.length > 0) {
            this.swordTree.findTreeNode(a[0]);
            this.findNodes = a
        }
    }
}, findTreeNodes: function (b) {
    if (this.selBox.get("display") == "true") {
        this.show()
    }
    var c = new Hash();
    if ($defined(b)) {
        if (b == "caption") {
            c.set(this.swordTree.options.displayTag, this.selBox.value)
        } else {
            if (b == "code") {
                c.set(this.swordTree.options.cascadeSign.id, this.selBox.get("realvalue"))
            } else {
                c.set(b, this.selBox.value)
            }
        }
    } else {
        c.set(this.swordTree.options.displayTag, this.selBox.value)
    }
    var a = this.swordTree.getLikeTreeNodeNew(c);
    if (!$chk(this.selBox.get("realvalue")) && a.length == 0) {
        this.clear()
    } else {
        if (a.length > 0) {
            this.swordTree.findTreeNode(a[0]);
            this.findNodes = a;
            this.swordTree.filterTreeNodes(a)
        }
    }
}, selectBlur: function () {
    if (!this.leaveSign) {
        if (this.selBox.get("display") == "false") {
            this.hide()
        }
    }
}, selInput: function () {
    var h = this.selBox;
    var a = this.swordTree;
    if (h.get("display") == "false") {
        this.hide()
    } else {
        this.show();
        if ($chk(h.get("value"))) {
            if (a.options.treeType == 1) {
                var g = [];
                var b = [];
                var f = $splat(h.get("realvalue").split(","));
                f.each(function (k) {
                    var m = new Hash();
                    m.set(a.options.cascadeSign.id, k);
                    var j = a.getTreeNode(m);
                    if ($chk(j)) {
                        g.include(j)
                    } else {
                        var l = h.get("checkPath").split("|");
                        l.each(function (r) {
                            var n = r.split(",");
                            var q = new Hash();
                            q.set(a.options.cascadeSign.id, n[0]);
                            var o = a.getTreeNode(q);
                            b.include(o)
                        })
                    }
                    a.clearCheckedStatus();
                    if (g.length != 0) {
                        a.setHalfOrCheckedList(g)
                    }
                    if (b.length != 0) {
                        a.setHalfOrCheckedList(b, true)
                    }
                })
            } else {
                if (this.options.lazySelect == "true" && !h.get("originValue") && ($chk(this.options.qtid) || $chk(this.options.qctrl))) {
                    this.hide();
                    this.emptyTid();
                    var c = {inputValue: h.get("value")};
                    a.options.dataStr = this.queryData(c);
                    this.isBuild = false
                }
                this.findTreeNode(a.options.filterSign)
            }
        }
        this.fireEvent("onSelectShow")
    }
}, emptyTid: function () {
    this.swordTree.options.tid = "";
    this.swordTree.options.ltid = "";
    this.swordTree.options.ctrl = "";
    this.swordTree.options.lctrl = ""
}, storeTid: function () {
    this.selBox.store("tid", this.swordTree.options.tid);
    this.selBox.store("ltid", this.swordTree.options.ltid);
    this.selBox.store("cacheLazy", this.swordTree.options.cacheLazy);
    this.selBox.store("ctrl", this.swordTree.options.ctrl);
    this.selBox.store("lctrl", this.swordTree.options.lctrl)
}, retrieveTid: function () {
    this.swordTree.options.tid = this.selBox.retrieve("tid");
    this.swordTree.options.ltid = this.selBox.retrieve("ltid");
    this.swordTree.options.cacheLazy = this.selBox.retrieve("cacheLazy");
    this.swordTree.options.ctrl = this.selBox.retrieve("ctrl");
    this.swordTree.options.lctrl = this.selBox.retrieve("lctrl")
}, buildTree: function () {
    if (!this.isBuild) {
        if (this.swordTree.exTreeDataFunc && !$chk(this.swordTree.options.dataStr) && !$chk(this.swordTree.options.tid) && !$chk(this.swordTree.options.ctrl)) {
            if (this.swordTree.options.cacheLazy == "true") {
                this.swordTree.options.cacheDataStr = this.swordTree.exTreeDataFunc();
                var a = this.selBox.get("realvalue");
                if ($chk(a)) {
                    this.swordTree.cacheTreeCodePath(a, this.swordTree.options.cacheDataStr, this.selBox)
                }
                this.swordTree.options.dataStr = this.swordTree.cacheTreeDataFunc(this.swordTree.options.treeContainerName, this.swordTree.options.cacheDataStr)
            } else {
                this.swordTree.options.dataStr = this.swordTree.exTreeDataFunc()
            }
        }
        this.swordTree.container = this.treeDiv;
        this.swordTree.builder = new SwordTree.Builder(this.treeDiv, this.swordTree.options, this.swordTree.$events);
        this.swordTree.builder.build(this.swordTree);
        this.isBuild = true
    }
}, show: function () {
    this.buildTree();
    if (this.selBox.getWidth() == 0) {
        return
    }
    this.listDiv.setStyles({width: $chk(this.options.width) ? this.options.width : this.selBox.getWidth() + 15});
    xyposition(this.selBox, this.listDiv);
    this.listDiv.setStyle("display", "block");
    this.listDiv.fade("in");
    this.selBox.set("display", "false")
}, hide: function () {
    this.listDiv.setStyles({left: "-500px", top: "-500px"});
    this.listDiv.setStyle("display", "none");
    this.listDiv.fade("out");
    this.selBox.set("display", "true");
    var b = this.swordTree.getSelectedNode();
    this.tempCheckList = this.swordTree.getAllCheckedList();
    if ($chk(this.getCaption()) && $defined(b) && ((this.swordTree.options.selectrule == "leaf" && b.get("leaftype") == 1) || (this.swordTree.options.selectrule == "all"))) {
        var a = b.get("caption");
        if (a.contains(this.getCaption())) {
            this.setRealValue(b.get("code"));
            this.setValue(a)
        }
    } else {
        if ((!$defined(b) && (this.swordTree.options.treeType == "1" && (!this.tempCheckList || (this.tempCheckList && this.tempCheckList.length == 0)))) || ($defined(b) && !$chk(this.getCaption()))) {
            this.setRealValue("");
            this.setValue("");
            this.swordTree.clearCheckedStatus()
        }
    }
    this.validateBox(this.selBox);
    this.fireEvent("onSelectHide", [this.selBox]);
    this.swordTree.removeTreeFilterHiddenClass()
}, clear: function () {
    this.selBox.realvalue = "";
    this.findNodes.empty();
    this.showIndex = 0;
    this.swordTree.close();
    this.swordTree.removeTreeFilterHiddenClass()
}, validateBox: function (a) {
    if ($chk(a.get("rule"))) {
        this.swordTree.validate.validate(a)
    }
}, setRealValue: function (a) {
    this.selBox.set("evnSign", "false");
    this.selBox.set("realvalue", a);
    this.selBox.set("evnSign", "true")
}, setValue: function (a) {
    this.selBox.set("evnSign", "false");
    this.selBox.set("value", a);
    this.selBox.set("evnSign", "true")
}, getValue: function (a) {
    return this.selBox.get("realvalue")
}, getCaption: function (a) {
    return this.selBox.get("value")
}, queryData: function (g) {
    var b;
    if ($chk(this.options.qtid) || $chk(this.options.qctrl)) {
        this.fireEvent("onQtidBefore", g);
        var f = new Hash();
        f.set("sword", "SwordTree");
        f.set("name", this.options.treeContainerName);
        f.set("loaddata", "widget");
        f.set("data", [g]);
        var a = new Hash();
        a.set("sword", "attr");
        a.set("name", "treeName");
        a.set("value", this.options.treeContainerName);
        var c = pageContainer.getReq({tid: this.options.qtid, ctrl: this.options.qctrl, widgets: [f, a]});
        pageContainer.postReq({req: c, async: false, onSuccess: function (h) {
            b = pc.getResData(this.options.treeContainerName, h)
        }.bind(this), onError: function (h) {
        }.bind(this)})
    }
    return b || {}
}, getBoxEl: function (a) {
    return a.getPrevious().getElement(".swordform_item_oprate")
}, getImgEl: function (a) {
    return a.getParent().getNext()
}, disable: function (b) {
    if ($defined(b)) {
        b.set("disabled", "true").addClass("tree_input_disable").setStyle("background-color", "");
        var a = this.getImgEl(b);
        if (b.cloneFlag) {
            a.setStyle("display", "");
            a.getNext().setStyle("display", "none")
        } else {
            a.clone().inject(a, "before").addClass("tree_selimg_disable");
            a.setStyle("display", "none");
            b.cloneFlag = true
        }
    }
}, enable: function (c) {
    if ($defined(c) && c.cloneFlag) {
        c.erase("disabled").removeClass("tree_input_disable");
        var a = this.getImgEl(c);
        if (c.cloneFlag) {
            a.setStyle("display", "none");
            a.getNext().setStyle("display", "")
        }
        var b = c.get("rule");
        if ($defined(b) && b.contains("must")) {
            c.setStyle("background-color", "#b5e3df")
        }
    }
}});
var SwordValidator = new Class({Implements: [Events, Options], options: {vType: "intime"}, initialize: function (a) {
    this.setOptions(a)
}, initParam: function (a) {
    if (!window.tooltips) {
        window.tooltips = pageContainer.create("SwordToolTips")
    }
    this.tooltips = window.tooltips;
    if ($chk(a)) {
        this.options.vType = a
    }
}, exeVal: true, activeV: function () {
    this.exeVal = true
}, cancelV: function () {
    this.exeVal = false
}, tooltips: null, _add: function (f) {
    var a = f.retrieve("upManager");
    if (a) {
        a.addEvent("onFileSuccess", function () {
            this.validate(f)
        }.bind(this))
    }
    if (this.options.vType == "intime") {
        f.addEvent("focus", function (h) {
            if (Browser.Engine.trident) {
                h.target.originValue = h.target.value
            }
            this.intimeValidate(h.target)
        }.bind(this));
        f.addEvent("blur", function (h) {
            this.intimeValidate(h.target);
            this.tooltips.hide()
        }.bind(this));
        if (Browser.Engine.trident) {
            f.attachEvent("onpropertychange", function (h) {
                if (f != document.activeElement) {
                    return
                }
                if (h.propertyName != "value") {
                    return
                }
                if (h.srcElement.originValue == h.srcElement.value) {
                    return
                }
                h.srcElement.originValue = h.srcElement.value;
                this.intimeValidate($(h.srcElement))
            }.bind(this))
        } else {
            f.addEventListener("input", function (h) {
                this.intimeValidate(h.target)
            }.bind(this), false)
        }
    } else {
        if (f.get("placeholder") != "true") {
            f.addEvent("blur", this.validate.bind(this))
        }
    }
    var g = f.get("rule").split("||"), b = true;
    for (var c = 0; c < g.length; c++) {
        if (g[c] != "number") {
            b = false;
            break
        }
    }
    if (b) {
        if (Browser.Engine.trident) {
            f.style.imeMode = "disabled"
        }
        f.addEvent((Browser.Engine.trident || Browser.Engine.webkit) ? "keydown" : "keypress", function (j) {
            var h = j.code;
            if ((h > 95 && h < 106) || (h > 47 && h < 58) || h == 110 || h == 190 || h == 189 || h == 107 || (j.shift && h == 187) || h == 107) {
                return true
            }
            if (Browser.Engines.gecko() && (h == 46 || h == 45 || h == 43)) {
                return true
            }
            return(h == 8 || h == 37 || h == 39 || (j.control && h == 86) || (j.shift && h == 36))
        }.bind(this))
    }
}, validate: function (f) {
    if (!this.exeVal) {
        return true
    }
    f = ($type(f) == "event") ? new Event(f).target : f;
    var b = "";
    var g = "";
    if (f.get("placeholder") == "true" && f.get("value") == f.get("defvalue")) {
        b = "true"
    } else {
        var c = this.doValidate(f);
        b = c.state;
        g = c.msg
    }
    var a = $defined(f.get("vType")) ? f.get("vType") : this.options.vType;
    if ($chk(f.get("error"))) {
        g = f.get("error")
    }
    this[a].run([f, b, g], this);
    return b
}, doValidate: function (j) {
    var k = "";
    var g;
    var h = j.get("rule");
    if (!h) {
        return{state: "true"}
    }
    if (!$defined(j.get("ruleType"))) {
        var b = [];
        var c = "solo";
        if (h.contains("_")) {
            b = h.split("_");
            k = this._msg.t;
            c = "and"
        } else {
            if (h.contains("||")) {
                b = h.split("||");
                k = this._msg.t;
                c = "or"
            } else {
                b[0] = h
            }
        }
        var a = (c != "or") ? true : false;
        var f = a;
        b.each(function (r, p, m) {
            var o = "";
            if (r.contains("contrast")) {
                j.set("contrastValue1", r.split(";")[1]);
                if (r.split(";").length == 3) {
                    j.set("contrastValue2", r.split(";")[2])
                }
                r = "contrast"
            } else {
                if (r.contains("range")) {
                    j.set("begin", r.split(";")[1]);
                    j.set("end", r.split(";")[2]);
                    r = "range"
                } else {
                    if (r.contains("customCheckStyle")) {
                        j.set("customCheckStyle", r.split(";")[1]);
                        r = "customCheckStyle"
                    } else {
                        if (r.contains("length")) {
                            var n = r.split(";");
                            if (n.length == 3) {
                                j.set("begin", r.split(";")[1]);
                                j.set("end", r.split(";")[2])
                            } else {
                                if (n[1].contains(",")) {
                                    j.set("begin", n[1].split(",")[0]);
                                    j.set("end", n[1].split(",")[1])
                                } else {
                                    j.set("begin", n[1])
                                }
                            }
                            r = "length"
                        } else {
                            if (r.contains("customFunction")) {
                                j.set("onValidate", r.split(";")[1]);
                                r = "customFunction"
                            } else {
                                if (r.contains("regexp")) {
                                    j.set("regexp", r.split(";")[1]);
                                    r = "regexp"
                                } else {
                                    if (r.contains("number") && r.contains(",")) {
                                        var q = r.substring(r.indexOf("(") + 1, r.indexOf(")")).split(",");
                                        j.set("zl", q[0] - q[1]);
                                        j.set("xl", q[1]);
                                        r = "numberDefine"
                                    } else {
                                        if (r.contains("file")) {
                                            var n = r.split(";");
                                            if (n.length == 2) {
                                                j.set("filetype", n[1])
                                            }
                                            r = "fileDefine"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ($defined(this.reg[r])) {
                f = (f == a) ? this["testRegexp"].run([j, this.reg[r]], this) : f
            } else {
                if (r == "regexp") {
                    f = (f == a) ? this["testRegexp"].run([j, j.get("regexp")], this) : f
                } else {
                    if (r == "customFunction") {
                        if ($chk(j.get("onValidate"))) {
                            g = this.getFunc(j.get("onValidate"))[0](j, this.getElValue(j));
                            if ($defined(g.state) && (f == a) && (g.state == !a)) {
                                f = g.state
                            }
                            o = g.msg
                        }
                    } else {
                        if (r != "customFunction") {
                            f = (f == a) ? this[r].run(j, this) : f
                        }
                    }
                }
            }
            if (r.contains("contrast")) {
                o = this._msg.t + this._msg.contrast + j.get("contrastValue1");
                if ($chk(j.get("contrastValue2"))) {
                    o += j.get("contrastValue2")
                }
            } else {
                if (r.contains("range")) {
                    o = this._msg.t + this._msg.range + j.get("begin") + "和" + j.get("end") + "之间"
                } else {
                    if (r.contains("length")) {
                        o = this._msg.t + this._msg.length + j.get("begin") + ($defined(j.get("end")) ? ("和" + j.get("end") + "之间") : "") + i18n.nullStr
                    } else {
                        if (r.contains("numberDefine")) {
                            o = this._msg.t + "数字,且整数部分最多" + j.get("zl") + "位,且小数部分最多" + j.get("xl") + "位"
                        } else {
                            if (r.contains("customCheckStyle")) {
                                o = this._msg.t + this._msg.customCheckStyle + j.get("customCheckStyle")
                            } else {
                                if (r.contains("fileDefine")) {
                                    o = this._msg.t + "文件后缀名必须为：" + j.get("filetype")
                                } else {
                                    if (!r.contains("customFunction")) {
                                        o = this._msg.t + this._msg[r]
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (p == 0) {
                k += o
            } else {
                k += ($defined(o)) ? (this._msg[c] + o) : ""
            }
            if (r == "date") {
                var l = j.get("dataformat");
                if (!$chk(l)) {
                    l = "yyyy-MM-dd"
                }
                k += l
            }
        }.bind(this))
    } else {
        j = (j.hasClass("swordform_item_oprate")) ? j : j.getParent("div.swordform_item_oprate");
        re = this.Group(j, k);
        f = re.state;
        k = re.msg
    }
    return{state: f, msg: $chk(j.get("msg")) ? j.get("msg") : k}
}, Group: function (f, g) {
    var b = f.getElements("input:checked").length;
    var c = f.get("rule");
    var a = [];
    a = c.split("_");
    if (a.length > 2) {
        var g = "请您选择至少" + a[1].toInt() + "项,最多不超过" + a[2].toInt() + "项";
        if (a[1] == a[2]) {
            g = "请您至少选择" + a[0].toInt() + "项"
        }
        return{state: (a[1].toInt() <= b && b <= a[2].toInt()), msg: g}
    } else {
        if (a.length == 2) {
            a[0] = a[1]
        }
        return{state: (a[0].toInt() <= b), msg: "请您至少选择" + a[0].toInt() + "项"}
    }
}, _msg: {t: "", number: i18n.num, numberInt: i18n.numInt, numberFloat: i18n.numFloat, numberScience: i18n.numScience, character: i18n.character, chinese: i18n.chinese, twoBytes: i18n.twoBytes, english: i18n.english, date: i18n.date, "number$character": i18n.numChar, "number$english": i18n.numEnglish, qq: i18n.qq, telephone: i18n.telephone, cellphone: i18n.cellphone, idcard: i18n.idcard, postal: i18n.postal, currency: i18n.currency, email: i18n.email, url: i18n.url, and: i18n.and1, or: i18n.or, solo: "", must: i18n.must, contrast: i18n.contrast, range: i18n.range, customCheckStyle: i18n.customCheckStyle, length: i18n.length1, customFunction: i18n.customFunction}, reg: {number: /^[-]?\d+(\.\d+)?([Ee][-+]?[1-9]+)?$/i, numberInt: /^[-]?\d+$/i, numberFloat: /^[-]?\d+\.\d+$/i, numberScience: /^[+|-]?\d+\.?\d*[E|e]{1}[+]{1}\d+$/, character: /^[\u4e00-\u9fa5A-Za-z]+$/i, chinese: /^[\u4e00-\u9fa5]+$/i, twoBytes: /^[^\x00-\xff]+$/i, english: /^[A-Za-z]+[A-Za-z\s]*$/i, number$character: /^[\u4e00-\u9fa5A-Za-z0-9]+$/i, number$english: /^[\w]+$/i, qq: /^[1-9]\d{4,8}$/i, telephone: /^((\(0\d{2,3}\))|(0\d{2,3}-))?[1-9]\d{6,7}(-\d{1,4})?$/i, cellphone: /^0?1\d{10}$/i, postal: /^\d{6}$/i, currency: /^\$[-+]?\d+(\.\d+)?([Ee][-+]?[1-9]+)?$/i, email: /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/i, url: /^(http|https|ftp):\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/i}, getElValue: function (c) {
    var b;
    if (c.get("tag") == "div") {
        if ($defined(c.get("realvalue"))) {
            b = c.get("realvalue")
        } else {
            b = c.get("text")
        }
    } else {
        b = c.get("realvalue") || c.get("value")
    }
    var a = c.getElement("input");
    if (b == "" && $chk(a)) {
        b = a.get("value")
    }
    if (b == undefined) {
        b = ""
    }
    return b
}, testRegexp: function (c, b) {
    if ($type(b) != "regexp") {
        if (b.test("\\/\\^")) {
            b = b.substring(1, b.length)
        }
        if (b.test("\\/\\i")) {
            b = b.substring(0, b.length - 2)
        }
        b = new RegExp(b)
    }
    var a = this.getElValue(c);
    if (a == "") {
        return true
    }
    return b.test(a)
}, must: function (b) {
    var a = b.retrieve("upManager");
    if (a) {
        return a.fileList.length > 0
    }
    if (b.get("tag") == "div") {
        return($defined(b.get("text")) && (b.get("text").trim() != ""))
    } else {
        if ($defined(b.get("swordType")) && (b.get("swordType") == "tree")) {
            return($defined(b.get("realvalue")) && (b.get("realvalue").trim() != ""))
        } else {
            return($defined(b.get("value")) && (b.get("value").trim() != ""))
        }
    }
}, contrast: function (e) {
    var value = this.getElValue(e);
    if (value == "") {
        return true
    }
    if (this.reg.number.test(value)) {
        var flag = eval(value + e.get("contrastValue1"));
        if ($chk(e.get("contrastValue2"))) {
            flag = flag ? eval(value + e.get("contrastValue2")) : false
        }
        return flag
    } else {
        return false
    }
}, range: function (b) {
    var a = this.getElValue(b);
    if (a == "") {
        return true
    }
    if (this.reg.number.test(a)) {
        return(a > b.get("begin") && a < b.get("end"))
    } else {
        return false
    }
}, customCheckStyle: function (f) {
    var g = this.getElValue(f);
    var a = f.get("customCheckStyle");
    for (var b = 0; b < g.length; b++) {
        var h = g.charAt(b);
        if (a.indexOf(h) >= 0) {
            return false
        }
    }
    return true
}, length: function (c) {
    var b = this.getElValue(c);
    if (b == "") {
        return true
    }
    var a = this.getLen(b);
    if (c.get("rule").contains(",")) {
        return(a >= c.get("begin") && a <= c.get("end"))
    } else {
        if ($defined(c.get("end"))) {
            return(a > c.get("begin") && a < c.get("end"))
        } else {
            return a == c.get("begin")
        }
    }
}, getLen: function (g) {
    var a = 0;
    for (var b = 0; b < g.length; b++) {
        var f = g.charCodeAt(b);
        var c = g.charAt(b);
        if ((f > 65248) || (f == 12288) || this.reg.chinese.test(c)) {
            a = a + 2
        } else {
            a = a + 1
        }
    }
    return a
}, idcard: function (b) {
    var a = this.getElValue(b);
    if (a == "") {
        return true
    }
    return this.checkIdcard(a)
}, checkIdcard: function (g) {
    g = g.toUpperCase();
    if (!(/(^\d{15}$)|(^\d{17}([0-9]|X)$)/.test(g))) {
        return false
    }
    var h, n;
    h = g.length;
    if (h == 15) {
        n = new RegExp(/^(\d{6})(\d{2})(\d{2})(\d{2})(\d{3})$/);
        var m = g.match(n);
        var c = new Date("19" + m[2] + "/" + m[3] + "/" + m[4]);
        var b;
        b = (c.getYear() == Number(m[2])) && ((c.getMonth() + 1) == Number(m[3])) && (c.getDate() == Number(m[4]));
        if (!b) {
            return false
        } else {
            var k = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);
            var l = new Array("1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2");
            var j = 0, f;
            g = g.substr(0, 6) + "19" + g.substr(6, g.length - 6);
            for (f = 0; f < 17; f++) {
                j += g.substr(f, 1) * k[f]
            }
            g += l[j % 11];
            return true
        }
    }
    if (h == 18) {
        n = new RegExp(/^(\d{6})(\d{4})(\d{2})(\d{2})(\d{3})([0-9]|X)$/);
        var m = g.match(n);
        var c = new Date(m[2] + "/" + m[3] + "/" + m[4]);
        var b;
        b = (c.getFullYear() == Number(m[2])) && ((c.getMonth() + 1) == Number(m[3])) && (c.getDate() == Number(m[4]));
        if (!b) {
            return false
        } else {
            var a;
            var k = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);
            var l = new Array("1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2");
            var j = 0, f;
            for (f = 0; f < 17; f++) {
                j += g.substr(f, 1) * k[f]
            }
            a = l[j % 11];
            if (a != g.substr(17, 1)) {
                return false
            }
            return true
        }
    }
    return false
}, numberDefine: function (f) {
    var c = this.getElValue(f);
    if (c == "") {
        return true
    }
    if (!this.reg.number.test(c)) {
        return false
    }
    var h = c.split(".");
    var g = f.get("zl");
    if (h.length == 2) {
        var a = h[0].split(",");
        var j = 0;
        for (var b = 0; b < a.length; b++) {
            j = j + a[b].length
        }
        return j <= g && h[1].length <= f.get("xl")
    } else {
        return h[0].length <= g
    }
}, fileDefine: function (g) {
    var f = this.getElValue(g);
    if (f == "") {
        return true
    }
    var a = f.lastIndexOf(".");
    var b = f.substring(a + 1, f.length);
    var c = g.get("filetype");
    if (c.contains(",")) {
        var h = c.split(",");
        if (h.contains(b)) {
            return true
        } else {
            return false
        }
    } else {
        if (c == b) {
            return true
        } else {
            return false
        }
    }
}, date: function (b) {
    var c;
    if (b.get("widget") == "calendar") {
        c = b.get("value")
    } else {
        c = this.getElValue(b)
    }
    if (c == "") {
        return true
    }
    var a = b.get("dataformat") || "yyyy-MM-dd";
    if (c.split(".").length == 2) {
        c = c.split(".")[0]
    }
    c = SwordDataFormat.formatStringToString(c, "yyyy-MM-dd HH:mm:ss", a);
    if (!SwordDataFormat.isDate(c, a)) {
        return false
    } else {
        return true
    }
}, userDefineFunction: null, elafter: function (f, c, g) {
    var b = f.getNext("div.swordform_field_valiwrap") || f.valWrapDiv;
    if (!b) {
        return
    }
    var h = b.getElement("div.swordform_fieldimg_nomal");
    var a = b.getElement("div[name='msgText']");
    if ($defined(f.get("ruleType"))) {
        h = f.getNext("div").getElement(".swordform_fieldimg_nomal")
    }
    if (h && a) {
        a.set("text", g);
        if (c) {
            h.removeClass("swordform_fieldimg_failed");
            h.removeEvents("mouseenter");
            this.elAfterHide(b)
        } else {
            h.addClass("swordform_fieldimg_failed");
            this.elAfterShow(b)
        }
    }
}, fldiv: function (b, a, c) {
    this.tooltips.createTip(b, c);
    if (a) {
        b.removeClass("invalid");
        this.tooltips.hide()
    } else {
        b.addClass("invalid")
    }
}, showAlert: function (b, a, c) {
    if (a == true) {
        c = $defined(b.get("success")) ? b.get("success") : this.options.msg.success
    } else {
        c = $defined(b.get("error")) ? b.get("error") : this.options.msg.error
    }
    alert(c)
}, showIntimeMes: function (a, b) {
    this.tooltips.createTip(a, b)
}, showIntimeError: function (a, b) {
    a.addClass("invalid");
    this.tooltips.createTip(a, b)
}, showIntimeCorrect: function (a, b) {
    a.removeClass("invalid");
    this.tooltips.hide()
}, intime: function (a, b, c) {
    this.fldiv(a, b, c)
}, intimeValidate: function (a) {
    var c = this.doValidate(a);
    var b = c.state;
    var f = c.msg;
    this.showIntimeMes(a, f);
    if (!b) {
        this.showIntimeError(a, f)
    } else {
        this.showIntimeCorrect(a, f)
    }
}, intimeValidate_Biz: function (a, c, b) {
    this.showIntimeMes(a, c);
    if (!b) {
        this.showIntimeError(a, c)
    } else {
        this.showIntimeCorrect(a, c)
    }
}, clearElTip: function (a) {
    this.tooltips.hide()
}, elAfterShow: function (a) {
    a.setStyle("display", "")
}, elAfterHide: function (a) {
    a.setStyle("display", "none")
}});
if (typeof(TrimPath) == "undefined") {
    TrimPath = {}
}
(function () {
    var theEval = eval;
    var theString = String;
    var theArray = Array;
    if (TrimPath == null) {
        TrimPath = new Object()
    }
    if (TrimPath.TEST == null) {
        TrimPath.TEST = new Object()
    }
    var arrayUniq = function (arr) {
        var result = [];
        for (var i = 0; i < arr.length; i++) {
            if (arrayInclude(result, arr[i]) == false) {
                result.push(arr[i])
            }
        }
        return result
    };
    var arrayInclude = function (arr, val) {
        for (var j = 0; j < arr.length; j++) {
            if (arr[j] == val) {
                return true
            }
        }
        return false
    };
    var arrayCompact = function (arr) {
        var result = [];
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] != null) {
                result.push(arr[i])
            }
        }
        return result
    };
    var simpleJson = function (fields, values) {
        var json = ["{"];
        for (var i = 0; i < fields.length; i++) {
            if (i > 0) {
                json.push(",")
            }
            json.push(fields[i]);
            json.push(":");
            if (values[i]) {
                json.push('"');
                json.push(values[i].replace(/(["\\])/g, "\\$1").replace(/\r/g, "").replace(/\n/g, "\\n"));
                json.push('"')
            } else {
                json.push(null)
            }
        }
        json.push("}");
        return json.join("")
    };
    var hashKeys = function (object) {
        var keys = [];
        for (var property in object) {
            keys.push(property)
        }
        return keys
    };
    var hashValues = function (object) {
        var values = [];
        for (var property in object) {
            values.push(object[property])
        }
        return values
    };
    var strip = function (str) {
        return str.replace(/^\s+/, "").replace(/\s+$/, "")
    };
    TrimPath.makeQueryLang_etc = {};
    TrimPath.makeQueryLang_etc.Error = function (message, stmt) {
        this.message = message;
        this.stmt = stmt
    };
    TrimPath.makeQueryLang_etc.Error.prototype.toString = function () {
        return("TrimPath query Error in " + (this.stmt != null ? this.stmt : "[unknown]") + ": " + this.message)
    };
    var TODO = function () {
        throw"currently unsupported"
    };
    var USAGE = function () {
        throw"incorrect keyword usage"
    };
    var QueryLang = function () {
    };
    TrimPath.makeQueryLang = function (tableInfos, etc) {
        if (etc == null) {
            etc = TrimPath.makeQueryLang_etc
        }
        var aliasArr = [];
        var aliasReg = function (aliasKey, scope, obj) {
            if (scope[aliasKey] != null) {
                throw new etc.Error("alias redefinition: " + aliasKey)
            }
            aliasArr.push({aliasKey: aliasKey, scope: scope, orig: scope[aliasKey]});
            scope[aliasKey] = obj;
            return obj
        };
        var queryLang = new QueryLang();
        var checkArgs = function (args, minLength, maxLength, name, typeCheck) {
            args = cleanArray(args);
            if (minLength == null) {
                minLength = 1
            }
            if (args == null || args.length < minLength) {
                throw new etc.Error("not enough arguments for " + name)
            }
            if (maxLength != null && args.length > maxLength) {
                throw new etc.Error("too many arguments for " + name)
            }
            if (typeCheck != null && typeCheck != "undefined") {
                for (var k in args) {
                    if ($type(args[k]) != "function" && ($type(args[k]) == $type(typeCheck))) {
                        throw new etc.Error("wrong type for " + args[k] + " to " + name)
                    }
                }
            }
            return args
        };
        var sql_date_to_js_date = function (data) {
            if (typeof data == "string" && data.match(/\d{4}-\d{1,2}-\d{1,2}/)) {
                var dateArr = data.match(/\d{4}-\d{1,2}-\d{1,2}/)[0].split("-");
                var date = new Date(parseInt(dateArr[0], 10), (parseInt(dateArr[1], 10) - 1), parseInt(dateArr[2], 10));
                return date
            }
            return data
        };
        var data_insertion = function (table_info, field_name, data, column_ref) {
            if (table_info[field_name]) {
                var data = eval(data);
                if (table_info[field_name].type && table_info[field_name].type == "Number") {
                    data = Number(data, 10)
                } else {
                    if (table_info[field_name].type && table_info[field_name].type == "Date") {
                        data = sql_date_to_js_date(data)
                    }
                }
                column_ref[field_name] = data
            }
        };
        var NodeType = {select: function (args) {
            var columns = [];
            var nodes = {from: null, where: null, groupBy: null, having: null, orderBy: null, limit: null};
            for (var i = 0; i < args.length; i++) {
                var arg = args[i];
                var argIsNode = false;
                for (var nodeTypeName in nodes) {
                    if (arg instanceof NodeType[nodeTypeName]) {
                        if (nodes[nodeTypeName] != null) {
                            throw new etc.Error("too many " + nodeTypeName.toUpperCase() + " clauses")
                        }
                        nodes[nodeTypeName] = arg;
                        argIsNode = true;
                        break
                    }
                }
                if (argIsNode == false) {
                    columns.push(arg)
                }
            }
            columns = checkArgs(columns, 1, null, "COLUMNS");
            if (nodes.from == null) {
                throw new etc.Error("missing FROM clause")
            }
            var joinDriver = null;
            var joinFilter = null;
            var whereFilter = null;
            var columnConvertor = null;
            var orderByComparator = null;
            var groupByCalcValues = null;
            var havingFilter = null;
            var typeConverter = function (results) {
                for (var i = 0; i < results.length; i++) {
                    var result = results[i];
                    for (var attr in result) {
                        var value = result[attr];
                        if (value instanceof Date) {
                            results[i][attr] = dateToString(value)
                        }
                    }
                }
            };
            this.prepareFilter = function () {
                if (joinDriver == null) {
                    joinDriver = compileJoinDriver(nodes.from.tables)
                }
                if (joinFilter == null) {
                    joinFilter = compileFilter(compileFilterForJoin, nodes.from.tables)
                }
                if (whereFilter == null) {
                    whereFilter = compileFilter(compileFilterForWhere, nodes.from.tables, nodes.where != null ? nodes.where.exprs : null)
                }
                if (groupByCalcValues == null && nodes.groupBy != null) {
                    groupByCalcValues = compileGroupByCalcValues(nodes.from.tables, nodes.groupBy.exprs)
                }
                if (havingFilter == null && nodes.having != null) {
                    havingFilter = compileFilter(compileFilterForWhere, [], nodes.having.exprs, {aliasOnly: true})
                }
                if (columnConvertor == null) {
                    columnConvertor = compileColumnConvertor(nodes.from.tables, columns)
                }
                if (orderByComparator == null && nodes.orderBy != null) {
                    orderByComparator = compileOrderByComparator(nodes.orderBy.exprs)
                }
            };
            this.filter = function (dataTables, bindings, params) {
                this.prepareFilter();
                if (bindings == null) {
                    bindings = {}
                }
                if (params == null) {
                    params = {}
                }
                var resultOfFromWhere = joinDriver(dataTables, joinFilter, whereFilter, bindings);
                if (groupByCalcValues != null) {
                    for (var i = 0; i < resultOfFromWhere.length; i++) {
                        resultOfFromWhere[i].groupByValues = groupByCalcValues.apply(null, resultOfFromWhere[i])
                    }
                    resultOfFromWhere.sort(groupByComparator)
                }
                if (params.return_reference) {
                    return resultOfFromWhere
                }
                var groupByAccum = {};
                var groupByFuncs = {SUM: function (key, val) {
                    groupByAccum[key] = zeroDefault(groupByAccum[key]) + zeroDefault(val);
                    return groupByAccum[key]
                }, COUNT: function (key) {
                    groupByAccum[key] = zeroDefault(groupByAccum[key]) + 1;
                    return groupByAccum[key]
                }, AVG: function (key, val) {
                    return groupByFuncs.SUM(key, val) / groupByFuncs.COUNT("_COUNT" + key)
                }};
                var result = [], prevItem = null, currItem;
                for (var i = 0; i < resultOfFromWhere.length; i++) {
                    currItem = resultOfFromWhere[i];
                    currItem[0] = groupByFuncs;
                    if (prevItem != null && groupByComparator(prevItem, currItem) != 0) {
                        if (havingFilter == null || havingFilter(prevItem.record) == true) {
                            result.push(prevItem.record)
                        }
                        groupByAccum = {}
                    }
                    currItem.record = columnConvertor.apply(null, currItem.concat([params.with_table]));
                    prevItem = currItem
                }
                if (prevItem != null && (havingFilter == null || havingFilter(prevItem.record) == true)) {
                    result.push(prevItem.record)
                }
                if (orderByComparator != null) {
                    result.sort(orderByComparator)
                }
                if (nodes.limit != null) {
                    if (nodes.limit.total == 0) {
                        return[]
                    }
                    var start = (nodes.limit.offset != null ? nodes.limit.offset : 0);
                    result = result.slice(start, start + (nodes.limit.total > 0 ? nodes.limit.total : result.length))
                }
                return result
            };
            setSSFunc(this, function () {
                var sqlArr = ["SELECT", map(columns, toSqlWithAlias).join(", "), nodes.from.toSql()];
                if (nodes.where != null) {
                    sqlArr.push(nodes.where.toSql())
                }
                if (nodes.groupBy != null) {
                    sqlArr.push(nodes.groupBy.toSql())
                }
                if (nodes.having != null) {
                    sqlArr.push(nodes.having.toSql())
                }
                if (nodes.orderBy != null) {
                    sqlArr.push(nodes.orderBy.toSql())
                }
                if (nodes.limit != null) {
                    sqlArr.push(nodes.limit.toSql())
                }
                return sqlArr.join(" ")
            });
            for (var i = 0; i < aliasArr.length; i++) {
                var aliasItem = aliasArr[i];
                aliasItem.scope[aliasItem.aliasKey] = aliasItem.orig
            }
            aliasArr = []
        }, insert: function (args) {
            var table_info = args[0];
            var object = args[1];
            this.filter = function (dataTables, bindings) {
                var table_name = table_info[".name"];
                if (!dataTables[table_name]) {
                    dataTables[table_name] = []
                }
                dataTables[table_name].push({});
                for (var field_name in object) {
                    data_insertion(table_info, field_name, object[field_name], dataTables[table_name][dataTables[table_name].length - 1])
                }
                return true
            };
            setSSFunc(this, function () {
                var sqlArr = ["INSERT INTO", table_info.toSql(), "(" + hashKeys(object).join(", ") + ")", "VALUES", "(" + hashValues(object).join(", ") + ")"];
                return sqlArr.join(" ")
            })
        }, update: function (args) {
            var from_node = args[0];
            var assignments = args[1];
            var where_node = args[2];
            this.filter = function (dataTables, bindings) {
                var table_info = from_node.tables[0];
                var resultOfFromWhere = queryLang.SELECT(from_node, where_node, 1).filter(dataTables, null, {return_reference: true});
                for (var i = 0; i < resultOfFromWhere.length; i++) {
                    var object = resultOfFromWhere[i][1];
                    for (var field in assignments) {
                        var fieldSplit = field.split(".");
                        var field_name = field;
                        if (fieldSplit.length == 2) {
                            field_name = fieldSplit[1]
                        }
                        data_insertion(table_info, field_name, assignments[field], object)
                    }
                }
                return true
            };
            setSSFunc(this, function () {
                var sqlArr = ["UPDATE", from_node.toSql()];
                var assignmentsArr = [];
                for (var attr in assignments) {
                    assignmentsArr.push(attr + "=" + assignments[attr])
                }
                sqlArr.push(assignmentsArr.join(", "));
                if (where_node != null) {
                    sqlArr.push(where_node.toSql())
                }
                return sqlArr.join(" ")
            })
        }, destroy: function (args) {
            var select_node = args[0];
            this.filter = function (dataTables, bindings) {
                var resultOfFromWhere = select_node.filter(dataTables, null, {return_reference: true});
                for (var i = 0; i < resultOfFromWhere.length; i++) {
                    var record = resultOfFromWhere[i];
                    for (var j = 1; j < record.length; j++) {
                        var object = record[j];
                        for (var attr in object) {
                            delete object[attr]
                        }
                    }
                }
                for (var table_name in dataTables) {
                    var table = dataTables[table_name];
                    for (var i = 0; i < table.length; i++) {
                        if (hashKeys(table[i]).length == 0) {
                            delete table[i]
                        }
                    }
                }
                for (var table_name in dataTables) {
                    dataTables[table_name] = arrayCompact(dataTables[table_name])
                }
                return true
            };
            setSSFunc(this, function () {
                var sqlArr = ["DELETE", select_node.toSql()];
                return sqlArr.join(" ").replace(/SELECT\s/, "")
            })
        }, from: function (tables) {
            this.tables = checkArgs(tables, 1, null, "FROM", NodeType.tableDef)
        }, where: function (exprs) {
            this.exprs = checkArgs(exprs, 1, null, "WHERE", NodeType.expression)
        }, groupBy: function (exprs) {
            this.exprs = checkArgs(exprs, 1, null, "GROUP_BY")
        }, having: function (exprs) {
            this.exprs = checkArgs(exprs, 1, null, "HAVING", NodeType.expression)
        }, orderBy: function (exprs) {
            this.exprs = checkArgs(exprs, 1, null, "ORDER_BY")
        }, expression: function (args, name, opFix, sqlText, minArgs, maxArgs, jsText, alias) {
            var theExpr = this;
            this.args = checkArgs(args, minArgs, maxArgs, name);
            this[".name"] = name;
            this[".alias"] = alias != null ? alias : name;
            this.opFix = opFix;
            this.sqlText = sqlText != null ? sqlText : this[".name"];
            this.jsText = jsText != null ? jsText : this.sqlText;
            this.AS = function (aliasArg) {
                this[".alias"] = this.ASC[".alias"] = this.DESC[".alias"] = aliasArg;
                return aliasReg(aliasArg, queryLang, this)
            };
            this.ASC = setSSFunc({".name": name, ".alias": theExpr[".alias"], order: "ASC"}, function () {
                return theExpr[".alias"] + " ASC"
            });
            this.DESC = setSSFunc({".name": name, ".alias": theExpr[".alias"], order: "DESC"}, function () {
                return theExpr[".alias"] + " DESC"
            });
            this.COLLATE = TODO
        }, aggregate: function () {
            NodeType.expression.apply(this, arguments)
        }, limit: function (offset, total) {
            if (total == null) {
                this.total = cleanString(offset)
            } else {
                this.total = cleanString(total);
                this.offset = cleanString(offset)
            }
        }, tableDef: function (name, columnInfos, alias) {
            var mootoolsHashObj = $H();
            this[".name"] = name;
            this[".alias"] = alias != null ? alias : name;
            this[".allColumns"] = [];
            for (var columnName in columnInfos) {
                if (!$chk(mootoolsHashObj[columnName])) {
                    this[columnName] = new NodeType.columnDef(columnName, columnInfos[columnName], this);
                    this[".allColumns"].push(this[columnName])
                }
            }
            setSSFunc(this, function () {
                return name
            });
            this.AS = function (alias) {
                return aliasReg(alias, queryLang, new NodeType.tableDef(name, columnInfos, alias))
            };
            this.ALL = new NodeType.columnDef("*", null, this);
            this.ALL.AS = null
        }, columnDef: function (name, columnInfo, tableDef, alias) {
            var theColumnDef = this;
            this[".name"] = name;
            this[".alias"] = alias != null ? alias : name;
            this.tableDef = tableDef;
            setSSFunc(this, function (flags) {
                if (flags != null && flags.aliasOnly == true) {
                    return this[".alias"]
                }
                return tableDef != null ? ((tableDef[".alias"]) + "." + name) : name
            });
            this.AS = function (aliasArg) {
                return aliasReg(aliasArg, queryLang, new NodeType.columnDef(name, columnInfo, tableDef, aliasArg))
            };
            if (columnInfo && columnInfo.type) {
                this.type = columnInfo.type
            } else {
                this.type = "String"
            }
            this.ASC = setSSFunc({".name": name, ".alias": theColumnDef[".alias"], tableDef: tableDef, order: "ASC"}, function () {
                return theColumnDef.toSql() + " ASC"
            });
            this.DESC = setSSFunc({".name": name, ".alias": theColumnDef[".alias"], tableDef: tableDef, order: "DESC"}, function () {
                return theColumnDef.toSql() + " DESC"
            });
            this.COLLATE = TODO
        }, join: function (joinType, tableDef) {
            var theJoin = this;
            this.joinType = joinType;
            this.fromSeparator = " " + joinType + " JOIN ";
            for (var k in tableDef) {
                this[k] = tableDef[k]
            }
            this.ON = function () {
                theJoin.ON_exprs = checkArgs(arguments, 1, null, "ON");
                return theJoin
            };
            this.USING = function () {
                theJoin.USING_exprs = cleanArray(arguments, false);
                return theJoin
            };
            this.fromSuffix = function () {
                if (theJoin.ON_exprs != null) {
                    return(" ON " + map(theJoin.ON_exprs, toSql).join(" AND "))
                }
                if (theJoin.USING_exprs != null) {
                    return(" USING (" + theJoin.USING_exprs.join(", ") + ")")
                }
                return""
            }
        }};
        var setSSFunc = function (obj, func) {
            obj.toSql = obj.toJs = obj.toString = func;
            return obj
        };
        setSSFunc(NodeType.from.prototype, function () {
            var sqlArr = ["FROM "];
            for (var i = 0; i < this.tables.length; i++) {
                if (i > 0) {
                    var sep = this.tables[i].fromSeparator;
                    if (sep == null) {
                        sep = ", "
                    }
                    sqlArr.push(sep)
                }
                sqlArr.push(toSqlWithAlias(this.tables[i]));
                if (this.tables[i].fromSuffix != null) {
                    sqlArr.push(this.tables[i].fromSuffix())
                }
            }
            return sqlArr.join("")
        });
        setSSFunc(NodeType.where.prototype, function () {
            return"WHERE " + map(this.exprs, toSql).join(" AND ")
        });
        setSSFunc(NodeType.orderBy.prototype, function () {
            return"ORDER BY " + map(this.exprs, toSql).join(", ")
        });
        setSSFunc(NodeType.groupBy.prototype, function () {
            return"GROUP BY " + map(this.exprs, toSql).join(", ")
        });
        setSSFunc(NodeType.having.prototype, function () {
            return"HAVING " + map(this.exprs, toSql, {aliasOnly: true}).join(" AND ")
        });
        setSSFunc(NodeType.limit.prototype, function () {
            return"LIMIT " + (this.total < 0 ? "ALL" : this.total) + (this.offset != null ? (" OFFSET " + this.offset) : "")
        });
        var makeToFunc = function (toFunc, opText) {
            return function (flags) {
                if (flags != null && flags.aliasOnly == true && this[".alias"] != this[".name"]) {
                    return this[".alias"]
                }
                if (this.opFix < 0) {
                    return this[opText] + " (" + map(this.args, toFunc, flags).join(") " + this[opText] + " (") + ")"
                }
                if (this.opFix > 0) {
                    return"(" + map(this.args, toFunc, flags).join(") " + this[opText] + " (") + ") " + this[opText]
                }
                return"(" + map(this.args, toFunc, flags).join(") " + this[opText] + " (") + ")"
            }
        };
        NodeType.expression.prototype.toSql = makeToFunc(toSql, "sqlText");
        NodeType.expression.prototype.toJs = makeToFunc(toJs, "jsText");
        NodeType.aggregate.prototype = new NodeType.expression([], null, null, null, 0);
        NodeType.aggregate.prototype.toJs = function (flags) {
            if (flags != null && flags.aliasOnly == true && this[".alias"] != this[".name"]) {
                return this[".alias"]
            }
            return this.jsText + " ('" + this[".alias"] + "', (" + map(this.args, toJs).join("), (") + "))"
        };
        NodeType.join.prototype = new NodeType.tableDef();
        NodeType.whereSql = function (sql) {
            this.exprs = [new NodeType.rawSql(sql)]
        };
        NodeType.whereSql.prototype = new NodeType.where([new NodeType.expression([0], null, 0, null, 0, null, null, null)]);
        NodeType.havingSql = function (sql) {
            this.exprs = [new NodeType.rawSql(sql)]
        };
        NodeType.havingSql.prototype = new NodeType.having([new NodeType.expression([0], null, 0, null, 0, null, null, null)]);
        NodeType.rawSql = function (sql) {
            this.sql = sql
        };
        NodeType.rawSql.prototype.toSql = function (flags) {
            return this.sql
        };
        NodeType.rawSql.prototype.toJs = function (flags) {
            var js = this.sql;
            js = js.replace(/ AND /g, " && ");
            js = js.replace(/ OR /g, " || ");
            js = js.replace(/ = /g, " == ");
            js = js.replace(/ IS NULL/g, " == null");
            js = js.replace(/ IS NOT NULL/g, " != null");
            js = js.replace(/ NOT /g, " ! ");
            var LIKE_regex = /(\S+)\sLIKE\s'(\S+)'/g;
            var matchArr;
            while (matchArr = LIKE_regex.exec(js)) {
                matchArr[2] = matchArr[2].replace(/%/, ".*");
                js = js.replace(LIKE_regex, "$1.match(/" + matchArr[2] + "/)")
            }
            var DATE_regex = /'(\d{4})-(\d{1,2})-(\d{1,2})'/g;
            while (matchArr = DATE_regex.exec(js)) {
                var dateArr = [parseInt(matchArr[1], 10).toString(), (parseInt(matchArr[2], 10) - 1).toString(), parseInt(matchArr[3], 10).toString()];
                var replacement = "(new Date(" + dateArr.join(", ") + ").valueOf())";
                js = js.replace(matchArr[0], replacement)
            }
            return js
        };
        var keywords = {SELECT_ALL: function () {
            return new NodeType.select(arguments)
        }, SELECT_DISTINCT: TODO, FROM: function () {
            return new NodeType.from(arguments)
        }, WHERE: function () {
            return new NodeType.where(arguments)
        }, AND: function () {
            return new NodeType.expression(arguments, "AND", 0, null, 1, null, "&&")
        }, OR: function () {
            return new NodeType.expression(arguments, "OR", 0, null, 1, null, "||")
        }, NOT: function () {
            return new NodeType.expression(arguments, "NOT", -1, null, 1, 1, "!")
        }, EQ: function () {
            return new NodeType.expression(arguments, "EQ", 0, "=", 2, 2, "==")
        }, NEQ: function () {
            return new NodeType.expression(arguments, "NEQ", 0, "!=", 2, 2)
        }, LT: function () {
            return new NodeType.expression(arguments, "LT", 0, "<", 2, 2)
        }, GT: function () {
            return new NodeType.expression(arguments, "GT", 0, ">", 2, 2)
        }, LTE: function () {
            return new NodeType.expression(arguments, "LTE", 0, "<=", 2, 2)
        }, GTE: function () {
            return new NodeType.expression(arguments, "GTE", 0, ">=", 2, 2)
        }, IS_NULL: function () {
            return new NodeType.expression(arguments, "IS_NULL", 1, "IS NULL", 1, 1, "== null")
        }, IS_NOT_NULL: function () {
            return new NodeType.expression(arguments, "IS_NOT_NULL", 1, "IS NOT NULL", 1, 1, "!= null")
        }, ADD: function () {
            return new NodeType.expression(arguments, "ADD", 0, "+", 2, null)
        }, LIKE: function () {
            return new NodeType.expression(arguments, "LIKE", 0, "LIKE", 2, 2, "match")
        }, BETWEEN: TODO, AS: USAGE, IN: TODO, ON: USAGE, GROUP_BY: function () {
            return new NodeType.groupBy(arguments)
        }, ORDER_BY: function () {
            return new NodeType.orderBy(arguments)
        }, WHERE_SQL: function (sql) {
            return new NodeType.whereSql(sql)
        }};
        keywords.SELECT = keywords.SELECT_ALL;
        for (var k in keywords) {
            queryLang[k] = keywords[k]
        }
        tableInfos.forEach(function (v, k) {
            queryLang[k] = new NodeType.tableDef(k, v)
        });
        return queryLang
    };
    var compileJoinDriver = function (tables) {
        var funcText = ["var TrimPath_query_tmpJD = function(dataTables, joinFilter, whereFilter, bindings) {", "var result = [], filterArgs = [ bindings ];"];
        for (var i = 0; i < tables.length; i++) {
            funcText.push("var T" + i + " = dataTables['" + tables[i][".name"] + "'] || [];")
        }
        for (var i = 0; i < tables.length; i++) {
            funcText.push("for (var t" + i + " = 0; t" + i + " < T" + i + ".length; t" + i + "++) {");
            funcText.push("var resultLength" + i + " = result.length;");
            funcText.push("filterArgs[" + (i + 1) + "] = T" + i + "[t" + i + "];")
        }
        funcText.push("if ((joinFilter == null || joinFilter.apply(null, filterArgs) == true) && ");
        funcText.push("    (whereFilter == null || whereFilter.apply(null, filterArgs) == true))");
        funcText.push("result.push(filterArgs.slice(0));");
        for (var i = tables.length - 1; i >= 0; i--) {
            funcText.push("}");
            if (i >= 1 && tables[i].joinType == "LEFT OUTER") {
                funcText.push("if (resultLength" + (i - 1) + " == result.length) {");
                for (var j = i; j < tables.length; j++) {
                    funcText.push("filterArgs[" + (j + 1) + "] = ")
                }
                funcText.push("{}; if (whereFilter == null || whereFilter.apply(null, filterArgs) == true) result.push(filterArgs.slice(0)); }")
            }
        }
        funcText.push("return result; }; TrimPath_query_tmpJD");
        return theEval(funcText.join(""))
    };
    var compileFilter = function (bodyFunc, tables, whereExpressions, flags) {
        var funcText = ["var TrimPath_query_tmpWF = function(_BINDINGS"];
        for (var i = 0; i < tables.length; i++) {
            funcText.push(", " + tables[i][".alias"])
        }
        funcText.push("){ with(_BINDINGS) {");
        bodyFunc(funcText, tables, whereExpressions, flags);
        funcText.push("return true; }}; TrimPath_query_tmpWF");
        return theEval(funcText.join(""))
    };
    var compileFilterForJoin = function (funcText, tables, whereExpressions, flags) {
        for (var i = 0; i < tables.length; i++) {
            if (tables[i].joinType != null) {
                if (tables[i].ON_exprs != null || tables[i].USING_exprs != null) {
                    funcText.push("if (!(");
                    if (tables[i].ON_exprs != null && tables[i].ON_exprs[0].exprs != null) {
                        funcText.push(tables[i].ON_exprs[0].exprs[0].toJs())
                    } else {
                        if (tables[i].ON_exprs != null) {
                            funcText.push(map(tables[i].ON_exprs, toJs).join(" && "))
                        }
                    }
                    if (tables[i].USING_exprs != null) {
                        funcText.push(map(tables[i].USING_exprs,function (col) {
                            return"(" + tables[i - 1][".alias"] + "." + col + " == " + tables[i][".alias"] + "." + col + ")"
                        }).join(" && "))
                    }
                    funcText.push(")) return false;")
                }
            }
        }
    };
    var compileFilterForWhere = function (funcText, tables, whereExpressions, flags) {
        if (whereExpressions != null) {
            funcText.push("if (!((");
            for (var i = 0; i < whereExpressions.length; i++) {
                if (i > 0) {
                    funcText.push(") && (")
                }
                funcText.push(toJs(whereExpressions[i], flags))
            }
            funcText.push("))) return false;")
        }
    };
    var compileColumnConvertor = function (tables, columnExpressions) {
        var funcText = ["var TrimPath_query_tmpCC = function(_BINDINGS, "];
        var table_aliases = [];
        for (var i = 0; i < tables.length; i++) {
            table_aliases.push(tables[i][".alias"])
        }
        funcText.push(arrayUniq(table_aliases).join(", "));
        funcText.push(", with_table){ with(_BINDINGS) {");
        funcText.push("var _RESULT = {};");
        funcText.push("if(with_table) {");
        compileColumnConvertorHelper(funcText, columnExpressions, true);
        funcText.push("} else {");
        compileColumnConvertorHelper(funcText, columnExpressions, false);
        funcText.push("}");
        funcText.push("return _RESULT; }}; TrimPath_query_tmpCC");
        return theEval(funcText.join(""))
    };
    var test = function (stuff) {
        var i
    };
    var compileColumnConvertorHelper = function (funcText, columnExpressions, with_table) {
        for (var i = 0; i < columnExpressions.length; i++) {
            var columnExpression = columnExpressions[i];
            if (columnExpression[".name"] == "*") {
                compileColumnConvertorHelper(funcText, columnExpression.tableDef[".allColumns"], with_table)
            } else {
                funcText.push("_RESULT['");
                if (with_table == true) {
                    funcText.push(columnExpression.toString())
                } else {
                    funcText.push(columnExpression[".alias"])
                }
                funcText.push("'] = (");
                funcText.push(toJs(columnExpression));
                funcText.push(");")
            }
        }
    };
    var dateToString = function (date) {
        if (typeof date == "object") {
            return[date.getFullYear(), "-", (date.getMonth() + 1), "-", date.getDate()].join("")
        }
        if (date == null) {
            return null
        }
    };
    var compileOrderByComparator = function (orderByExpressions) {
        var funcText = ["var TrimPath_query_tmpOC = function(A, B) { var a, b; "];
        for (var i = 0; i < orderByExpressions.length; i++) {
            var orderByExpression = orderByExpressions[i];
            if (orderByExpression.tableDef) {
                funcText.push("a = A['" + orderByExpression[".alias"] + "'] || A['" + orderByExpression.tableDef[".alias"] + "." + orderByExpression[".alias"] + "'] || '';");
                funcText.push("b = B['" + orderByExpression[".alias"] + "'] || B['" + orderByExpression.tableDef[".alias"] + "." + orderByExpression[".alias"] + "'] || '';")
            } else {
                funcText.push("a = A['" + orderByExpression[".alias"] + "'] || '';");
                funcText.push("b = B['" + orderByExpression[".alias"] + "'] || '';")
            }
            var sign = (orderByExpression.order == "DESC" ? -1 : 1);
            funcText.push("if (a.valueOf() < b.valueOf()) return " + (sign * -1) + ";");
            funcText.push("if (a.valueOf() > b.valueOf()) return " + (sign * 1) + ";")
        }
        funcText.push("return 0; }; TrimPath_query_tmpOC");
        return theEval(funcText.join(""))
    };
    var compileGroupByCalcValues = function (tables, groupByExpressions) {
        var funcText = ["var TrimPath_query_tmpGC = function(_BINDINGS"];
        for (var i = 0; i < tables.length; i++) {
            funcText.push(", " + tables[i][".alias"])
        }
        funcText.push("){ var _RESULT = [];");
        for (var i = 0; i < groupByExpressions.length; i++) {
            funcText.push("_RESULT.push(");
            funcText.push(toJs(groupByExpressions[i]));
            funcText.push(");")
        }
        funcText.push("return _RESULT; }; TrimPath_query_tmpGC");
        return theEval(funcText.join(""))
    };
    var groupByComparator = function (a, b) {
        return arrayCompare(a.groupByValues, b.groupByValues)
    };
    var arrayCompare = function (x, y) {
        if (x == null || y == null) {
            return -1
        }
        for (var i = 0; i < x.length && i < y.length; i++) {
            if (x[i] < y[i]) {
                return -1
            }
            if (x[i] > y[i]) {
                return 1
            }
        }
        return 0
    };
    var toSqlWithAlias = function (obj, flags) {
        var res = toSql(obj, flags);
        if (obj[".alias"] != null && obj[".alias"] != obj[".name"]) {
            return res + " AS " + obj[".alias"]
        }
        return res
    };
    var toSql = function (obj, flags) {
        return toX(obj, "toSql", flags)
    };
    var toJs = function (obj, flags) {
        return toX(obj, "toJs", flags)
    };
    var toX = function (obj, funcName, flags) {
        if (typeof(obj) == "object" && obj[funcName] != null) {
            return obj[funcName].call(obj, flags)
        }
        return theString(obj)
    };
    var zeroDefault = function (x) {
        return(x != null ? x : 0)
    };
    var map = function (arr, func, arg2) {
        for (var result = [], i = 0; i < arr.length; i++) {
            result.push(func(arr[i], arg2))
        }
        return result
    };
    var cleanArray = function (src, quotes) {
        for (var result = [], i = 0; i < src.length; i++) {
            result.push(cleanString(src[i], quotes))
        }
        return result
    };
    var cleanString = TrimPath.TEST.cleanString = function (src, quotes) {
        if (src instanceof theString || typeof(src) == "string") {
            src = theString(src).replace(/\\/g, "\\\\").replace(/'/g, "\\'");
            if (quotes != false) {
                src = "'" + src + "'"
            }
        }
        return src
    };
    var findClause = function (str, regexp) {
        var clauseEnd = str.search(regexp);
        if (clauseEnd < 0) {
            clauseEnd = str.length
        }
        return str.substring(0, clauseEnd)
    };
    QueryLang.prototype.parseSQL = function (sqlQueryIn, paramsArr) {
        var sqlQuery = sqlQueryIn.replace(/\n/g, " ").replace(/\r/g, "");
        if (paramsArr != null) {
            if (paramsArr instanceof theArray == false) {
                paramsArr = [paramsArr]
            }
            var sqlParts = sqlQuery.split(" ?");
            for (var i = 0; i < sqlParts.length - 1; i++) {
                sqlParts[i] = sqlParts[i] + " " + cleanString(paramsArr[i], true)
            }
            sqlQuery = sqlParts.join("")
        }
        sqlQuery = sqlQuery.replace(/ AS ([_a-zA-z0-9]+)/g, ".AS('$1')");
        var err = function (errMsg) {
            throw ("[ERROR: " + errMsg + " in query: " + sqlQueryIn + "]")
        };
        var query_type = sqlQuery.split(/\s+/)[0];
        if (query_type == "DELETE") {
            query_type = "DESTROY"
        }
        if (!arrayInclude(["SELECT", "DESTROY", "UPDATE", "INSERT"], query_type)) {
            err("not a valid query type")
        }
        var strip_whitespace = function (str) {
            return str.replace(/\s+/g, "")
        };
        if (query_type == "SELECT" || query_type == "DESTROY") {
            var fromSplit = sqlQuery.substring(7).split(" FROM ");
            if (fromSplit.length != 2) {
                err("missing a FROM clause")
            }
            var columnsClause = fromSplit[0].replace(/\.\*/g, ".ALL");
            var remaining = fromSplit[1];
            var fromClause = findClause(remaining, /\sWHERE\s|\sGROUP BY\s|\sHAVING\s|\sORDER BY\s|\sLIMIT/);
            var fromTableClause = findClause(fromClause, /\sLEFT OUTER JOIN\s/);
            var fromTables = strip_whitespace(fromTableClause).split(",");
            remaining = remaining.substring(fromClause.length);
            var fromClauseSplit = fromClause.split(" LEFT OUTER JOIN ");
            var fromClauseParts = [fromClauseSplit[0]];
            var leftJoinComponents;
            for (var i = 1; i < fromClauseSplit.length; i++) {
                leftJoinComponents = /(\w+)\sON\s(.+)/.exec(fromClauseSplit[i]);
                fromTables.push(leftJoinComponents[1]);
                fromClauseParts.push("(" + leftJoinComponents[1] + ').ON(WHERE_SQL("' + leftJoinComponents[2] + '"))')
            }
            fromClause = fromClauseParts.join(", LEFT_OUTER_JOIN");
            if (strip_whitespace(columnsClause) == "*") {
                var new_columns = [];
                for (var i = 0; i < fromTables.length; i++) {
                    new_columns.push(fromTables[i] + ".ALL")
                }
                columnsClause = columnsClause.replace(/\*/, new_columns.join(", "))
            }
            var whereClause = findClause(remaining, /\sGROUP BY\s|\sHAVING\s|\sORDER BY\s|\sLIMIT/);
            remaining = remaining.substring(whereClause.length);
            var groupByClause = findClause(remaining, /\sHAVING\s|\sORDER BY\s|\sLIMIT /);
            remaining = remaining.substring(groupByClause.length);
            var havingClause = findClause(remaining, /\sORDER BY\s|\sLIMIT /);
            remaining = remaining.substring(havingClause.length);
            var orderByClause = findClause(remaining, /\sLIMIT /).replace(/\sASC/g, ".ASC").replace(/\sDESC/g, ".DESC");
            remaining = remaining.substring(orderByClause.length);
            var limitClause = remaining;
            var tql = ["SELECT(FROM(", fromClause, "), ", columnsClause];
            if (whereClause.length > 0) {
                tql.push(', WHERE_SQL("' + whereClause.substring(7) + '")')
            }
            if (groupByClause.length > 0) {
                tql.push(", GROUP_BY(" + groupByClause.substring(10) + ")")
            }
            if (havingClause.length > 0) {
                tql.push(', HAVING_SQL("' + havingClause.substring(8) + '")')
            }
            if (orderByClause.length > 0) {
                tql.push(", ORDER_BY(" + orderByClause.substring(10) + ")")
            }
            if (limitClause.length > 0) {
                tql.push(", LIMIT(" + limitClause.substring(7) + ")")
            }
            tql.push(")")
        } else {
            if (query_type == "INSERT") {
                var intoSplit = sqlQuery.substring(6).split(" INTO ");
                if (intoSplit.length != 2) {
                    err("missing an INTO clause")
                }
                var insertion_regex = /^\s*(\w+)\s*\((.+)\)\s+VALUES\s+\((.+)\)/;
                var parsed_sql = intoSplit[1].match(insertion_regex);
                var table_name = parsed_sql[1];
                var fields = strip_whitespace(parsed_sql[2]).split(",");
                var values = parsed_sql[3].split(",");
                if (fields.length != values.length) {
                    err("values and fields must have same number of elements")
                }
                tql = ["INSERT(", table_name, ",", simpleJson(fields, values), ")"]
            } else {
                if (query_type == "UPDATE") {
                    var setSplit = sqlQuery.substring(7).split(" SET ");
                    if (setSplit.length != 2) {
                        err("missing a SET clause")
                    }
                    var fromClause = setSplit[0];
                    var remaining = setSplit[1];
                    var assignmentClause = findClause(remaining, /\sWHERE\s/);
                    remaining = remaining.substring(assignmentClause.length);
                    var whereClause = remaining;
                    var assignmentArray = assignmentClause.split(",");
                    var fields = [];
                    var values = [];
                    for (var i = 0; i < assignmentArray.length; i++) {
                        var components = assignmentArray[i].split("=");
                        fields.push(strip(components[0]));
                        values.push(strip(components[1]))
                    }
                    var update_regex = /^UPDATE\s+(\w+)\s+SET\s+(\w+\s*=\s*\w+)/;
                    var parsed_sql = sqlQuery.match(update_regex);
                    var tql = ["UPDATE(FROM(", fromClause, "), ", simpleJson(fields, values)];
                    tql.push(', WHERE_SQL("' + whereClause.substring(7) + '")');
                    tql.push(")")
                }
            }
        }
        if (query_type == "DESTROY") {
            tql.unshift("DESTROY(");
            tql.push(")")
        }
        with (this) {
            return eval(tql.join(""))
        }
    }
})();
if (typeof deconcept == "undefined") {
    var deconcept = new Object()
}
if (typeof deconcept.util == "undefined") {
    deconcept.util = new Object()
}
if (typeof deconcept.SWFObjectUtil == "undefined") {
    deconcept.SWFObjectUtil = new Object()
}
deconcept.SWFObject = function (j, f, p, k, m, o, r, l, a, g) {
    if (!document.getElementById) {
        return
    }
    this.DETECT_KEY = g ? g : "detectflash";
    this.skipDetect = deconcept.util.getRequestParameter(this.DETECT_KEY);
    this.params = new Object();
    this.variables = new Object();
    this.attributes = new Array();
    if (j) {
        this.setAttribute("swf", j)
    }
    if (f) {
        this.setAttribute("id", f)
    }
    if (p) {
        this.setAttribute("width", p)
    }
    if (k) {
        this.setAttribute("height", k)
    }
    if (m) {
        this.setAttribute("version", new deconcept.PlayerVersion(m.toString().split(".")))
    }
    this.installedVer = deconcept.SWFObjectUtil.getPlayerVersion();
    if (!window.opera && document.all && this.installedVer.major > 7) {
        deconcept.SWFObject.doPrepUnload = true
    }
    if (o) {
        this.addParam("bgcolor", o)
    }
    var b = r ? r : "high";
    this.addParam("quality", b);
    this.setAttribute("useExpressInstall", false);
    this.setAttribute("doExpressInstall", false);
    var n = (l) ? l : window.location;
    this.setAttribute("xiRedirectUrl", n);
    this.setAttribute("redirectUrl", "");
    if (a) {
        this.setAttribute("redirectUrl", a)
    }
};
deconcept.SWFObject.prototype = {useExpressInstall: function (a) {
    this.xiSWFPath = !a ? "expressinstall.swf" : a;
    this.setAttribute("useExpressInstall", true)
}, setAttribute: function (a, b) {
    this.attributes[a] = b
}, getAttribute: function (a) {
    return this.attributes[a]
}, addParam: function (a, b) {
    this.params[a] = b
}, getParams: function () {
    return this.params
}, addVariable: function (a, b) {
    this.variables[a] = b
}, getVariable: function (a) {
    return this.variables[a]
}, getVariables: function () {
    return this.variables
}, getVariablePairs: function () {
    var a = new Array();
    var b;
    var c = this.getVariables();
    for (b in c) {
        a.push(b + "=" + c[b])
    }
    return a
}, getSWFHTML: function () {
    var f = "";
    if (navigator.plugins && navigator.mimeTypes && navigator.mimeTypes.length) {
        if (this.getAttribute("doExpressInstall")) {
            this.addVariable("MMplayerType", "PlugIn");
            this.setAttribute("swf", this.xiSWFPath)
        }
        f = '<embed type="application/x-shockwave-flash" src="' + this.getAttribute("swf") + '" width="' + this.getAttribute("width") + '" height="' + this.getAttribute("height") + '"';
        f += ' id="' + this.getAttribute("id") + '" name="' + this.getAttribute("id") + '" ';
        var c = this.getParams();
        for (var a in c) {
            f += [a] + '="' + c[a] + '" '
        }
        var b = this.getVariablePairs().join("&");
        if (b.length > 0) {
            f += 'flashvars="' + b + '"'
        }
        f += "/>"
    } else {
        if (this.getAttribute("doExpressInstall")) {
            this.addVariable("MMplayerType", "ActiveX");
            this.setAttribute("swf", this.xiSWFPath)
        }
        f = '<object id="' + this.getAttribute("id") + '" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="' + this.getAttribute("width") + '" height="' + this.getAttribute("height") + '">';
        f += '<param name="movie" value="' + this.getAttribute("swf") + '" />';
        var c = this.getParams();
        for (var a in c) {
            f += '<param name="' + a + '" value="' + c[a] + '" />'
        }
        var b = this.getVariablePairs().join("&");
        if (b.length > 0) {
            f += '<param name="flashvars" value="' + b + '" />'
        }
        f += "</object>"
    }
    return f
}, write: function (a) {
    if (this.getAttribute("useExpressInstall")) {
        var b = new deconcept.PlayerVersion([6, 0, 65]);
        if (this.installedVer.versionIsValid(b) && !this.installedVer.versionIsValid(this.getAttribute("version"))) {
            this.setAttribute("doExpressInstall", true);
            this.addVariable("MMredirectURL", escape(this.getAttribute("xiRedirectUrl")));
            document.title = document.title.slice(0, 47) + " - Flash Player Installation";
            this.addVariable("MMdoctitle", document.title)
        }
    }
    if (this.skipDetect || this.getAttribute("doExpressInstall") || this.installedVer.versionIsValid(this.getAttribute("version"))) {
        var c = (typeof a == "string") ? document.getElementById(a) : a;
        c.innerHTML = this.getSWFHTML();
        return true
    } else {
        if (this.getAttribute("redirectUrl") != "") {
            document.location.replace(this.getAttribute("redirectUrl"))
        }
    }
    return false
}};
deconcept.SWFObjectUtil.getPlayerVersion = function () {
    var b = new deconcept.PlayerVersion([0, 0, 0]);
    if (navigator.plugins && navigator.mimeTypes.length) {
        var a = navigator.plugins["Shockwave Flash"];
        if (a && a.description) {
            b = new deconcept.PlayerVersion(a.description.replace(/([a-zA-Z]|\s)+/, "").replace(/(\s+r|\s+b[0-9]+)/, ".").split("."))
        }
    } else {
        try {
            var c = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7")
        } catch (f) {
            try {
                var c = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
                b = new deconcept.PlayerVersion([6, 0, 21]);
                c.AllowScriptAccess = "always"
            } catch (f) {
                if (b.major == 6) {
                    return b
                }
            }
            try {
                c = new ActiveXObject("ShockwaveFlash.ShockwaveFlash")
            } catch (f) {
            }
        }
        if (c != null) {
            b = new deconcept.PlayerVersion(c.GetVariable("$version").split(" ")[1].split(","))
        }
    }
    return b
};
deconcept.PlayerVersion = function (a) {
    this.major = a[0] != null ? parseInt(a[0]) : 0;
    this.minor = a[1] != null ? parseInt(a[1]) : 0;
    this.rev = a[2] != null ? parseInt(a[2]) : 0
};
deconcept.PlayerVersion.prototype.versionIsValid = function (a) {
    if (this.major < a.major) {
        return false
    }
    if (this.major > a.major) {
        return true
    }
    if (this.minor < a.minor) {
        return false
    }
    if (this.minor > a.minor) {
        return true
    }
    if (this.rev < a.rev) {
        return false
    }
    return true
};
deconcept.util = {getRequestParameter: function (f) {
    var c = document.location.search || document.location.hash;
    if (c) {
        var b = c.substring(1).split("&");
        for (var a = 0; a < b.length; a++) {
            if (b[a].substring(0, b[a].indexOf("=")) == f) {
                return b[a].substring((b[a].indexOf("=") + 1))
            }
        }
    }
    return""
}};
deconcept.SWFObjectUtil.cleanupSWFs = function () {
    var c = document.getElementsByTagName("OBJECT");
    for (var b = 0; b < c.length; b++) {
        c[b].style.display = "none";
        for (var a in c[b]) {
            if (typeof c[b][a] == "function") {
                c[b][a] = function () {
                }
            }
        }
    }
};
if (deconcept.SWFObject.doPrepUnload) {
    deconcept.SWFObjectUtil.prepUnload = function () {
        __flash_unloadHandler = function () {
        };
        __flash_savedUnloadHandler = function () {
        };
        window.attachEvent("onunload", deconcept.SWFObjectUtil.cleanupSWFs)
    };
    window.attachEvent("onbeforeunload", deconcept.SWFObjectUtil.prepUnload)
}
if (Array.prototype.push == null) {
    Array.prototype.push = function (a) {
        this[this.length] = a;
        return this.length
    }
}
var getQueryParamValue = deconcept.util.getRequestParameter;
var FlashObject = deconcept.SWFObject;
var SWFObject = deconcept.SWFObject;
var sword = window.sword || {};
sword.ajax = function (c) {
    var b = {url: null, method: "post", async: false, data: "", onSuccess: $empty, onFailure: $empty};
    var a = $extend(b, c);
    new Request(a).send(a.data)
};
var $cache = sword.CacheManager = {tableVersion: "", swfpath: jsR.rootPath + "swordweb/widgets/SwordClientCache", currentCacheObj: null, callback_func: function () {
}, tableName: "", querySql: "", isReady: false, QueueList: $H(), swordcacheInstance: null, cacheHash: $H(), cacheSqlHash: $H(), cacheFunc: $H(), batchget: function (b, f) {
    var c = /FROM (\w+)\s*(WHERE)?/ig;
    var j = [];
    b.each(function (m) {
        var k = m.match(c);
        var l = RegExp.$1;
        j.include(l);
        $cache.cacheSqlHash.set(l, m);
        $cache.cacheFunc.set(l, f)
    });
    var g = [];
    var h = $H();
    j.each(function (k) {
        $cache.initCacheContainer(k);
        if ($cache.currentCacheObj) {
            $cache.currentCacheObj.get(k + "_version", function (p, l, o) {
                if (p) {
                    if ($chk(l)) {
                        var n = $cache.currentCacheObj.getServerCache(k);
                        if ($chk(n)) {
                            if (parseInt(l) != parseInt(n)) {
                                g.push(o)
                            } else {
                                var m = $cache.cacheHash.get(o);
                                m.get(o, function (q, t) {
                                    var r = $cache.cacheFunc.get(o);
                                    if (q) {
                                        var s = $cache.cacheSqlHash.get(o);
                                        var t = $cache.query(t, s, o);
                                        h.set(o, t)
                                    } else {
                                        g.push(o)
                                    }
                                })
                            }
                        } else {
                            g.push(o)
                        }
                    }
                } else {
                    g.push(o)
                }
            })
        }
    });
    if (g.length != 0) {
        var a = "ajax.sword?FromSwordLoading=true&ctrl=CacheCtrl_batchGetCacheData&sName=CacheCtrl_batchGetCacheData";
        if (jsR.config.SwordClientTiming) {
            a = a + "&sDate=" + new Date().getTime() + "&rUUID=" + pc.getRandomUUID()
        }
        sword.ajax({url: a, data: "tableNameList=" + g.join("#"), onSuccess: function (m) {
            var l = JSON.decode(m);
            if (!$defined(l.getAttr)) {
                l.getAttr = pc.getAttrFunc
            }
            _pcSwordClientAJAXTiming("31", a, l.getAttr("sessionID"), "", "CacheCtrl_batchGetCacheData");
            if (l.exception) {
                if (l.ajaxErrorPage) {
                    if (!l.exceptionMes) {
                        l.exceptionMes = ""
                    }
                    var k = JSON.decode(l.ajaxErrorPopupParam.replace(/&apos;/g, "'")) || {titleName: "出错了！", width: 412, height: 450};
                    var o = window.document;
                    var n = 0;
                    if (o.body && o.body.scrollTop) {
                        n = o.body.scrollTop
                    } else {
                        if (o.documentElement && o.documentElement.scrollTop) {
                            n = o.documentElement.scrollTop
                        }
                    }
                    k.top = k.top + n;
                    k.param = {win: window, data: l};
                    swordAlertIframe(jsR.rootPath + "sword?ctrl=SwordPage_redirect&pagename=" + l.ajaxErrorPage, k, null)
                } else {
                    this.alertError('<b><font color="red">出错了！</font></b><br><font color="blue" >错误名称</font> : ' + l.exceptionName + '  <br><font color="blue" >错误信息</font> : ' + l.exceptionMes + '<br><font color="blue" >调试信息</font> : ' + l.debugMes)
                }
            } else {
                l.data.each(function (u) {
                    var t = u.name.split("^");
                    var s = t[0];
                    if (s == "sessionID") {
                        return
                    }
                    var p = t[1];
                    var w = sword.CacheManager.cacheSqlHash.get(s);
                    var v = u.value;
                    var x = $cache.currentCacheObj.uncompress(v);
                    var q = $cache.cacheHash.get(s);
                    if (q) {
                        q.set(s, x)
                    }
                    h.set(s, $cache.query(x, w, s));
                    var r = $cache.cacheHash.get(s + "_version");
                    if (r) {
                        r.set(s + "_version", p);
                        $cache.currentCacheObj.setServerCache(s, p)
                    }
                })
            }
            _pcSwordClientAJAXTiming("32", a, l.getAttr("sessionID"), "", "CacheCtrl_batchGetCacheData")
        }, onFailure: function (k) {
        }})
    }
    f.call(this, h)
}, get: function (g, c) {
    var b = /FROM (\w+)\s*(WHERE)?/ig;
    if (g.indexOf("FROM") == -1) {
        g = "SELECT * FROM " + g
    }
    var a = g.match(b);
    this.tableName = RegExp.$1;
    this.callback_func = c;
    this.querySql = g;
    this.cacheSqlHash.set(this.tableName, g);
    this.cacheFunc.set(this.tableName, c);
    this.initCacheContainer(this.tableName);
    var f = this.cacheHash.get(this.tableName + "_version");
    if (f) {
        f.get(this.tableName + "_version", function (m, h, l) {
            if (m) {
                if ($chk(h)) {
                    var k = f.getServerCache(l);
                    if ($chk(k)) {
                        if (parseInt(h) != k) {
                            sword.CacheManager.requestCacheData(l)
                        } else {
                            var j = sword.CacheManager.cacheHash.get(l);
                            j.get(l, function (n, p) {
                                var o = sword.CacheManager.cacheFunc.get(l);
                                if (n) {
                                    p = sword.CacheManager.query(p, g, l);
                                    o(p, l)
                                } else {
                                    sword.CacheManager.requestCacheData(l)
                                }
                            })
                        }
                    } else {
                        sword.CacheManager.requestCacheData(l)
                    }
                }
            } else {
                sword.CacheManager.requestCacheData(l)
            }
        })
    }
}, requestCacheTableVersion: function (a) {
    var b = "tableName=" + a;
    sword.ajax({url: "ajax.sword?FromSwordLoading=true&ctrl=CacheCtrl_getCacheTableVersion", data: b, onSuccess: this.getVersionSuccess, onFailure: this.getVersionFail})
}, getVersionSuccess: function (a) {
    sword.CacheManager.tableVersion = JSON.decode(a).data[0].value
}, getVersionFail: function (a) {
    alert("获取服务端缓存表版本信息失败!具体原因:" + a)
}, requestCacheData: function (a) {
    var b = "ajax.sword?FromSwordLoading=true&ctrl=CacheCtrl_getCacheData&sName=CacheCtrl_getCacheData";
    if (jsR.config.SwordClientTiming) {
        b = b + "&sDate=" + new Date().getTime() + "&rUUID=" + pc.getRandomUUID()
    }
    var c = "tableName=" + a;
    sword.ajax({url: b, data: c, onSuccess: function (j) {
        var g = JSON.decode(j);
        if (!$defined(g.getAttr)) {
            g.getAttr = pc.getAttrFunc
        }
        _pcSwordClientAJAXTiming("31", b, g.getAttr("sessionID"), "", "CacheCtrl_getCacheData");
        if (g.exception) {
            if (g.ajaxErrorPage) {
                if (!g.exceptionMes) {
                    g.exceptionMes = ""
                }
                var f = JSON.decode(g.ajaxErrorPopupParam.replace(/&apos;/g, "'")) || {titleName: "出错了！", width: 412, height: 450};
                var n = window.document;
                var l = 0;
                if (n.body && n.body.scrollTop) {
                    l = n.body.scrollTop
                } else {
                    if (n.documentElement && n.documentElement.scrollTop) {
                        l = n.documentElement.scrollTop
                    }
                }
                f.top = f.top + l;
                f.param = {win: window, data: g};
                swordAlertIframe(jsR.rootPath + "sword?ctrl=SwordPage_redirect&pagename=" + g.ajaxErrorPage, f, null)
            } else {
                this.alertError('<b><font color="red">出错了！</font></b><br><font color="blue" >错误名称</font> : ' + g.exceptionName + '  <br><font color="blue" >错误信息</font> : ' + g.exceptionMes + '<br><font color="blue" >调试信息</font> : ' + g.debugMes)
            }
        } else {
            var h = g.data[0].name;
            var m = sword.CacheManager.cacheSqlHash.get(h);
            var k = sword.CacheManager.cacheFunc.get(h);
            k(sword.CacheManager.query(sword.CacheManager.init(j), m, h), h)
        }
        _pcSwordClientAJAXTiming("32", b, g.getAttr("sessionID"), "", "CacheCtrl_getCacheData")
    }, onFailure: this.fail})
}, success: function (b) {
    var a = JSON.decode(b).data[0].name;
    var f = sword.CacheManager.cacheSqlHash.get(a);
    var c = sword.CacheManager.cacheFunc.get(a);
    c(sword.CacheManager.query(sword.CacheManager.init(b), f, a), a)
}, fail: function (a) {
    alert("请求缓存表出现错误,具体原因:" + a)
}, init: function (h, g) {
    var k = JSON.decode(h);
    var c = k.data[0].value;
    var a = this.uncompress(c);
    var g = k.data[0].name;
    var b = k.data[1].value;
    var f = sword.CacheManager.cacheHash.get(g + "_version");
    if (f) {
        f.set(g + "_version", b);
        $cache.currentCacheObj.setServerCache(g, b)
    }
    var j = sword.CacheManager.cacheHash.get(g);
    if (j) {
        j.set(g, a, function (m, l, n) {
        })
    }
    return a
}, initCacheContainer: function (a) {
    if (this.currentCacheObj == null) {
        var b = top.$swfcacheobject;
        this.currentCacheObj = b
    }
    this.cacheHash.set(a, this.currentCacheObj);
    this.cacheHash.set(a + "_version", this.currentCacheObj)
}, uncompress: function (a) {
    return this.currentCacheObj.uncompress(a)
}, query: function (m, n, j) {
    var b = $H();
    var g = $H();
    var h = $H();
    var k = JSON.decode(m);
    if (k.length > 0) {
        for (var l in k[0]) {
            g.set(l, {type: "String"})
        }
    }
    b.set(j, g);
    h.set(j, k);
    sword.CacheManager.QueueList.erase(j);
    sword.CacheManager.QueueList.erase(j + "_schema");
    sword.CacheManager.QueueList.set(j, h);
    sword.CacheManager.QueueList.set(j + "_schema", b);
    var a = TrimPath.makeQueryLang(b).parseSQL(n);
    var c = a.filter(h);
    try {
        return c
    } catch (f) {
        return f
    }
}, code2name: function (b) {
    var a = "";
    if (b.PDM) {
        a = "SELECT T.{MC}  FROM {T} AS T WHERE T.{DM} == '{V}' AND T.{PDM}=='{PV}'".substitute(b)
    } else {
        a = "SELECT T.{MC}  FROM {T} AS T WHERE T.{DM} == '{V}'".substitute(b)
    }
    if ($chk(b.func)) {
        return this.get(a, function (c) {
            c = JSON.decode(c);
            if ($chk(c) && c.length > 0) {
                c = c[0][b.MC]
            } else {
                c = ""
            }
            b.func.call($cache, c)
        })
    } else {
        return this.getResultBySql(a, true, b.MC)
    }
}, getResultBySql: function (m, n, k) {
    var c = /FROM (\w+)\s*(WHERE)?/ig;
    var f = /SELECT (.*) FROM/ig;
    var p = m.match(c);
    var l = RegExp.$1;
    var h = m.match(f);
    var g = RegExp.$1;
    if ($chk(sword.CacheManager.QueueList.get(l))) {
        var j = sword.CacheManager.QueueList.get(l + "_schema");
        var a = sword.CacheManager.QueueList.get(l);
        if ($defined(n)) {
            var b = TrimPath.makeQueryLang(j).parseSQL(m).filter(a);
            if ($chk(b) && b.length > 0) {
                return b[0][k]
            } else {
                return""
            }
        } else {
            return TrimPath.makeQueryLang(j).parseSQL(m).filter(a)
        }
    } else {
        return[]
    }
}, getswordcacheInstance: function () {
    if (this.swordcacheInstance == null) {
        this.swordcacheInstance = new Persist.Store("SWORDCACHE", {swf_path: this.swfpath + "/swordcache.swf"})
    }
    return this.swordcacheInstance
}, put: function (b, f) {
    var c = this.getswordcacheInstance();
    var a = 1;
    (function () {
        a++;
        try {
            if (c.el.ready()) {
                c.el.set(c.name, "PS" + b.replace(/_/g, "__").replace(/ /g, "_s"), f);
                return
            } else {
                if (a > 5) {
                    return
                }
                setTimeout(arguments.callee, 20)
            }
        } catch (g) {
            if (a > 5) {
                return
            }
            setTimeout(arguments.callee, 20)
        }
    })()
}, load: function (b, c) {
    var f = this.getswordcacheInstance();
    var a = 1;
    (function () {
        a++;
        try {
            if (f.el.ready()) {
                val = f.el.get(f.name, "PS" + b.replace(/_/g, "__").replace(/ /g, "_s"));
                if (c) {
                    c.call(f, val !== null, val)
                }
                return
            } else {
                if (a > 5) {
                    return
                }
                setTimeout(arguments.callee, 20)
            }
        } catch (g) {
            if (a > 5) {
                return
            }
            setTimeout(arguments.callee, 20)
        }
    })()
}, remove: function (b, c) {
    var f = this.getswordcacheInstance();
    var a = 1;
    (function () {
        a++;
        try {
            if (f.el.ready()) {
                val = f.el.remove(f.name, "PS" + b.replace(/_/g, "__").replace(/ /g, "_s"));
                if (c) {
                    c.call(this, true, val)
                }
                return
            } else {
                if (a > 5) {
                    return
                }
                setTimeout(arguments.callee, 20)
            }
        } catch (g) {
            alert(g);
            if (a > 5) {
                return
            }
            setTimeout(arguments.callee, 20)
        }
    })()
}, getRDataForTName: function (tableName, Type, code) {
    var ct = $("SwordCacheData");
    var zdm = "";
    if (ct) {
        var querystr = null;
        Type == "tree" ? querystr = ct.get("queryTree") : querystr = ct.get("query");
        var queryObj = JSON.decode(querystr);
        queryObj.each(function (item, index) {
            if (item.T == tableName && item.DM) {
                zdm = item.DM
            }
        });
        if (zdm == "") {
            zdm = tableName.substring(tableName.lastIndexOf("_") + 1) + "_DM"
        }
    }
    var onRowObj = null;
    this.get(tableName, function (result, table) {
        if (result) {
            var res = eval(result);
            res.each(function (item, index) {
                if (item[zdm] == code) {
                    onRowObj = item
                }
            })
        }
    });
    return onRowObj
}};
SwordToolBar.implement({alarm: false, items: {}, buttonEvents: {}, gridMuiltCheck: function (a) {
    this.muiltCheckClick(this, a)
}, rowClick: function (f, a, b, g, c) {
    f.defaultGridCheckAction(a, f)
}, allCheckClick: function (f, c, a, b) {
    if (!$chk(b)) {
        b = $w(c).getHeaderCheckboxByName(f.associate.SwordGrid[c].muiltCheckName)
    }
    if (b.checked) {
        f.setEnabled("delete")
    } else {
        f.setDisabled("delete")
    }
    f.setDisabled("edit");
    f.setDisabled("open")
}, muiltCheckClick: function (b, a) {
    if (a.checked) {
        this.defaultGridMuiltCheckAction(b)
    } else {
        if (!a.checked) {
            b.setDisabled("delete")
        }
    }
}, defaultGridMuiltCheckAction: function (a) {
    a.setDisabled("open");
    a.setDisabled("edit");
    a.setEnabled("delete")
}, defaultGridCheckAction: function (c, f) {
    var g = f.associate.SwordGrid[c].muiltCheckName;
    var a = $w(c);
    if ($chk(a)) {
        var b = a.getCheckedRowData(g);
        if (b.length < 1) {
            f.setDisabled("open");
            f.setDisabled("edit");
            f.setDisabled("delete")
        } else {
            if (b.length == 1) {
                f.setEnabled("open");
                f.setEnabled("delete");
                f.setEnabled("edit")
            } else {
                if (b.length > 1) {
                    f.setDisabled("open");
                    f.setDisabled("edit");
                    f.setEnabled("delete")
                }
            }
        }
    }
}});
SwordValidator.implement({length: function (c) {
    var b = this.getElValue(c);
    if (b == "") {
        return true
    }
    var a = this.getLen(b);
    if (c.get("rule").contains(",")) {
        return(a >= c.get("begin") && a <= c.get("end"))
    } else {
        if ($defined(c.get("end"))) {
            return(a > c.get("begin") && a < c.get("end"))
        } else {
            return a == c.get("begin")
        }
    }
}, getLen: function (g) {
    var a = 0;
    for (var b = 0; b < g.length; b++) {
        var f = g.charCodeAt(b);
        var c = g.charAt(b);
        if ((f > 65248) || (f == 12288) || this.reg.chinese.test(c)) {
            a = a + 3
        } else {
            a = a + 1
        }
    }
    return a
}});
SwordGrid.prototype.options.autoCreateEditWindow = true;
SwordGrid.prototype.options.onRegisterEvent = $empty;
SwordGrid.prototype.options.dblshoweditwin = false;
SwordGrid.prototype.options.issort = "false";
SwordGrid.prototype.options.editRows = "true";
SwordGrid.prototype.options.vType = "fldiv";
SwordGrid.prototype.options.onRowDbClick = function (a, b, c) {
    if (this.options.dblshoweditwin != false) {
        if (!$chk(a) || !$chk(b)) {
            return
        }
        this.gridDataInitForm(this.getCheckedRowData("check")[0].tds, b)
    }
};
SwordGrid.implement({deleteGridsRows: function () {
    this.getCheckedRow("check").each(function (a) {
        this.deleting(a)
    }.bind(this))
}});
SwordForm.prototype.options.vType = "fldiv";
SwordForm.prototype.options.requiredSign = "caption";
SwordForm.prototype.options.isShowTogdiv = "true";
SwordForm.prototype.dftsize.FiledWidth = "";
Textarea.prototype.defWidth = "100%";
Textarea.prototype.defHeight = "";
Textarea.implement({getStringUTFLength: function (b) {
    var a = b.replace(/[\u4e00-\u9fa5]/g, "   ");
    return a.length
}});
i18n.nullStr = "(汉字占3个字符)";
var SwordForm_plex = new Class({Implements: [Events, Options], Extends: PageContainer, name: "SwordForm", $family: {name: "SwordForm"}, options: {sword: null, name: null, caption: null, layout: null, pNode: null, userDefine: true, onFinish: $empty}, fieldElHash: [], blurEHash: new Hash(), tempArr: [], s: "<tr>", e: "</tr>", panel: "<div align='center' class='swordfrom_wrap_div'><div class='swordform-panel-box'><div class='swordform-panel-tl'></div><div class='swordform-panel-tr'></div><div class='swordform-panel-title'><div class='x-tool' title='收缩' id='{panelID}'></div>{caption}</div></div></div>", inp: "<td colspan='{colspan}' style='{style}'><div class='swordform_field_wrap'><input type='text' defValue='{defValue}' rule='{rule}' value='{defValue}' msg='{msg}' style='float:left;{css}' id='{id}' name='{name}' class='swordform_item_oprate swordform_item_input' ", inpe: "></div></td>", initParam: function (b) {
    var a = this;
    a.htmlOptions(b);
    a.Vobj = pc.widgetFactory.create("SwordValidator");
    a.Vobj.initParam("intime");
    a.buildHTML();
    a.bindEvents.delay(50, a)
}, buildHTML: function () {
    var b = this.tempArr, f = this;
    b.push(f.panel.substitute({caption: f.options.caption, panelID: "SwordFromPanel_" + f.options.name}));
    var a = f.options.pNode.getChildren();
    var g = [];
    a.each(function (j, h) {
        if (j.get("tag") == "div") {
            if ($chk(j.get("type")) && j.get("type") == "hidden") {
                g.include(j)
            } else {
                b.push(j.outerHTML)
            }
        } else {
            this.buidTable(j)
        }
    }.bind(this));
    if (g.length > 0) {
        b.push("<div style='display: none;'>");
        for (var c = 0; c < g.length; c++) {
            b.push(g[c].outerHTML);
            b.push("<table class='swordform_field_wrap' cellspacing='0' cellpadding='0'><tbody><tr><td class='boxtd'>");
            f.createEl.hidden.run(g[c], f);
            b.push("</td></tr></tbody></table>")
        }
        b.push("</div>")
    }
    f.render()
}, buidTable: function (c) {
    var b = this.tempArr, m = this;
    b.push("<table class='tab_form' width='{w}' id='{id}' border='0' cellpadding='0' cellspacing='0' style='{style}'>".substitute({w: c.get("width"), id: c.get("id"), style: c.get("style")}));
    var a = c.getFirst();
    if (a.tagName.toLowerCase() == "colgroup") {
        b.push("<colgroup>");
        b.push(a.innerHTML);
        b.push("<colgroup>")
    }
    var h = c.getFirst("tbody").getChildren("tr");
    b.push("<tbody>");
    var l = h[0], f, g, o, j, k;
    while (l) {
        var n = l.get("id");
        if ($chk(n)) {
            b.push("<tr style='{style}' id='{id}'>".substitute({style: l.get("style"), id: n}))
        } else {
            b.push("<tr style='{style}'>".substitute({style: l.get("style")}))
        }
        f = l.getChildren();
        for (g = 0; g < f.length; g++) {
            o = f[g].tagName.toLowerCase();
            if (o == "th") {
                b.push(("<th style='{style}' colspan='{c}' rowspan='{r}' >" + f[g].innerHTML + "</th>").substitute({c: f[g].get("colspan"), r: f[g].get("rowspan"), style: f[g].get("style")}))
            } else {
                j = f[g].getFirst();
                if (j != null) {
                    k = j.get("type");
                    if (k != null) {
                        m.createEl[k].run(j, m)
                    } else {
                        b.push(j.outerHTML)
                    }
                } else {
                    m.createEl.def.run(f[g], m)
                }
            }
        }
        b.push("</tr>");
        l = l.getNext("tr")
    }
    b.push("</tbody></table>")
}, dealEvts: function (b, g) {
    var a = [], f;
    var c = this;
    ["onblur"].each(function (h) {
        f = b.get(h);
        if (f) {
            c.blurEHash.set(g, f)
        }
    })
}, createEl: {text: function (b) {
    var c = this;
    var f = c.options.name + "_" + b.get("name");
    c.fieldElHash.push(f);
    var a = [c.inp.substitute({colspan: b.getParent("td").get("colspan"), style: b.getParent("td").get("style"), id: f, name: b.get("name"), rule: b.get("rule"), biztid: b.get("biztid"), bizctrl: b.get("bizctrl"), css: b.get("css"), defValue: b.get("defValue"), maxLength: 10000, msg: b.get("msg")}), ' submitformat="', b.get("submitformat"), '" dataformat="', b.get("dataformat"), '" format="', b.get("format"), '" '];
    c.dealEvts(b, f);
    if ((b.get("disabled") == true)) {
        a[0] = a[0].replace("swordform_item_oprate swordform_item_input", "swordform_item_oprate swordform_item_input swordform_item_input_disable");
        a.push(" disabled ")
    }
    if (b.readonly == "readonly") {
        a.push(" readonly='readonly' ")
    }
    a.push(c.inpe);
    c.tempArr.push(a.join(""))
}, def: function (a) {
    this.tempArr.push("<td>" + a.innerHTML + "</td>")
}, date: function (b) {
    var c = this;
    var g = c.options.name + "_" + b.get("name");
    c.fieldElHash.push(g);
    var a = "<td colspan='{colspan}' style='{style}'><table class='swordform_field_wrap' cellspacing='0' cellpadding='0'><tbody><tr><td><input class='swordform_item_oprate swordform_item_input' id='{id}'  type='text' rule='{rule}' widget='calendar' name='{name}' dataformat='{dataformat}' widgetgetvalue='true' returnrealvalue='false' showoptions='{showOptions}' isshowclosebtn='false' isshowerasebtn='false' isshowtodaybtn='false' isshow='true' _onchange='{onchange}' tozero='false' autoctrl='true' style='float: left; width: 100%;{css}' ovalue='{defValue}' value='{defValue}' ></td><td class='dateBtn' width='17px'><div style='width:17px'></div></td></tr></tbody></table></td>";
    var f = a.substitute({id: g, colspan: b.getParent("td").get("colspan"), onchange: b.get("onchange"), style: b.getParent("td").get("style"), name: b.get("name"), rule: b.get("rule"), css: b.get("css"), defValue: b.get("defValue"), value: b.get("realvalue") || b.get("defValue"), ovalue: b.get("defValue") || " ", dataformat: b.get("dataformat") || "yyyy-MM-dd", maxLength: 10000, showOptions: b.get("showOptions") || "true,true,true,false,false,false"});
    c.tempArr.push(f)
}, select: function (a) {
    var b = this;
    var g = b.options.name + "_" + a.get("name");
    b.fieldElHash.push(g);
    b.tempArr.push("<td colspan='{colspan}' style='{style}'>".substitute({colspan: a.getParent("td").get("colspan"), style: a.getParent("td").get("style")}));
    var f = "<table class='swordform_field_wrap' cellspacing='0' cellpadding='0'><tbody><tr><td><input class='swordform_item_oprate swordform_item_input' id='{id}' type='text' widget='select' name='{name}' lines='10' lineheight='21' dataname='{dataname}' rule='{rule}'  defValue='{defValue}'  value='{value}' inputdisplay='{inputdisplay}' popdisplay='{popdisplay}' realvalue='{realvalue}' ovalue='{ovalue}' _onchange='{onchange}' dataFilter='{dataFilter}'  vtype='fldiv' style='width: 100%; float: left;' displaycode='{displaycode}' handinput='{handinput}' addallitem='{addallitem}' allitemcode='{allitemcode}'></td><td class='swordselect-selimg' vtype='fldiv' width='17px'><div style='width:17px' ></div></td></tr></tbody></table>";
    var c = f.substitute({id: g, name: a.get("name"), dataFilter: a.get("dataFilter"), onchange: a.get("onchange"), rule: a.get("rule"), defValue: a.get("defValue"), value: a.get("realvalue") || a.get("defValue"), realvalue: a.get("realvalue") || a.get("value"), ovalue: a.get("defValue") || " ", maxLength: 10000, dataname: a.get("dataname"), displayCode: a.get("displayCode"), handinput: a.get("handinput"), addAllItem: a.get("addAllItem"), allItemCode: a.get("allItemCode"), popdisplay: a.get("popdisplay"), inputdisplay: a.get("inputdisplay")});
    b.tempArr.push(c);
    if ($chk(a.innerHTML)) {
        b.tempArr.push(a.outerHTML)
    }
    b.tempArr.push("</td>")
}, hidden: function (b) {
    var c = this;
    var g = c.options.name + "_" + b.get("name");
    c.fieldElHash.push(g);
    var a = "<input id='{id}' class='swordform_item_oprate swordform_item_input' type='hidden' name='{name}' value='{value}' defvalue='{defValue}' ovalue='{ovalue}'>";
    var f = a.substitute({id: g, name: b.get("name"), defValue: b.get("defValue"), value: b.get("realvalue") || b.get("defValue"), ovalue: b.get("defValue") || " "});
    c.tempArr.push(f)
}}, render: function () {
    this.options.pNode.innerHTML = this.tempArr.join("")
}, bindEvents: function () {
    var f = this, c;
    f.addPanelEvt();
    for (var a = 0; a < f.fieldElHash.length; a++) {
        c = $(f.fieldElHash[a]);
        if (!c.disabled) {
            c.addEvent("keyup", f.focus.bind(f));
            var b = c.get("widget") ? c.get("widget").toLowerCase() : "text";
            f.addElEvent(c, b);
            f.addElEventFType[b].run(c, f)
        }
    }
}, addPanelEvt: function () {
    var a = this;
    $("SwordFromPanel_" + a.options.name).addEvent("click", function (c) {
        var b = new Event(c).target;
        var f = this.options.pNode.getChildren("table");
        if (b.hasClass("x-tool-s")) {
            b.set("title", "收缩");
            b.removeClass("x-tool-s");
            this.options.pNode.getElement("div.swordform-panel-box").setStyle("border-bottom", "none");
            f.each(function (g) {
                if (g.hasClass("x-tool-dis") && g.getStyle("display") == "none") {
                    g.setStyle("display", "");
                    g.removeClass("x-tool-dis")
                }
            }.bind(this))
        } else {
            b.set("title", "展开");
            b.addClass("x-tool-s");
            this.options.pNode.getElement("div.swordform-panel-box").setStyle("border-bottom", "1px #7F9DB9 solid");
            f.each(function (g) {
                if (g.getStyle("display") != "none") {
                    g.setStyle("display", "none");
                    g.addClass("x-tool-dis")
                }
            }.bind(this))
        }
    }.bind(this))
}, addElEvent: function (b, a) {
    var f = this;
    var c = b.get("rule");
    c = $defined(c) && c != "";
    if (a == "text") {
        f.format(b)
    }
    if (c) {
        this.Vobj._add(b)
    }
}, addElEventFType: {text: function (a) {
}, calendar: function (c) {
    var b = c.getParent("tr").getElement(".dateBtn");
    var a = pc.getCalendar();
    a.setValidate(this.Vobj);
    a.dateInput = c;
    a.dateBtn = b;
    if ($chk(c.get("_onchange"))) {
        a.dateInput.store("onChange", c.get("_onchange"))
    }
    a.addEventToEl("input");
    a.addEventToEl("div")
}, select: function (b) {
    var a = b.getParent("tr").getElement(".swordselect-selimg");
    var f = pc.getSelect();
    f.setValidate(this.Vobj);
    f.box = b;
    var c = b.getParent("table").getNext();
    if (c) {
        f.box.store("data", c.getChildren("div"))
    }
    if ($chk(b.get("_onchange"))) {
        f.box.store("onChange", b.get("_onchange"))
    }
    if (!f.hasBoxDiv) {
        f.createBoxDiv();
        f.hasBoxDiv = true
    }
    f.selDiv = a;
    f.addEventToEl("input");
    f.addEventToEl("div")
}}, initData: function (b) {
    if (!$chk(b)) {
        return
    }
    var a = this, c;
    b = b.data;
    a.fieldElHash.each(function (f) {
        c = $(f).get("name");
        if (b[c]) {
            a.setValue(c, b[c].value)
        }
    }.bind(a))
}, focus: function (f) {
    var c = this.fieldElHash;
    f = new Event(f);
    if (f.key == "enter") {
        var b = c.indexOf(f.target.get("id"));
        if (b == c.length - 1) {
            return
        }
        var a = $(c[++b]);
        while (a && a.disabled) {
            b++;
            if (b != c.length - 1) {
                a = $(c[b])
            } else {
                a = null
            }
        }
        if (a) {
            a.focus();
            a.click()
        } else {
            f.target.blur()
        }
    }
}, format: function (a) {
    var b = this;
    a.addEvents({focus: function () {
        if (a.get("format")) {
            a.set("value", a.get("oValue") || a.get("defValue"))
        }
        a.select()
    }.bind(b), blur: function () {
        b.initFormatVal(a);
        var c = this.blurEHash.get(a.get("id"));
        if (c) {
            sword_getFunc(c)[0](a)
        }
    }.bind(b)})
}, initFormatVal: function (a) {
    var b = this;
    if (!(!a.get("format") && !a.get("submitformat"))) {
        a.set({oValue: a.get("value"), value: b.getFormatVal(a)});
        a.set("realvalue", b.getFormatVal(a, "submitformat"))
    }
}, getFormatVal: function (a, b) {
    var c = a.get(b);
    if (!$defined(b)) {
        c = a.get("format")
    }
    if (!$defined(c)) {
        return a.get("oValue")
    }
    return sword_fmt.formatText(a, (a.get("tag") == "label") ? a.get("text") : a.get("value"), "", c).value
}, resetAll: function (c) {
    c = c || [];
    var b = this, a;
    b.fieldElHash.each(function (g) {
        if (c.indexOf(g) == -1) {
            a = $(g);
            a.set({value: "", text: "", oValue: ""});
            if (a.get("realvalue")) {
                a.set({code: "", realvalue: ""})
            }
            var f = a.get("defValue");
            if (f != null) {
                b.setValue(a.get("name"), f)
            }
        }
    }.bind(b))
}, setValue: function (b, a) {
    var g = this;
    var f = g.getField(b);
    if (!f) {
        return
    }
    f.set("value", a);
    var c = this.getElType(f);
    if (c == "select") {
        var j = pc.getSelect();
        j.box = f;
        var h = f.getParent("table").getNext();
        if (h) {
            j.box.store("data", h.getChildren("div"))
        }
        j.initData(a, f)
    } else {
        if (c == "calendar") {
            pc.getCalendar().initData(a, f)
        }
    }
    g.initFormatVal(f)
}, getField: function (a) {
    return $(this.options.name + "_" + a)
}, getSubmitData: function () {
    var c = this;
    var b = {beanname: c.options.beanname, sword: "SwordForm", name: c.options.name, data: {}};
    var a;
    c.fieldElHash.each(function (f) {
        a = $(f);
        b.data[a.get("name")] = {value: a.get("realvalue") || a.get("value")}
    }.bind(c));
    return b
}, validate: function (a) {
    var g = this, f, c = true;
    var b = ($chk(a)) ? [g.options.name + "_" + a] : g.fieldElHash;
    b.each(function (h) {
        f = $(h);
        if ($chk(f.get("rule"))) {
            if (!g.Vobj.validate(f)) {
                c = false
            }
        }
    });
    return c
}, isHasFile: function () {
    return false
}, getValue: function (a) {
    var b = this.getField(a);
    return(b) ? (b.get("realvalue") || b.get("value")) : null
}, disable: function (a) {
    if ($type(a) == "string") {
        a = [a]
    }
    a = a || this.fieldElHash;
    a.each(function (f) {
        var c = $(this.options.name + "_" + f) || $(f);
        var b = this.getElType(c);
        if (b == "select" || b == "calendar") {
            if (b == "calendar") {
                c.set("disabled", true).addClass("calendar_input_disable");
                var h = c.getParent().getNext();
                if (c.cloneFlag) {
                    h.setStyle("display", "");
                    h.getNext().setStyle("display", "none")
                } else {
                    h.clone().addClass("dateBtn_disable").inject(h, "before");
                    h.setStyle("display", "none");
                    c.cloneFlag = true
                }
            } else {
                c.set("disabled", "true").addClass("select_input_disable");
                var g = c.getParent().getNext();
                if (c.cloneFlag) {
                    g.setStyle("display", "");
                    g.getNext().setStyle("display", "none")
                } else {
                    g.clone().addClass("swordselect-selimg-disable").inject(g, "before");
                    g.setStyle("display", "none");
                    c.cloneFlag = true
                }
            }
        } else {
            c.set("disabled", "true").addClass("swordform_item_input_disable")
        }
    }.bind(this))
}, enable: function (a) {
    if ($type(a) == "string") {
        a = [a]
    }
    a = a || this.fieldElHash;
    a.each(function (f) {
        var c = $(this.options.name + "_" + f) || $(f);
        var b = this.getElType(c);
        if (b == "select" || b == "calendar") {
            if (b == "calendar") {
                c.erase("disabled").removeClass("calendar_input_disable");
                var h = c.getParent().getNext();
                h.setStyle("display", "none");
                h.getNext().setStyle("display", "")
            } else {
                var g = c.getParent().getNext();
                c.erase("disabled").removeClass("select_input_disable");
                g.setStyle("display", "none");
                g.getNext().setStyle("display", "")
            }
        } else {
            c.erase("disabled").removeClass("swordform_item_input_disable")
        }
    }.bind(this))
}, getElType: function (a) {
    return a.get("widget") ? a.get("widget").toLowerCase() : "text"
}});
SwordTree.implement({getTreeData: function (f) {
    var g = this.getAllNode();
    var c = [];
    var a = $defined(f.length) ? f.length : 0;
    var b = 0;
    g.each(function (k, h) {
        c[b] = {};
        for (var j = 0; j < a; j++) {
            c[b][f[j]] = k.get(f[j])
        }
        b++
    });
    return c
}, setSelectNode: function (b) {
    this.select.selDiv.fireEvent("click");
    var a = this.getTreeNode(new Hash({code: b}));
    this.setSelectedNode(a)
}, exTreeDataFunc: function () {
    for (var a = 0; a < pc.swordCacheArray.length; a++) {
        var b = pc.swordCacheArray[a];
        if (b.WN == this.options.treeContainerName && b.load == "lazy") {
            return this.cacheResult(this.tree_buildSql(b, false), b.WN)
        }
    }
}, cacheTreeDataFunc: function (f, g, c) {
    if (!$chk(c)) {
        c = ""
    }
    var a = g.data.filter(function (j, h) {
        return j.pcode == c
    });
    var b = {data: a, name: f, sword: "SwordTree"};
    return b
}, cacheTreeCodePath: function (g, c, a) {
    var f = g;

    function b(k) {
        for (var h = 0; h < c.data.length; h++) {
            var j = c.data[h];
            if (j.code == k) {
                if (!$chk(j.pcode)) {
                    break
                }
                f = j.pcode + "," + f;
                b(j.pcode);
                break
            }
        }
    }

    b(g);
    a.set("codePath", f)
}, cacheResult: function (c, a) {
    var b = null;
    $cache.get(c, function (f, g) {
        b = {data: f, name: a, sword: "SwordTree"};
        if (pc.initData == null) {
            pc.initData = {}
        }
        if (pc.initData.data == null) {
            pc.initData.data = []
        }
        pc.initData.data.include(b)
    });
    return b
}, tree_buildSql: function (b, a) {
    var f = "";
    var c = null;
    if (!b.MC) {
        if (!c) {
            c = b.T.substring(b.T.lastIndexOf("_") + 1)
        }
        b.MC = c + "MC"
    }
    if (!b.DM) {
        if (!c) {
            c = b.T.substring(b.T.lastIndexOf("_") + 1)
        }
        b.DM = c + "_DM"
    }
    if (!$defined(b.PDM)) {
        if (!c) {
            c = b.T.substring(b.T.lastIndexOf("_") + 1)
        }
        b.PDM = "SJ" + c + "_DM"
    }
    f = "SELECT T.{DM} AS code,T.{PDM} AS pcode, T.{MC} AS caption,T.* FROM {T} AS T";
    if (b.PDM == "") {
        f = "SELECT T.{DM} AS code, T.{MC} AS caption,T.* FROM {T} AS T"
    }
    f = f.substitute(b);
    if (b.W && !a) {
        f += " WHERE " + b.W
    }
    f += " ORDER BY  code";
    return f
}});
SwordTree.Draw.implement({addTreeNode: function (h, j, q) {
    var g;
    var l;
    var c;
    if ($defined(q)) {
        l = q
    } else {
        l = this.getSelectedNode();
        if (this.isLazyTree() && l && !l.get(this.options.isLoadSign)) {
            var f = function (s) {
                var r = this.getTreeNode(s);
                this.setSpanClass(r, "gadGetSpan", this.options.treeStyle.treeGadGetNone);
                this.setSpanClass(r, "iconSpan", this.options.treeStyle.treeCloseIcon)
            }.bind(this);
            this.lazyExtend(l, f, h);
            return
        }
    }
    if ($type(h) == "SwordTree.Iterator") {
        g = h
    } else {
        g = new SwordTree.JSONIterator(h);
        g.setLastSign(true)
    }
    if ($defined(l)) {
        l.store("data", h);
        if ($defined(j)) {
            if (!g.hasChildNodes()) {
                this.setSpanClass(l, "gadGetSpan", this.options.treeStyle.treeGadGetNone);
                this.setSpanClass(l, "iconSpan", this.options.treeStyle.treeCloseIcon);
                return
            }
        }
        var k = this.beforeAddTreeNode(l);
        var a = k.childrenElement;
        c = this.createNode(a, g, l.get("depth").toInt(), j);
        c.setProperty(this.options.isLoadSign, true);
        if ($chk(l.get(this.options.cascadeSign.id))) {
            c.setProperty(this.options.cascadeSign.pid, l.get(this.options.cascadeSign.id))
        }
        var n = k.gadGetSpan;
        if (n.hasClass(this.options.treeStyle.treeGadGetPlus)) {
            this.extend(l)
        }
        if (this.options.treeType == "1") {
            var m = l.getFirst("span[type='wrapperSpan']");
            var b = m.getFirst("span[type='checkSpan']");
            if (b.hasClass(this.options.treeStyle.treeNodeChecked)) {
                var o = this.getCheckedState(b);
                this.checkedClick(c, o, false);
                if (this.options.isCascadeCheckedClick == "true") {
                    var p = a.getElements("div.tree-node");
                    if (p) {
                        this.changeCheckedState2(p.getElement("span[type='checkSpan']"), 1);
                        p.set(this.options.checkSign, "true")
                    }
                }
            }
        }
    } else {
        c = this.createNode(this.container, g, this.depth + 1);
        this.container.getFirst("div").grab(c)
    }
    this.reset();
    this.extendNodeByIdPath()
}});
SwordSelect.implement({initialize: function (a) {
    if (pc.SwordSelectWindowClick) {
        return
    }
    pc.SwordSelectWindowClick = true;
    window.document.addEvent("click", function (c) {
        var b = c.target;
        while (b.parentNode && b != this.box && b != this.selDiv) {
            b = b.parentNode
        }
        if (b != this.box && b != this.selDiv && this.box) {
            if (this.box.get("display") == "true") {
                if ($defined(this.box.onSelectBlur)) {
                    this.box.onSelectBlur(this.box.get("value"))
                }
            }
            if (this.box.get("handInput") == "true" && !$chk(this.box.get("realvalue")) && $chk(this.box.get("value"))) {
                this.box.set({code: this.box.get("value"), realvalue: this.box.get("value")})
            }
            this.hide();
            if (!$(c.target).hasClass("sGrid_data_row_item_select")) {
                this.execGridOnFinished()
            }
        }
    }.bind(this))
}, exSelectDataFunc: function () {
    for (var a = 0; a < pc.swordCacheArray.length; a++) {
        var b = pc.swordCacheArray[a];
        if (b.T == this.box.get("dataname") && b.load == "lazy") {
            return this.cacheResult(this.sel_buildSql(b, false), b.WN)
        }
    }
}, cacheResult: function (c, a) {
    var b = null;
    $cache.get(c, function (g, h) {
        var f = $H({data: [
            {data: g, dataName: h, sword: "SwordSelect"}
        ]});
        b = f.data;
        if (!$chk(pc.initData)) {
            pc.initData = f
        } else {
            pc.initData.data.extend(b)
        }
    });
    return $defined(b) ? b[0].data : b
}, sel_buildSql: function (b, a) {
    var f = "";
    var c = null;
    if (!b.MC) {
        if (!c) {
            c = b.T.substring(b.T.lastIndexOf("_") + 1)
        }
        b.MC = c + "MC"
    }
    if (!b.DM) {
        if (!c) {
            c = b.T.substring(b.T.lastIndexOf("_") + 1)
        }
        b.DM = c + "_DM"
    }
    if (b.PDM) {
        f = "SELECT T.{DM} AS code,T.{PDM} AS pcode, T.{MC} AS caption,T.* FROM {T} AS T".substitute(b)
    } else {
        f = "SELECT T.{DM} AS code, T.{MC} AS caption,T.* FROM {T} AS T".substitute(b)
    }
    if (b.W && !a) {
        f += " WHERE " + b.W
    }
    f += " ORDER BY  code";
    return f
}});
function pageAfter() {
    var a = window.initView || $empty;
    if (window.$init_gs_caculate) {
        $init_gs_caculate()
    }
    a.run()
}
function jsDelegate(f) {
    var g = JSON.encode(f.data);
    if (g == '"{}"') {
        g = ""
    }
    var c = pc.getReq({tid: $defined(f.tid) ? f.tid : "", ctrl: $defined(f.ctrl) ? f.ctrl : "", widgets: [
        {sword: "attr", name: "jsdelegate", value: g}
    ]});
    if (f.widgetDatas) {
        for (var b = 0; b < f.widgetDatas.length; b++) {
            var h = f.widgetDatas[b].name;
            if (h && $defined($w(h).validate)) {
                if (!$w(h).validate()) {
                    return
                }
            }
        }
        c.data.extend(f.widgetDatas)
    }
    if (f.isAutoFill == "false") {
        f, loaddata = "widget";
        c.data.push({sword: "attr", name: "s5_widgetloaddata", value: "true"});
        var a = f.onSuccess;
        if (a) {
            f.onSuccess = function (k) {
                var j = JSON.decode(k.getAttr("s5_datamap"));
                a(j)
            }
        }
    }
    f.req = c;
    pc.postReq(f)
}
function AddBizCode2URL(c, b) {
    if (!$chk(c) || !$defined(c)) {
        return""
    }
    var g = c;
    if (c.indexOf("?") != -1) {
        g = pageContainer.getServerName(c)
    }
    if (jsR.config.SwordClientTiming) {
        if (c.indexOf("sDate") == -1) {
            c = (c + ((c.indexOf("?") == -1) ? "?" : "&") + "sDate=" + new Date().getTime())
        }
        if (c.indexOf("rUUID") == -1) {
            c = c + "&rUUID=" + pageContainer.getRandomUUID()
        }
        if (c.indexOf("sName") == -1) {
            c = c + "&sName=" + g
        }
    }
    var h = _getBizCode_(b);
    for (var f in h) {
        var a = h[f];
        if ($chk(a)) {
            c = (c + ((c.indexOf("?") == -1) ? "?" : "&") + f + "=" + a)
        }
    }
    return c
}
function _getBizCode_(f) {
    var j = _GetParameter_("gwxh", f);
    var a = _GetParameter_("gndm", f);
    var h = _GetParameter_("zndm", f);
    var g = _GetParameter_("gnjdm", f);
    var b = _GetParameter_("jsdm", f);
    var c = _GetParameter_("gwssswjg", f);
    return{gwxh: j, gndm: a, zndm: h, gnjdm: g, jsdm: b, gwssswjg: c}
}
function _GetParameter_from_Res(b, a) {
    return($defined(a) ? a : pc).getInitData().getAttr(b) || ""
}
function _GetParameter_(h, g) {
    var f = window.location.search;
    var a = h.length;
    var c = f.indexOf(h);
    if (c == -1) {
        return _GetParameter_from_Res(h, g)
    }
    c += a + 1;
    var b = f.indexOf("&", c);
    if (b == -1) {
        return f.substring(c)
    } else {
        return f.substring(c, b)
    }
}
var _PR_, _FUC_, _POPALI_, _WF_, _STS_;
function _OverWritePostReq() {
    _PR_ = PageContainer.prototype.postReq;
    PageContainer.implement({postReq: function (b) {
        var a = {ctrl: AddBizCode2URL(b.req.ctrl), tid: AddBizCode2URL(b.req.tid), bindParam: true};
        $extend(b.req, a);
        _PR_.bind(this)(b)
    }, getUploadCommit: function () {
        if (!$defined(this.uploadCommit)) {
            this.uploadCommit = this.widgetFactory.create("SwordFileUpload");
            _OverWriteUploadCommit()
        }
        return this.uploadCommit
    }});
    _POPALI_ = SwordPopUpBox.prototype.alertIframe;
    SwordPopUpBox.implement({alertIframe: function (f, c, b) {
        var a = {message: AddBizCode2URL(f.message, b)};
        _POPALI_.bind(this)($extend(f, a), c)
    }});
    _WF_ = WidgetFactory.prototype.create;
    WidgetFactory.implement({create: function (b) {
        var a = _WF_.bind(this)(b);
        if ($type(b) != "string" && b.get("sword") == "SwordTab" && !$defined(_STS_)) {
            _STS_ = SwordTab.prototype.selectIndex;
            SwordTab.implement({selectIndex: function (c) {
                if (this.options.tabType != "div") {
                    this.options.tabIframes.each(function (g, f) {
                        this.options.tabIframes[f] = AddBizCode2URL(g)
                    }.bind(this))
                }
                _STS_.bind(this)(c)
            }})
        }
        return a
    }});
    pageContainer.widgetFactory = new WidgetFactory()
}
function _OverWriteUploadCommit() {
    _FUC_ = SwordFileUpload.prototype.commit;
    SwordFileUpload.implement({commit: function (a, b) {
        this.options.postData.ctrl = AddBizCode2URL(this.options.postData.ctrl);
        _FUC_.bind(this)(a, b)
    }})
}
function setCacheData(a, b) {
    if ($cache) {
        $cache.initCacheContainer(a);
        var c = $cache.cacheHash.get(a);
        c.set(a, b)
    }
}
function getCacheData(a, f, b) {
    if (!b) {
        b = "select"
    }
    if (!$cache.cacheHash.get(a)) {
        $cache.initCacheContainer(a)
    }
    var c = $H({data: []});
    $cache.cacheHash.get(a).get(a, function (h, j) {
        if (h) {
            var g = JSON.decode(j);
            if (b == "select") {
                c.data[0] = {data: g, dataName: f, sword: "SwordSelect"};
                pc.reloadSel(f, c)
            } else {
                if (b == "tree") {
                    c.data[0] = {data: g, name: f, sword: "SwordTree"}
                } else {
                    if (b == "form") {
                        c.data[0] = {data: g, name: f, sword: "SwordForm"}
                    }
                }
            }
        }
    });
    return c.data[0]
}
function pullTreeBefore() {
    var a = $("SwordCacheData");
    if (a && a.get("queryTree")) {
        pullTreeBefore_new(a.get("queryTree"))
    }
    var b = [];
    b = $(document.body).getElements("div[pulltreetype]");
    b.each(function (g, c) {
        var h = "";
        g.setProperty("rootPcode", "null");
        var f = g.getProperty("pulltreetype").toUpperCase();
        if (["XZQH", "HYDM"].contains(f)) {
            g.setProperty("onCreateNode", "createLeafNode(this,'" + f + "')")
        }
        if (f == "XZQH") {
            h = "SELECT  a.XZQHSZ_DM AS code,a.XZQHMC AS caption,a.SJXZQHSZ_DM AS pcode FROM DM_GY_XZQH AS a ORDER BY  code"
        } else {
            if (f == "HYDM") {
                h = "SELECT a.HY_DM AS code,a.HYMC AS caption,a.SJHY_DM AS pcode FROM DM_GY_HY AS a ORDER BY  code"
            }
        }
        cacheResult(h, g.get("name"))
    })
}
function cacheResult(g, c, b, a) {
    var f = null;
    $cache.get(g, function (h, k) {
        if (a) {
            var j = h, n = [];
            for (var m = 0; j && m < j.length; m++) {
                var l = j[m];
                if ((a)(l)) {
                    n.include(l)
                }
            }
        } else {
            n = h
        }
        f = {data: n, name: c, sword: "SwordTree"};
        if (pc.initData == null) {
            pc.initData = {}
        }
        if (pc.initData.data == null) {
            pc.initData.data = []
        }
        pc.initData.data.include(f);
        if (b) {
            if (b == "false") {
                $w(c).reloadSelectData(f)
            } else {
                $w(b).getWidget(c).reloadSelectData(f)
            }
        }
    });
    return f
}
function _$tree_buildSql$_(b, a) {
    var f = "";
    var c = null;
    if (!b.MC) {
        if (!c) {
            c = b.T.substring(b.T.lastIndexOf("_") + 1)
        }
        b.MC = c + "MC"
    }
    if (!b.DM) {
        if (!c) {
            c = b.T.substring(b.T.lastIndexOf("_") + 1)
        }
        b.DM = c + "_DM"
    }
    if (!$defined(b.PDM)) {
        if (!c) {
            c = b.T.substring(b.T.lastIndexOf("_") + 1)
        }
        b.PDM = "SJ" + c + "_DM"
    }
    f = "SELECT T.{DM} AS code,T.{PDM} AS pcode, T.{MC} AS caption,T.* FROM {T} AS T";
    if (b.PDM == "") {
        f = "SELECT T.{DM} AS code, T.{MC} AS caption,T.* FROM {T} AS T"
    }
    f = f.substitute(b);
    if (b.W && !a) {
        f += " WHERE " + b.W
    }
    f += " ORDER BY  code";
    return f
}
function pullTreeBefore_new(a) {
    if ($chk(a)) {
        var b = JSON.decode(a);
        b.each(function (f, c) {
            if (f.load != "lazy") {
                cacheResult(_$tree_buildSql$_(f, false), f.WN)
            }
        })
    }
}
function cacheTreeNode(a, b) {
    if (!b) {
        return
    }
    extendLeafNode(a, b)
}
function extendLeafNode(n, c) {
    var b = c.get("code");
    if ($defined(b)) {
        if (n.options.cacheLazy == "true") {
            var h = n.options.cacheDataStr.data;
            for (var f = 0; f < h.length; f++) {
                var a = h[f].pcode;
                if (a == b) {
                    l = true;
                    break
                }
            }
        } else {
            var h = n.dom.domainData;
            var j = n.options.cascadeSign.pid;
            var l = false;
            if ($defined(h) && h.length > 0) {
                for (var f = 0; f < h.length; f++) {
                    var a = (h[f][j] || h[f][j.toUpperCase()]);
                    if (a == b) {
                        l = true;
                        break
                    }
                }
            }
        }
        c.setProperty("leaftype", l ? "0" : "1");
        if (!l) {
            var m = c.getFirst("span[type='wrapperSpan']");
            var k = m.getFirst("span[type='gadGetSpan']");
            k.removeClass(n.options.treeStyle.treeGadGetPlus);
            k.addClass(n.options.treeStyle.treeGadGetNone);
            var g = m.getFirst("span[type='iconSpan']");
            g.removeClass(n.options.treeStyle.treeLeafIcon);
            g.addClass(n.options.treeStyle.treeCloseIcon)
        }
    }
}
function createLeafNode(a, f, b) {
    var c = f.toUpperCase();
    if (["XZQH", "HYDM"].contains(c)) {
        extendLeafNode(a, b)
    }
}
function filterBxjTree(k, a, f, n, j, c) {
    var m = $splat(a);
    var l = [];
    var b = null;
    if (f == "xzqh") {
        m.each(function (o) {
            if (o.endWith("0000")) {
                l.include(o.substring(0, 2))
            } else {
                if (o.endWith("00")) {
                    l.include(o.substring(0, 4))
                }
            }
        });
        b = {T: c || "T_DM_GY_XZQH", PDM: "SJXZQHSZ_DM", DM: "XZQHSZ_DM", MC: "XZQHMC", WN: k}
    } else {
        if (f == "hy") {
            m.each(function (o) {
                if (o.endWith("    ")) {
                    l.include(o.substring(0, 2))
                } else {
                    if (o.endWith("00")) {
                        l.include(o.substring(0, 4))
                    }
                }
            });
            b = {T: c || "T_DM_GY_HY", PDM: "SJHY_DM", DM: "HY_DM", MC: "HYMC", WN: k}
        } else {
            if (f == "djzclx") {
                m.each(function (o) {
                    if (o.endWith("00")) {
                        l.include(o.substring(0, 1))
                    } else {
                        if (o.endWith("0")) {
                            l.include(o.substring(0, 2))
                        }
                    }
                });
                b = {T: c || "T_DM_DJ_DJZCLX", PDM: "SJDJZCLX_DM", DM: "DJZCLX_DM", MC: "DJZCLXMC", WN: k}
            }
        }
    }
    if (b) {
        var h = queryTreeCallback(b, function (o) {
            var p = o.code + "";
            if (_$dealCondition$_(p, l, j)) {
                return true
            }
        });
        var g = null;
        if ($chk(n)) {
            g = $w(n).getWidget(k)
        } else {
            g = $w(k)
        }
        if (g) {
            g.reloadSelectData(h)
        } else {
            alert("请检查设置的formName或者treeName是否正确")
        }
    } else {
        alert("树的类型定义错误，请检查是否为以下三种[xzqh,hy,djzclx]")
    }
}
function _$dealCondition$_(f, b, c) {
    var a = true;
    if (c) {
        b.each(function (g) {
            a = a && !f.startWith(g)
        })
    } else {
        a = false;
        b.each(function (g) {
            a = a || f.startWith(g)
        })
    }
    return a
}
function queryTreeCallback(a, b, f, c) {
    if ($chk(a)) {
        var g = _$tree_buildSql$_(a);
        if (f) {
            if (f == "false") {
                $w(a.WN).options.rootPcode = $chk(c) ? c : undefined
            } else {
                $w(f).getWidget(a.WN).options.rootPcode = $chk(c) ? c : undefined
            }
        }
        return cacheResult(g, a.WN, f, b)
    }
}
function queryTreeData(a, f, c, j) {
    if ($chk(a)) {
        var h = "";
        var b = "";
        if (!a.MC) {
            var g = a.T.substring(a.T.lastIndexOf("_") + 1);
            a.MC = g + "MC"
        }
        if (!a.DM) {
            var g = a.T.substring(a.T.lastIndexOf("_") + 1);
            a.DM = g + "_DM"
        }
        if (a.PDM) {
            h = "SELECT T.{DM} AS code,T.{PDM} AS pcode, T.{MC} AS caption,T.* FROM {T} AS T".substitute(a)
        } else {
            h = "SELECT T.{DM} AS code, T.{MC} AS caption,T.* FROM {T} AS T".substitute(a)
        }
        b = h;
        if (a.W) {
            b += " WHERE " + a.W
        }
        if (f) {
            if (f == "false") {
                $w(a.WN).options.rootPcode = $chk(c) ? c : undefined
            } else {
                $w(f).getWidget(a.WN).options.rootPcode = $chk(c) ? c : undefined
            }
        }
        if (!$chk(j)) {
            cacheResult(b, a.WN, f)
        } else {
            cacheBxjResult(h, a.WN, f, j)
        }
    }
}
function cacheBxjResult(c, b, a, f) {
    $cache.get(c, function (g, j) {
        var n = g;
        var m = [];
        var o = new Array();
        var k = new Array();
        for (var l = 0; l < n.length; l++) {
            var h = n[l];
            if (f == h.code) {
                m.include(h);
                o.include(h.code)
            }
        }
        var l = 0;
        while (l < 6) {
            l++;
            if (o.length == 0 && k.length == 0) {
                break
            }
            if (o.length != 0) {
                o.each(function (p) {
                    n.each(function (q) {
                        if (q.pcode == p) {
                            m.include(q);
                            k.include(q.code)
                        }
                    })
                });
                o.empty()
            } else {
                k.each(function (p) {
                    n.each(function (q) {
                        if (q.pcode == p) {
                            m.include(q);
                            o.include(q.code)
                        }
                    })
                });
                k.empty()
            }
        }
        data = {data: m, name: b, sword: "SwordTree"};
        if (pc.initData == null) {
            pc.initData = {}
        }
        if (pc.initData.data == null) {
            pc.initData.data = []
        }
        pc.initData.data.include(data);
        if (a) {
            if (a == "false") {
                $w(b).reloadSelectData(data)
            } else {
                $w(a).getWidget(b).reloadSelectData(data)
            }
        }
    })
}
function selectBefore() {
    var f = $("SwordCacheData") || $("SwordPageData");
    if (!f) {
        return
    }
    var a = f.get("query");
    if (a) {
        var c = JSON.decode(a);
        var b = [];
        c.each(function (h, g) {
            if (h.load != "lazy") {
                var k = "";
                if (!h.MC) {
                    var j = h.T.substring(h.T.lastIndexOf("_") + 1);
                    h.MC = j + "MC"
                }
                if (!h.DM) {
                    var j = h.T.substring(h.T.lastIndexOf("_") + 1);
                    h.DM = j + "_DM"
                }
                if (h.PDM) {
                    k = "SELECT T.{DM} AS code,T.{PDM} AS pcode, T.{MC} AS caption,T.* FROM {T} AS T".substitute(h)
                } else {
                    k = "SELECT T.{DM} AS code, T.{MC} AS caption,T.* FROM {T} AS T".substitute(h)
                }
                if (h.W) {
                    k += " WHERE " + h.W
                }
                b.push(k)
            }
        });
        $cache.batchget(b, function (g) {
            g.forEach(function (l, j) {
                var h = $H({data: [
                    {data: l, dataName: j, sword: "SwordSelect"}
                ]});
                if (!$chk(pc.initData)) {
                    pc.initData = h
                } else {
                    pc.initData.data.extend(h.data)
                }
            })
        })
    }
}
function changeSelectData() {
    var c = [];
    var b = [];
    var a = 0;
    if (pc.initData == null) {
        pc.initData = {}
    }
    if (pc.initData.type == "static") {
        return
    }
    if (pc.initData.data == null) {
        pc.initData.data = []
    }
    pc.initData.data.each(function (h, g) {
        if (h.sword == "SwordSelect") {
            var f = h.dataName;
            var j = [];
            findParentSelectName(f, j);
            if (j.length != 0) {
                b[a] = j;
                c[a] = h.data;
                a++
            }
        }
    }.bind(this));
    for (a = 0; a < c.length; a++) {
        pc.initData.data.each(function (h, g) {
            var j = $$("div[name='" + b[a] + "']");
            if (j && j.length > 0) {
                var f = j[0].get("dataName")
            }
            if (h.sword == "SwordSelect" && f.contains(h.dataName)) {
                if (h.collapseNewStatus != "true") {
                    h.data.each(function (k, l) {
                        k.pcode = null
                    }.bind(this))
                }
                h.data.extend(c[a]);
                h.collapseNewStatus = "true"
            }
        }.bind(this))
    }
}
function findParentSelectName(a, h) {
    var g = $$("div[dataName='" + a + "'][type='select'][parent]");
    if (g.length == 0) {
        return null
    } else {
        for (var b = 0; b < g.length; b++) {
            var f = g[b].getProperty("parent");
            var c = findParentSelectName(f, h);
            if (c == null) {
                h.include(f);
                return""
            }
        }
    }
}
function selectDataFalter(b, a) {
    if ($chk(b)) {
        var f = "";
        if (!b.MC) {
            var c = b.T.substring(b.T.lastIndexOf("_") + 1);
            b.MC = c + "MC"
        }
        if (!b.DM) {
            var c = b.T.substring(b.T.lastIndexOf("_") + 1);
            b.DM = c + "_DM"
        }
        if (b.PDM) {
            f = "SELECT T.{DM} AS code,T.{PDM} AS pcode, T.{MC} AS caption,T.* FROM {T} AS T".substitute(b)
        } else {
            f = "SELECT T.{DM} AS code, T.{MC} AS caption,T.* FROM {T} AS T".substitute(b)
        }
        if (b.W) {
            f += " WHERE " + b.W
        }
        $cache.get(f, function (h, k) {
            if (a) {
                var j = h, m = [];
                for (var l = 0; j && l < j.length; l++) {
                    if ((a)(j[l])) {
                        m[m.length] = j[l]
                    }
                }
            } else {
                m = h
            }
            var g = $H({data: [
                {data: m, dataName: k, sword: "SwordSelect"}
            ]});
            if (!$chk(pc.initData)) {
                pc.initData = g
            } else {
                pc.initData.data.extend(g.data)
            }
        })
    }
}
var SwordFrameTabItemLayout1 = new Class({Implements: [Options, Events], type: "SwordFrameTabItemLayout1", options: {id: "tab", title: "默认的tab页卡", src: "", tabContentType: "iframe", isCloseBtn: "true", tabItemWidth: 88, isActive: "true", onIframeLoaded: $empty, onClose: $empty, onSelect: $empty, onMouseon: $empty, onMouseleave: $empty}, refSwordFrameTab: null, tabItemLI: null, tabItemInputCloseA: null, tabItemLISpanWidth: null, tabItemLISpanTitle: null, tabContent: null, tabContextMenu: null, tabItemCssWidth: 20, initialize: function (a) {
    this.setOptions(a)
}, buildItemLI: function () {
    this.tabItemLI = new Element("li", {name: "tabItem_" + this.options.id});
    this.tabItemLI.setStyles({padding: "0px", "border-bottom": "0px", "border-top": "0px", "border-left": "0px", "border-right": "0px", margin: "0px"});
    this.tabItemLI.addEvents({mouseover: function () {
        this.fireEvent("onMouseon", [this.tabItemLI])
    }.bind(this), mouseout: function () {
        this.fireEvent("onMouseleave", [this.tabItemLI])
    }.bind(this)});
    this.tabItemLI.addEvent("contextmenu", function (g) {
        if (!this.refSwordFrameTab.windowClick) {
            window.document.addEvent("click", function (h) {
                this.refSwordFrameTab.tabItems.each(function (k, j) {
                    if ($defined(k.tabContextMenu)) {
                        k.tabContextMenu.foldFlag = false;
                        k.tabContextMenu.menuZeroLevelDiv.destroy();
                        k.tabContextMenu = null
                    }
                }.bind(this))
            }.bind(this));
            this.refSwordFrameTab.windowClick = true
        }
        var f = this.tabItemLI.getPosition().x + this.tabItemLI.getSize().x / 5;
        var c = this.tabItemLI.getPosition().y + this.tabItemLI.getSize().y / 5;
        this.tabContextMenu = new SwordMenu({name: "tabContextMenu", pos: "absolute", left: f, top: c, isInput: "false", width: 200, itemWidth: "120px", dataStr: "{ 'data': [{'pcode': null,'code': '0','caption': '" + i18n.tabMenuFresh + "',imgName:'recycle.png'},{'pcode': null,'code': '1','caption': '" + i18n.tabMenuClose + "',imgName:'delete.png'},{'pcode': null,'code': '2','caption': '" + i18n.tabMenuCloseAll + "',imgName:'star_red.png'},{'pcode': null,'code': '3','caption': '" + i18n.tabMenuCloseOthers + "',imgName:'flag_red.png'}],'name': 'SwordTreeJSON1','sword': 'SwordTree'}", dataType: "json", type: "vertical", pNode: document.body, isShow: false, onSelect: this.onSelectMenuItem.bind(this)});
        this.tabContextMenu.build();
        this.fold.delay(3000, this);
        g.preventDefault()
    }.bind(this));
    this.tabItemLI.addEvent("click", function () {
        this.refSwordFrameTab.activeTabItem(this.options.id);
        this.fireEvent("onSelect", [this.refSwordFrameTab, this.options.id])
    }.bind(this));
    var b = 0;
    for (var a = 0; a < this.options.title.length; a++) {
        if (/^[\u4e00-\u9fa5]+$/i.test(this.options.title.charAt(a))) {
            b = b + 2
        } else {
            b++
        }
    }
    this.tabItemLISpanWidth = new Element("div", {title: this.options.title}).inject(this.tabItemLI);
    if (this.options.isActive == "true") {
        this.tabItemLISpanWidth.addClass("main_tab01")
    } else {
        this.tabItemLISpanWidth.addClass("main_tab02")
    }
    this.tabItemLISpanWidth.setStyle("width", this.options.tabItemWidth);
    new Element("span", {text: (b > 8) ? (this.options.title.substring(0, 5) + "..") : this.options.title, style: {width: this.options.tabItemWidth}}).inject(this.tabItemLISpanWidth);
    if (this.options.isCloseBtn == "true") {
        this.tabItemInputCloseA = new Element("img", {"class": "shutoff01", src: "blue/images/tab_shutoff02.gif"}).inject(this.tabItemLISpanWidth, "bottom");
        this.tabItemInputCloseA.addEvent("click", function (c) {
            this.refSwordFrameTab.removeTabItem(this.options.id);
            c.stopPropagation()
        }.bind(this))
    }
}, fold: function () {
    if ($defined(this.tabContextMenu) && this.tabContextMenu.foldFlag) {
        this.tabContextMenu.menuZeroLevelDiv.destroy();
        this.tabContextMenu = null
    }
}, buildContent: function () {
    if (this.options.tabContentType == "iframe") {
        this.tabContent = new Element(this.options.tabContentType, {name: "tabContent_" + this.options.id, frameborder: 0, border: 0, marginwidth: 0, marginheight: 0, scrolling: "auto", allowtransparency: "yes"});
        this.tabContent.setStyles({width: "100%", height: "100%"});
        this.tabContent.setProperty("src", this.options.src);
        this.refSwordFrameTab.iframeLoad = false;
        if (!Browser.Engine.trident) {
            this.tabContent.addEvent("load", function () {
                this.fireEvent("onIframeLoaded", this);
                this.refSwordFrameTab.iframeLoad = true
            }.bind(this))
        } else {
            this.tabContent.addEvent("readystatechange", function () {
                if (this.tabContent.readyState == "complete") {
                    this.fireEvent("onIframeLoaded", this);
                    this.refSwordFrameTab.iframeLoad = true
                }
            }.bind(this))
        }
    } else {
        if (this.options.tabContentType == "div") {
            this.tabContent = new Element(this.options.tabContentType, {name: "tabContent_" + this.options.id});
            this.tabContent.setStyles({width: "100%", height: "100%"});
            this.tabContent = $(this.options.src)
        } else {
            if (this.options.tabContentType == "innerHTML") {
                this.tabContent = new Element("div", {name: "tabContent_" + this.options.id});
                this.tabContent.setStyles({width: "100%", height: "100%"});
                this.options.src.each(function (b, a) {
                    this.tabContent.adopt(b)
                }.bind(this))
            }
        }
    }
    if (this.options.isActive == "true") {
        this.tabContent.setStyles({"z-index": 10, display: "block"})
    } else {
        this.tabContent.setStyles({"z-index": 1, display: "none"})
    }
}, onSelectMenuItem: function (a) {
    if (a.getProperty("caption") == "" + i18n.tabMenuFresh) {
        if ($defined(window.frames["tabContent_" + this.options.id])) {
            window.frames["tabContent_" + this.options.id].location.reload()
        } else {
            alert("刷新按钮不支持div")
        }
    } else {
        if (a.getProperty("caption") == "" + i18n.tabMenuClose) {
            this.refSwordFrameTab.removeTabItem(this.options.id)
        } else {
            if (a.getProperty("caption") == "" + i18n.tabMenuCloseOthers) {
                this.refSwordFrameTab.tabItems.each(function (c, b) {
                    if (b != this.options.id) {
                        this.refSwordFrameTab.removeTabItem(b)
                    }
                }.bind(this))
            } else {
                if (a.getProperty("caption") == "" + i18n.tabMenuCloseAll) {
                    this.refSwordFrameTab.tabItems.each(function (c, b) {
                        this.refSwordFrameTab.removeTabItem(b)
                    }.bind(this))
                }
            }
        }
    }
}, active: function () {
    if ($defined(this.tabItemLISpanWidth) && $defined(this.tabContent)) {
        this.tabItemLISpanWidth.addClass("main_tab01");
        this.tabItemLISpanWidth.removeClass("main_tab02");
        this.tabContent.setStyles({"z-index": 10, display: "block"})
    }
}, unactive: function () {
    if ($defined(this.tabItemLISpanWidth) && $defined(this.tabContent)) {
        this.tabItemLISpanWidth.addClass("main_tab02");
        this.tabItemLISpanWidth.removeClass("main_tab01");
        this.tabContent.setStyles({"z-index": 1, display: "none"})
    }
}, add: function () {
    if (!$defined(this.tabItemLI) && !$defined(this.tabContent)) {
        this.buildItemLI();
        this.buildContent()
    }
}, remove: function () {
    if ($defined(this.tabItemLI) && $defined(this.tabContent)) {
        this.tabContent.set("src", "");
        this.tabItemLI.destroy();
        this.tabContent.destroy()
    }
}});
var SwordFrameTabLayout1 = new Class({Implements: [Options, Events], type: "SwordFrameTabLayout1", options: {pNode: null, pos: "false", width: null, height: 200, left: null, top: null, maxTabNum: 20, defaultSelectId: null, tabType: "scroll", tabDirection: "top", items: null}, initialize: function (a) {
    this.setOptions(a)
}, initParam: function (b) {
    this.htmlOptions(b);
    if (this.options.height == "" || String(this.options.height).indexOf("%") > -1) {
        this.options.height = this.options.height || "100%";
        var a = this.options.height.substring(0, this.options.height.indexOf("%"));
        this.options.height = this.options.pNode.getParent().getCoordinates().height * a / 100
    }
    this.parseFrameTabItems(b);
    this.create(b);
    this.refreshTabContentByRate();
    this.BuildRefreshTabContentHeightEvent()
}, parseFrameTabItems: function (b) {
    var a = {};
    var c = new SwordFrameTabItemLayout1();
    b.getChildren().each(function (k, g) {
        var j = k.getProperty("id");
        var f = {};
        for (var h in c.options) {
            if (h != "id") {
                if ($defined(k.getProperty(h))) {
                    f[h] = k.getProperty(h)
                } else {
                    f[h] = c.options[h]
                }
            }
        }
        if (!$defined(k.getProperty("tabContentType")) || !$defined(k.getProperty("src"))) {
            f.tabContentType = "innerHTML";
            f.src = k.getChildren()
        }
        a[j] = f
    });
    this.options.items = a
}, initData: function () {
}, tabItems: new Hash(), curTabItem: null, tabDiv: null, tabHeaderDiv: null, tabItemScrollLeftDiv: null, tabItemScrollRightDiv: null, tabItemContentDiv: null, tabItemContentUL: null, tabContentDiv: null, windowClick: null, iframeLoad: true, create: function (a) {
    if ($defined(a)) {
        this.options.pNode = a.getParent()
    }
    if (!$defined(this.options.pNode)) {
        this.options.pNode = document.body
    }
    this.buildTab();
    this.loadDefaultItems();
    this.tabDiv.replaces(a)
}, loadDefaultItems: function () {
    if ($defined(this.options.items)) {
        var a = new Hash(this.options.items);
        a.each(function (c, b) {
            c.id = b;
            this.addTabItem(c)
        }.bind(this))
    }
    if ($defined(this.options.defaultSelectId)) {
        if (this.tabItems.has(this.options.defaultSelectId) == true) {
            this.activeTabItem(this.options.defaultSelectId)
        }
    }
}, isScroll: function () {
    if ($defined(this.curTabItem)) {
        if (this.tabItems.getKeys().length * (this.curTabItem.options.tabItemWidth + 4) > this.tabItemContentDiv.getCoordinates().width) {
            return true
        } else {
            return false
        }
    } else {
        return false
    }
}, activeScroll: function () {
    if (this.isScroll() == false) {
        this.tabItemScrollRightDiv.addClass("right_a");
        this.tabItemScrollLeftDiv.addClass("left_a")
    } else {
        this.tabItemScrollRightDiv.removeClass("right_a");
        this.tabItemScrollLeftDiv.removeClass("left_a")
    }
}, scrollRight: function () {
    if ($defined(this.curTabItem)) {
        this.getFirstDisplayTabItem(1)
    }
}, scrollLeft: function () {
    if ($defined(this.curTabItem)) {
        this.getLastDisplayTabItem(1)
    }
}, addTabItem: function (a) {
    if ($defined(this.tabItems.get(a.id))) {
        this.unactiveAllTabItem();
        this.curTabItem = this.tabItems.get(a.id);
        this.activeTabItem(this.curTabItem.options.id);
        if (this.options.tabType == "scroll") {
            this.activeScroll()
        }
    } else {
        if ($defined(this.options.maxTabNum) && this.tabItems.getKeys().length >= this.options.maxTabNum) {
            this.isTabNumOut();
            return
        } else {
            this.unactiveAllTabItem();
            if ($defined(this.curTabItem)) {
                this.curTabItem.unactive()
            }
            this.curTabItem = new SwordFrameTabItemLayout1(a);
            this.curTabItem.refSwordFrameTab = this;
            this.curTabItem.add();
            this.tabItems.set(a.id, this.curTabItem);
            this.curTabItem.tabItemLI.inject(this.tabItemContentUL);
            this.curTabItem.tabContent.inject(this.tabContentDiv);
            this.curTabItem.tabContent.setStyles({height: (this.tabContentDiv.getStyle("height").toInt()) * 0.9999});
            this.scrollLeft();
            this.activeTabItem(this.curTabItem.options.id);
            if (this.options.tabType == "scroll") {
                this.activeScroll()
            }
        }
    }
}, isTabNumOut: function () {
    alert("为了使浏览器不至于过慢，请您关闭一些tab页卡，最好不要超过" + this.options.maxTabNum + "个!")
}, removeTabItem: function (c) {
    var b = this.tabItems.get(c);
    if (b.options.isCloseBtn == "false") {
        return
    }
    b.remove();
    var a = this.getLastTabItem();
    if ($defined(a)) {
        this.curTabItem.unactive();
        a.active();
        this.curTabItem = a;
        if (a.tabItemLI.getStyle("display") != "none") {
            this.getFirstDisplayTabItem(2)
        } else {
            this.getLastDisplayTabItem(2)
        }
    } else {
        this.curTabItem = null;
        this.getLastDisplayTabItem(2)
    }
    this.tabItems.erase(c);
    if (this.options.tabType == "scroll") {
        this.activeScroll()
    }
    b.fireEvent("onClose", [this, c])
}, removeCurrentTabItem: function () {
    this.removeTabItem(this.curTabItem.options.id)
}, activeTabItem: function (a) {
    this.curTabItem.unactive();
    this.curTabItem = this.tabItems.get(a);
    this.curTabItem.active()
}, unactiveAllTabItem: function () {
    this.tabItems.each(function (b, a) {
        this.unactiveTabItem(a)
    }.bind(this))
}, unactiveTabItem: function (a) {
    this.tabItems.get(a).unactive();
    this.curTabItem = null
}, getFirstTabItem: function () {
    var a = this.tabItemContentUL.getFirst("li");
    return this.getTabItemByLi(a)
}, getDisplayTabItems: function () {
    var f = new Hash();
    var a = this.tabItemContentUL.getChildren("li");
    for (var b = 0; b < a.length; b++) {
        if (a[b].getStyle("display") != "none") {
            var c = this.getTabItemByLi(a[b]);
            f.set(c.options.id, c)
        }
    }
    return f
}, getFirstDisplayTabItem: function (f) {
    var b = this.tabItemContentUL.getChildren("li");
    if (f == 1) {
        var a = this.showItemNum();
        if (b.length > a) {
            for (var c = b.length - 1; c > a - 1; c--) {
                if (b[c] && b[c].getStyle("display") != "none") {
                    this.getTabItemByLi(b[c]).tabItemLI.setStyle("display", "none");
                    this.getTabItemByLi(b[c - a]).tabItemLI.setStyle("display", "");
                    break
                }
            }
        }
    } else {
        for (var c = 1; c <= b.length; c++) {
            if (b[c] && b[c].getStyle("display") != "none") {
                this.getTabItemByLi(b[c - 1]).tabItemLI.setStyle("display", "");
                break
            }
        }
    }
}, getLastDisplayTabItem: function (f) {
    var b = this.tabItemContentUL.getChildren("li");
    if (f == 1) {
        var a = this.showItemNum();
        if (a < b.length) {
            for (var c = 0; c < b.length - a; c++) {
                if (b[c] && b[c].getStyle("display") != "none") {
                    this.getTabItemByLi(b[c]).tabItemLI.setStyle("display", "none");
                    this.getTabItemByLi(b[c + a]).tabItemLI.setStyle("display", "");
                    break
                }
            }
        }
    } else {
        for (var c = b.length - 2; c >= 0; c--) {
            if (b[c] && b[c].getStyle("display") != "none") {
                this.getTabItemByLi(b[c + 1]).tabItemLI.setStyle("display", "");
                break
            }
        }
    }
}, getLastTabItem: function () {
    var a = this.tabItemContentUL.getLast("li");
    return this.getTabItemByLi(a)
}, getPreviousTabItem: function (c) {
    var a = this.tabItemContentUL.getElement("li[name=tabItem_" + c + "]");
    var b = a.getPrevious("li");
    return this.getTabItemByLi(b)
}, getNextTabItem: function (c) {
    var a = this.tabItemContentUL.getElement("li[name=tabItem_" + c + "]");
    var b = a.getNext("li");
    return this.getTabItemByLi(b)
}, getTabItemByLi: function (a) {
    if ($defined(a)) {
        var b = a.getProperty("name");
        b = b.substring(b.indexOf("_") + 1, b.length);
        return this.tabItems.get(b)
    } else {
        return null
    }
}, buildTab: function () {
    this.buildTabItemDiv();
    this.buildTabItemHeaderDiv();
    this.buildTabItemScrollOrPlainDiv();
    this.buildTabItemULDiv();
    this.buildTabContentDiv()
}, buildTabItemDiv: function () {
    this.tabDiv = new Element("div", {name: "tabDiv", "class": "layout1frametabDiv", styles: {height: this.options.height}}).inject($(this.options.pNode));
    if (this.options.pos == "absolute") {
        this.tabDiv.setStyles({position: "absolute", left: this.options.left, top: this.options.top, width: this.options.width, height: this.options.height, "z-index": this.options.zIndex})
    }
}, buildTabItemHeaderDiv: function () {
    this.tabHeaderDiv = new Element("div", {"class": "layout1ftable"}).inject(this.tabDiv)
}, buildTabItemScrollOrPlainDiv: function () {
    if (this.options.tabType == "plain") {
    } else {
        if (this.options.tabType == "scroll") {
            this.tabToolsDiv = new Element("div", {"class": "layout1infoList", align: "right"}).inject(this.tabHeaderDiv);
            this.tabItemScrollRightDiv = new Element("input", {type: "image", src: "blue/images/tab_proview.gif"}).inject(this.tabToolsDiv);
            new Element("span", {text: "  "}).inject(this.tabToolsDiv);
            this.tabItemScrollRightDiv.addEvent("click", function () {
                if (!this.tabItemScrollRightDiv.hasClass("right_a")) {
                    this.scrollRight()
                }
            }.bind(this));
            this.tabItemScrollLeftDiv = new Element("input", {type: "image", src: "blue/images/tab_next.gif"}).inject(this.tabToolsDiv);
            new Element("span", {text: "  "}).inject(this.tabToolsDiv);
            this.tabItemScrollLeftDiv.addEvent("click", function () {
                this.scrollLeft()
            }.bind(this));
            this.tabShutoffDiv = new Element("input", {type: "image", src: "blue/images/tab_shutoff.gif"}).inject(this.tabToolsDiv);
            this.tabShutoffDiv.addEvent("click", function () {
                if (this.curTabItem && this.curTabItem.options.id) {
                    this.removeTabItem(this.curTabItem.options.id)
                }
            }.bind(this));
            new Element("span", {text: "  "}).inject(this.tabToolsDiv);
            this.tabZoominDiv = new Element("input", {type: "image", src: "blue/images/tab_zoomin.gif"}).inject(this.tabToolsDiv);
            this.tabZoominDiv.addEvent("click", function (b) {
                var a = b.target;
                var c = a.get("src");
                if (c.lastIndexOf("tab_zoomin.gif") > 0) {
                    c = c.substring(0, c.lastIndexOf("tab_zoomin.gif")) + "tab_zoomin1.gif"
                } else {
                    c = c.substring(0, c.lastIndexOf("tab_zoomin1.gif")) + "tab_zoomin.gif"
                }
                a.set("src", c);
                window.parent.frames.topFrame.$("img1").fireEvent("click");
                window.parent.frames.leftFrame.$("img2").fireEvent("click")
            });
            new Element("span", {text: "  "}).inject(this.tabToolsDiv);
            this.tabHelpDiv = new Element("input", {type: "image", src: "blue/images/tab_help.gif"}).inject(this.tabToolsDiv)
        }
    }
}, buildTabItemULDiv: function () {
    var a = this.tabHeaderDiv.getCoordinates().width - 168;
    this.tabItemContentDiv = new Element("div", {"class": "tab_box", styles: {left: "0", width: a}}).inject(this.tabHeaderDiv);
    this.tabItemContentUL = new Element("ul", {}).inject(this.tabItemContentDiv)
}, buildTabContentDiv: function () {
    this.tabContentDiv = new Element("div", {name: "tabContentDiv", "class": "x-tab-panel-body", styles: {height: this.options.height.toFloat() - 30, overflow: "hidden"}}).inject(this.tabDiv)
}, refreshTabContentByRate: function () {
    setTimeout(a.bind(this), 100);
    function a() {
        this.options.height = $(document.body).getCoordinates().height;
        this.tabDiv.setStyles({height: this.options.height});
        this.tabContentDiv.setStyles({height: (this.options.height - 50)});
        this.tabItems.each(function (m, j) {
            m.tabContent.setStyles({height: (this.options.height - 50) * 0.9999})
        }.bind(this));
        var f = this.tabHeaderDiv.getCoordinates().width - this.tabToolsDiv.getSize().x;
        this.tabItemContentDiv.setStyle("width", f - 4);
        var l = this.showItemNum();
        var h = this.tabItemContentUL.getChildren("li");
        if (!h || h.length == 0) {
            return
        }
        var c = h.length;
        for (var k = 0, g = -1; k < c; k++) {
            if (h[k].getStyle("display") != "none" && g == -1) {
                g = k
            }
            this.getTabItemByLi(h[k]).tabItemLI.setStyle("display", "none")
        }
        if (c > l + 1) {
            g = c - g > l ? g : c - l - 1
        } else {
            g = 0
        }
        for (var b = g + l; g < c && g < b; g++) {
            this.getTabItemByLi(h[g]).tabItemLI.setStyle("display", "block")
        }
        if (this.options.tabType == "scroll") {
            this.activeScroll()
        }
    }
}, BuildRefreshTabContentHeightEvent: function () {
    window.addEvent("resize", function (a) {
        this.refreshTabContentByRate()
    }.bind(this))
}, refreshTabContentByNum: function (a) {
    var b = this.tabDiv.getStyle("height").toFloat();
    this.tabDiv.setStyles({height: b - a});
    var c = this.tabContentDiv.getStyle("height").toFloat();
    this.tabContentDiv.setStyles({height: b - a - 30})
}, refreshTabItemById: function (a) {
    this.tabItems.get(a).tabContent.contentWindow.location.reload()
}, refreshCurrentTabItem: function () {
    this.tabItems.get(this.curTabItem.options.id).tabContent.contentWindow.location.reload()
}, getTabcontent: function (a) {
    return this.tabItems.get(a).tabContent
}, addModalTabItem: function (a) {
    this.addTabItem(a)
}, showItemNum: function () {
    var b;
    var c = new SwordFrameTabItemLayout1();
    b = c.options.tabItemWidth + 4;
    var a = (this.tabItemContentDiv.getCoordinates().width / b);
    return a - a % 1
}});
var SwordPopUpWindow = new Class({Implements: [Events, Options], name: "SwordPopUpWindow", options: {name: null, pNode: null, top: null, left: null, width: 500, height: 400, zIndex: 10001, position: "absolute", title: i18n.titleName, isGridEdit: true, isMin: "true", isNormal: "true", isMax: "true", isClose: "true", isShowMask: true, initState: "normal", mask: {background: "gray", opacity: 0.5, zIndex: 30000, position: "absolute", left: null, top: null, width: null, height: null}, popUpTweenTime: 200, popUpTween: [], dragObj: null, maskObj: null, onBeforeOpen: $empty, onOpen: $empty, onBeforeClose: $empty, onClose: $empty, onBeforeDestroy: $empty, onMaxBefore: $empty, onMaximize: $empty, onMinBefore: $empty, onMinimize: $empty, onNormalBefore: $empty, onNormal: $empty}, maskObj: null, mask: null, popUpDiv: null, titleDiv: null, titleNameDiv: null, titleMinDiv: null, titleNormalDiv: null, titleMaxDiv: null, titleCloseDiv: null, contentDiv: null, popUpState: "normal", bodySize: {width: 0, height: 0}, initialize: function (a) {
}, initData: function () {
}, initParam: function (a) {
    this.htmlOptions(a);
    this.createAllDiv(this.options.maskObj);
    this.createTitle();
    this.createContent(true);
    this.createTail();
    this.addPopUpTween();
    this.doInitState()
}, doInitState: function () {
    switch (this.options.initState) {
        case"min":
            this.min();
            break;
        case"normal":
            this.normal();
            break;
        case"max":
            this.max()
    }
    if (this.options.isClose == "true" || this.options.isClose == true) {
        this.close()
    } else {
        this.open()
    }
}, createContent: function () {
    var f = this.contentDiv = this.options.pNode;
    var c = new Element("div", {id: "ym-ml", "class": "ym-ml"}).inject(this.popUpDiv);
    var b = new Element("div", {"class": "ym-mr"}).inject(c);
    var a = new Element("div", {"class": "ym-mc"}).inject(b);
    f.setStyles({position: "relative", width: "100%", height: this.options.height}).inject(a);
    f.addClass("ym-body");
    f.set("id", this.options.name);
    f.focus()
}, createAllDiv: function (a) {
    this.popUpDiv = new Element("div", {id: "ym-window", styles: {"z-index": this.options.zIndex, position: "absolute", left: this.options.left, top: -1000, width: this.options.width, height: this.options.height}}).inject(document.body);
    if (this.options.popUpTween.length != 0) {
        this.popUpDiv.setStyle("display", "none")
    }
    this.bodySize.width = $(document.body).getSize().x;
    this.bodySize.height = $(document.body).getSize().y;
    if (!$defined(a) || ($defined(a) && this.isBody(a))) {
        this.maskObj = document.body;
        if (this.options.isShowMask == true || this.options.isShowMask == "true") {
            if (jsR.config.swordPopUpBox.flag) {
                this.options.mask.zIndex = this.options.mask.zIndex + jsR.config.swordPopUpBox.number;
                jsR.config.swordPopUpBox.number++
            }
            this.mask = new SwordMask(this.options.mask);
            this.mask.mask(this.maskObj, this.popUpDiv);
            if (this.options.top == null) {
                this.options.top = this.mask.getElPosition().top
            } else {
                this.popUpDiv.setStyle("top", this.options.top)
            }
            if (this.options.left == null) {
                this.options.left = this.mask.getElPosition().left
            }
        } else {
            if (this.options.left == null) {
                this.options.left = ($(this.maskObj).getSize().x - this.options.width) / 2 + $(document.body).getScroll().x
            }
            if (this.options.top == null) {
                this.options.top = ($(this.maskObj).getSize().y - this.options.height) / 2 + $(document.body).getScroll().y
            }
            this.popUpDiv.setStyles({"z-index": this.options.zIndex, position: "absolute", left: this.options.left, top: this.options.top, width: this.options.width, height: this.options.height})
        }
    } else {
        this.maskObj = a;
        if (this.options.isShowMask == true || this.options.isShowMask == "true") {
            if (jsR.config.swordPopUpBox.flag) {
                this.options.mask.zIndex = this.options.mask.zIndex + jsR.config.swordPopUpBox.number;
                jsR.config.swordPopUpBox.number++
            }
            this.mask = new SwordMask(this.options.mask);
            this.mask.mask(this.maskObj, this.popUpDiv);
            if (this.options.top == null) {
                this.options.top = this.mask.getElPosition().top
            }
            if (this.options.left == null) {
                this.options.left = this.mask.getElPosition().left
            }
        } else {
            if (this.options.left == null) {
                this.options.left = this.maskObj.getPosition().x + (this.maskObj.getSize().x - this.options.width) / 2 + this.maskObj.getScroll().x
            }
            if (this.options.top == null) {
                this.options.top = this.maskObj.getPosition().y + (this.maskObj.getSize().y - this.options.height) / 2 + this.maskObj.getScroll().y
            }
            this.popUpDiv.setStyles({"z-index": this.options.zIndex, position: "absolute", left: this.options.left, top: this.options.top, width: this.options.width, height: this.options.height})
        }
    }
    if (this.options.position == "fixed") {
        this.popUpDiv.setStyles({"z-index": this.options.zIndex, position: "absolute", left: this.options.left, top: this.options.top, width: this.options.width, height: this.options.height})
    }
    this.popUpDiv.setStyle("height", "auto")
}, createTitle: function () {
    var c = new Element("div", {id: "ym-tl", "class": "ym-tl"}).inject(this.popUpDiv);
    var b = new Element("div", {"class": "ym-tr"}).inject(c);
    this.titleDiv = new Element("div", {"class": "ym-tc", styles: {cursor: "move"}}).inject(b);
    this.titleNameDiv = new Element("div", {"class": "ym-header-text", title: this.options.title, text: this.options.title}).inject(this.titleDiv);
    var a = new Element("div", {"class": "ym-header-tools"}).inject(this.titleDiv);
    if (this.options.isMin == "true") {
        this.titleMinDiv = new Element("div", {"class": "ymPrompt_min", title: i18n.boxMin, styles: {visibility: "inherit"}}).inject(a);
        this.titleMinDiv.addEvent("click", this.min.bind(this))
    }
    if (this.options.isNormal == "true") {
        this.titleNormalDiv = new Element("div", {"class": "ymPrompt_normal", title: i18n.boxNatural, styles: {visibility: "inherit"}}).inject(a);
        this.titleNormalDiv.addEvent("click", this.normal.bind(this))
    }
    if (this.options.isMax == "true") {
        this.titleMaxDiv = new Element("div", {"class": "ymPrompt_max", title: i18n.boxMax, styles: {visibility: "inherit"}}).inject(a);
        this.titleMaxDiv.addEvent("click", this.max.bind(this))
    }
    if (this.options.isClose == "true") {
        this.titleCloseDiv = new Element("div", {"class": "ymPrompt_close", title: i18n.boxClose}).inject(a);
        this.titleCloseDiv.addEvent("click", function (f) {
            this.closePopUpBox()
        }.bind(this))
    }
    this.dragObj = new Drag(this.popUpDiv, {snap: 5, limit: {x: [0, $(document.body).getWidth() - this.popUpDiv.getWidth()], y: [0, $(document.body).getHeight() - this.options.height - 20]}, handle: this.titleDiv, onComplete: function (f) {
        f.getElements("#" + this.options.name).setStyle("display", "")
    }.bind(this), onStart: function (f) {
        if (this.popUpState == "min") {
            this.dragObj.limit.y = [0, $(document.body).getHeight() - 48]
        }
        f.getElements("#" + this.options.name).setStyle("display", "none")
    }.bind(this)})
}, createTail: function () {
    var c = new Element("div", {id: "ym-bl", "class": "ym-bl"}).inject(this.popUpDiv);
    var b = new Element("div", {"class": "ym-br"}).inject(c);
    var a = new Element("div", {"class": "ym-bc"}).inject(b)
}, addPopUpTween: function () {
    for (var a = 0; a < this.options.popUpTween.length; a++) {
        new Fx.Tween(this.popUpDiv, {duration: this.options.popUpTween[a]["popUpTweenTime"], transition: this.options.popUpTween[a]["popUpTweenTransitionType"]}).start(this.options.popUpTween[a]["popUpTweenStyle"], this.options.popUpTween[a]["popUpTweenStyleFrom"], this.options.popUpTween[a]["popUpTweenStyleTo"])
    }
    if (this.options.popUpTween.length != 0) {
        this.popUpDiv.setStyle("display", "block")
    }
}, closePopUpBox: function (a) {
    if (document.body) {
        try {
            document.body.focus()
        } catch (b) {
        }
    }
    this.fireEvent("onBeforeClose", [this]);
    this.popUpDiv.setStyle("display", "none");
    if (this.options.isShowMask == true) {
        this.mask.unmask()
    }
    this.fireEvent("onClose", [this])
}, isBody: function (a) {
    return(/^(?:body|html)$/i).test((a.get("tag") || a.tagName))
}, max: function () {
    this.fireEvent("onMaxBefore", [this]);
    this.popUpState = "max";
    var b = 28;
    var g = 0;
    var a = 0;
    var f = 0;
    var c = 0;
    if (this.isBody(this.maskObj)) {
        if (this.options.isShowMask == true) {
            g = 0 + document.body.getScroll().x;
            a = 0 + document.body.getScroll().y;
            f = document.body.getSize().x;
            c = document.body.getSize().y
        } else {
            g = 0 + document.body.getScroll().x;
            a = 0 + document.body.getScroll().y;
            f = document.body.getSize().x;
            c = document.body.getSize().y
        }
    } else {
        if (this.options.isShowMask == true) {
            g = this.mask.options.left;
            a = this.mask.options.top;
            f = this.mask.options.width;
            c = this.mask.options.height
        } else {
            g = this.maskObj.getPosition().x + this.maskObj.getScroll().x;
            a = this.maskObj.getPosition().y + this.maskObj.getScroll().y;
            f = this.maskObj.getSize().x;
            c = this.maskObj.getSize().y
        }
    }
    this.popUpDiv.setStyles({height: c, left: g, top: a, width: f});
    this.contentDiv.setStyles({height: c - b});
    this.fireEvent("onMaximize", [this])
}, min: function () {
    this.fireEvent("onMinBefore", [this]);
    if (this.popUpState != "min") {
        if ($defined(this.operateDiv)) {
            this.operateDivHeight = this.operateDiv.getSize().y
        }
    }
    this.popUpState = "min";
    var a = 28;
    this.popUpDiv.setStyles({height: a, left: 0, top: $(document.body).getHeight() - 48, width: this.options.width});
    this.contentDiv.setStyles({height: 0});
    this.popUpDiv.setStyle("height", "auto");
    this.fireEvent("onMinimize", [this])
}, normal: function () {
    this.fireEvent("onNormalBefore", [this]);
    this.popUpState = "normal";
    var a = 28;
    this.popUpDiv.setStyles({height: this.options.height, left: this.options.left, top: this.options.top, width: this.options.width});
    var b = (this.options.height.toInt() - a);
    this.contentDiv.setStyles({height: b});
    this.popUpDiv.setStyle("height", "auto");
    this.fireEvent("onNormal", [this])
}, close: function () {
    this.closePopUpBox()
}, destroy: function () {
    if (document.body) {
        try {
            document.body.focus()
        } catch (a) {
        }
    }
    this.fireEvent("onBeforeDestroy", [this]);
    if (this.options.isShowMask == true) {
        this.mask.unmask();
        if (jsR.config.swordPopUpBox.flag) {
            jsR.config.swordPopUpBox.number--
        }
    }
    this.popUpDiv.destroy();
    for (key in this) {
        this[key] = undefined
    }
}, getOptions: function () {
    return this.options
}, getPanel: function () {
    return this.popUpDiv
}, getHeader: function () {
    return this.popUpDiv.getElement("div.ym-tl")
}, getBody: function () {
    return this.contentDiv
}, setTitle: function (a) {
    this.titleNameDiv.set("title", a);
    this.titleNameDiv.set("text", a)
}, open: function () {
    this.fireEvent("onBeforeOpen", [this]);
    this.popUpDiv.setStyle("display", "");
    if (this.options.isShowMask == "true" || this.options.isShowMask == true) {
        this.mask.mask(this.maskObj, this.popUpDiv)
    }
    this.fireEvent("onOpen", [this])
}});
SwordPopUpWindow.implement({addGradButton: function (c) {
    var a = this.contentDiv;
    if (this.options.isGridEdit != false && this.options.isGridEdit != "false") {
        this.options.isGridEdit = true;
        var b = new Element("div");
        b.setStyles({width: "98%", height: "50px", "line-height": "100px", "text-align": "center", position: "absolute", bottom: "40px"});
        this.gradEditPanelOK = new Element("input", {name: "gradEditPanelOK", type: "button", value: "确定"}).addEvent("click", c.bind(this)).inject(b, "bottom");
        new Element("span").set("html", "&nbsp;&nbsp;").inject(b);
        this.gradEditPanelCanel = new Element("input", {name: "gradEditPanelCanel", type: "button", value: "取消"}).addEvent("click", function (f) {
            this.close()
        }.bind(this)).inject(b, "bottom");
        this.gradEditPanelOK.addClass("inputbtn");
        this.gradEditPanelCanel.addClass("inputbtn");
        b.inject(a)
    }
}});
SwordToolBar.implement({buttonEvents: {onClick: {SwordGrid: {firstPage: function (b) {
    var a = $w(b);
    a.loadPage(1);
    this.initStatus(this)
}, endPage: function (b) {
    var a = $w(b);
    a.loadPage(a.totalPage());
    this.initStatus(this)
}, nextPage: function (b) {
    var a = $w(b);
    a.loadPage(a.pageNum() + 1);
    this.initStatus(this)
}, previousPage: function (b) {
    var a = $w(b);
    a.loadPage(a.pageNum() - 1);
    this.initStatus(this)
}, "delete": function (b) {
    var a = $w(b);
    a.deleteGridsRows()
}}}}});
var SwordWorkflow = new Class({Implements: [Events, Options], name: "SwordWorkflow", rootPath: "/workflow/component/images/", toolBarName: "workflowToolBar", toolBarShowType: "mini", dataContainer: [], wfdata: {packageId: "", lcdyid: "", actDefId: "", processInsId: "", parentProcessInsId: "", actInsId: "", parentActInsId: "", BIZ_PROC_ID: "", BIZ_ACT_ID: "", BIZ_PREACT_ID: "", wfWsh: "", workflowFlag: "", workItemId: "", parentWorkItemId: "", isStarted: "0", isInvokeTid: false, userList: [], orgList: [], bizBtnList: [], operatorOrgCode: "", nextActDefId: "", btnStatus: "", isFinalTask: "false", SWJG_DM: "", jsdm: "", zndm: "", message: "", isShowSpForm: false, returnCode: "0", oneOfMultiTaskTag: "0", sjgzid: "", sjmc: "", sjlx: "", sjbl: "", sjslid: "", sjType: "", isMultiEventStartPro: false, canSend: "true", sednMessage: "", sjState: "0", gllcsfxs: "0", wfPerformerSelector: "", wfDepartSelector: "", wfRoleSelector: "", isTaskMerger: "0", batchMainWidget: null, subSendFlag: null, glLcswsxDm: null, wfTaskState: "", wfTaxItemID: "", htly: "", isShowApproveHistory: false, boxClosingEventFlag: "", isPermitContinue: true, isProcessClosed: false, isSychronizedSubflowStarted: false, isConfigedSubflow: false, nextWorkitemId: "", isClickNext: "0"}, dataname: "WFDATA", ctrls: {start: "WorkFlowCTRL_startProcess", assign: "WorkFlowCTRL_assignTask", back: "WorkFlowCTRL_backProcess", signin: "WorkFlowCTRL_signinTask", predict: "WorkFlowCTRL_completePredict", send: "WorkFlowCTRL_completeTask", flowNextPredict: "WorkFlowCTRL_flowNextPredict", flowNext: "WorkFlowCTRL_flowNext", suspend: "WorkFlowCTRL_suspendProcess", activation: "WorkFlowCTRL_activateProcess", stop: "WorkFlowCTRL_terminateProcess", subProcsubmit: "WorkFlowCTRL_startSubProcess", end: "WorkFlowCTRL_endProcess", moreEvents: "WorkFlowCTRL_dealMoreEvents"}, options: {sword: null, name: null, pNode: null, btnlist: ["saveNew", "start", "signin", "send", "flowNext", "assign", "fallback", "stop", "startSubProc", "end", "viewprocess"], btncaptions: ["保存", "启动", "签收", "推送", "下一步", "委派", "回退", "作废", "关联流程", "结束", "查看流程"], pclass: ["saveNew", "start", "signin", "send", "flowNext", "assign", "fallback", "stop", "startSubProc", "end", "viewprocess"], btnclickparam: ["savesubmit", "startsubmit", "signinsubmit", "sendsubmit", "flowNextsubmit", "assignsubmit", "backsubmit", "stopsubmit", "subProcsubmit", "endsubmit", "viewprocesssubmit"], tidinvokeparam: ["savetidIsinvoke", "starttidIsinvoke", "signintidIsinvoke", "sendtidIsinvoke", "flowNexttidIsinvoke", "assigntidIsinvoke", "backtidIsinvoke", "stoptidIsinvoke", "subProctidIsinvoke", "endtidIsinvoke", "viewprocesstidIsinvoke"], btnStatus: "11110111111", btnNames: null, startType: "1", saveButtonIsShow: false, defaltBtnStatus: "12220222221", isShowSpForm: false, isShowApproveHistory: false, spCaption: "审批", saveclicksubmit: null, sendPredictSubmit: null, sendclicksubmit: null, backclicksubmit: null, isShowSelector: "true", batchMainWidget: null}, getFunction: function (a) {
    switch (a) {
        case 0:
            return function (b) {
                this.flowSave(b)
            };
        case 1:
            return function (b) {
                this.flowStart(b)
            };
        case 2:
            return function (b) {
                this.flowSignin(b)
            };
        case 3:
            return function (b) {
                this.flowSend(b)
            };
        case 4:
            return function (b) {
                this.flowNextPredict()
            };
        case 5:
            return function (b) {
                this.flowAssign(b)
            };
        case 6:
            return function (b) {
                this.flowBack(b)
            };
        case 7:
            return function (b) {
                this.flowStop(b)
            };
        case 8:
            return function (b) {
                this.flowSubStart(b)
            };
        case 9:
            return function (b) {
                this.flowEnd(b)
            };
        case 10:
            return function (b) {
                this.flowViewprocess(b)
            }
    }
}, pNode: function () {
    return this.options.pNode
}, initParam: function (a) {
    this.htmlOptions(a);
    this.toolBarName = this.options.name + "toolbar";
    this.initData();
    this.initSPForm();
    if (this.wfdata.oneOfMultiTaskTag == "1") {
        this.options.saveButtonIsShow = true;
        this.options.btnStatus = "00000000000";
        this.initSwordWorkflow();
        this.initMoreEvents();
        this.setBtnStatusByName("startSubProc", this.wfdata.gllcsfxs)
    } else {
        if (this.wfdata.workflowFlag == "1") {
            this.initSwordWorkflow();
            this.initSubmitComponent()
        }
    }
    if ($chk(this.wfdata.subSendFlag)) {
        this.initSendSubShow(this.wfdata.subSendFlag)
    }
}, initSwordWorkflow: function () {
    $SwordLoader.writeCSS($SwordLoader.rootPath + "workflow/component/" + (this.toolBarShowType == "mini" ? "SwordWorkflow_mini.css" : "SwordWorkflow.css"));
    this.initSwordToolBar()
}, initMoreEvents: function () {
    var b = this.options.btnlist.indexOf("saveNew");
    var c = this.options.pNode.get(this.options.btnclickparam[b]);
    if (!$defined(c)) {
        swordAlert("请配置要提交的组件参数savesubmit");
        return
    }
    var f = $w(c);
    if (!$defined(f)) {
        swordAlert("未找到要提交的组件" + c);
        return
    }
    this.wfdata.isInvokeTid = true;
    f.setCtrl(this.ctrls.moreEvents);
    f.pushData(this.dataname, JSON.encode(this.wfdata));
    var a = f.getFunc(f.options.onSuccess);
    f.removeEvents("onSuccess");
    f.addEvent("onSuccess", function (j, h) {
        this.setWfData(h);
        parent.loadTree();
        for (var g = 0; g < a.length; g++) {
            a[g].run([j, h])
        }
    }.bind(this))
}, setEnabledStatus: function (k) {
    if (this.wfdata.isStarted == "0") {
        var c = "";
        for (var f = 1; f < this.options.btnStatus.length;) {
            if (this.options.btnStatus.substring(f, f + 1) == "1") {
                c = c + "2"
            } else {
                c = c + this.options.btnStatus.substring(f, f + 1)
            }
            f = f + 1
        }
        this.options.btnStatus = "1" + c
    }
    if (this.options.saveButtonIsShow == true || this.options.saveButtonIsShow == "true") {
        this.options.btnStatus = this.options.btnStatus.substr(1, this.options.btnlist.length);
        this.options.btnStatus = "1" + this.options.btnStatus
    }
    if (this.options.saveButtonIsShow == false || this.options.saveButtonIsShow == "false") {
        this.options.btnStatus = this.options.btnStatus.substr(1, this.options.btnlist.length);
        this.options.btnStatus = "0" + this.options.btnStatus
    }
    var b = this.options.btnStatus;
    var j = b.split("");
    var a = $w(this.toolBarName).pNode().getElement("div[name='container']");
    var g = a.getElement("div[name='box']");
    var h = g.getChildren();
    if (h.length != 0) {
        h.each(function (n, l) {
            if (!k.contains(n.get("name"))) {
                this.setBtnStatusByIndex(l, j[l])
            } else {
                var m = k.indexOf(n.get("name"));
                this.setBtnStatusByName(n.get("name"), this.wfdata.bizBtnList[m].isshow);
                if (!this.isProcStarted()) {
                    this.setBtnStatusByName(n.get("name"), "2")
                }
            }
        }.bind(this))
    }
    if (this.wfdata.isStarted == "1") {
        this.setBtnStatusByName("start", "0")
    }
    if (this.options.startType == "3" && this.wfdata.isStarted != "1") {
        g.getElement("div[name='start']").getElements("div[name='caption']")[0].set("html", "保存");
        g.getElement("div[name='start']").getElements("div[name='image']")[0].set("class", "saveAndStart_enabled");
        this.setBtnStatusByName("saveNew", "0");
        this.setBtnStatusByName("start", "1")
    }
    if (this.options.startType == "4" && this.wfdata.isStarted != "1") {
        g.getElement("div[name='start']").getElements("div[name='caption']")[0].set("html", "推送");
        this.setBtnStatusByName("send", "0")
    }
}, setBtnStatusByName: function (b, a) {
    if (a == "0") {
        $w(this.toolBarName).setHide(b)
    } else {
        if (a == "2") {
            $w(this.toolBarName).setDisabled(b)
        } else {
            $w(this.toolBarName).setEnabled(b);
            $w(this.toolBarName).setDisplay(b)
        }
    }
}, setButtonListStatus: function (b, a) {
    b.each(function (f, c) {
        this.setBtnStatusByName(f, a)
    }.bind(this))
}, setBtnStatusByIndex: function (b, a) {
    var c = this.options.btnlist[b];
    if (a == "0") {
        $w(this.toolBarName).setHide(c)
    } else {
        if (a == "2") {
            $w(this.toolBarName).setDisabled(c)
        } else {
            $w(this.toolBarName).setEnabled(c);
            $w(this.toolBarName).setDisplay(c)
        }
    }
}, setBizButtonsEnabled: function () {
    this.wfdata.bizBtnList.each(function (b, a) {
        if (b.isshow == "1") {
            $w(this.toolBarName).setEnabled("_" + b.ywanmc)
        }
    }.bind(this))
}, setSaveEnable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("saveNew", "1")
    }
}, setSaveDisable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("saveNew", "2")
    }
}, setStartEnable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        if (this.wfdata.isPermitContinue) {
            if (this.wfdata.isStarted == "0") {
                this.setBtnStatusByName("start", "1")
            }
        }
    }
}, setStartDisable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("start", "2")
    }
}, setSendEnable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        if (this.wfdata.isPermitContinue) {
            this.setBtnStatusByName("send", "1");
            this.setFlowNextEnable()
        }
    }
}, setSendDisable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("send", "2");
        this.setFlowNextDisable()
    }
}, setFlowNextEnable: function () {
    var b = $w(this.toolBarName);
    if (typeof b != "undefined" && b != null) {
        var a = this.wfdata.btnStatus;
        if (this.wfdata.isPermitContinue && a.substring(4, 5) == "1") {
            this.setBtnStatusByName("flowNext", "1")
        }
    }
}, setFlowNextDisable: function () {
    var b = $w(this.toolBarName);
    if (typeof b != "undefined" && b != null) {
        var a = this.wfdata.btnStatus;
        if (a.substring(4, 5) == "1") {
            this.setBtnStatusByName("flowNext", "2")
        }
    }
}, setBackEnable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        if (this.wfdata.isPermitContinue) {
            this.setBtnStatusByName("fallback", "1")
        }
    }
}, setBackDisable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("fallback", "2")
    }
}, setAssignEnable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        if (this.wfdata.isPermitContinue) {
            this.setBtnStatusByName("assign", "1")
        }
    }
}, setAssignDisable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("assign", "2")
    }
}, setSigninEnable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("signin", "1")
    }
}, setSigninDisable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("signin", "2")
    }
}, setSuspendEnable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("suspend", "1")
    }
}, setSuspendDisable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("suspend", "2")
    }
}, setActivationEnable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("activation", "1")
    }
}, setActivationDisable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("activation", "2")
    }
}, setStopEnable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        if (!(this.wfdata.isSychronizedSubflowStarted || this.wfdata.isProcessClosed)) {
            this.setBtnStatusByName("stop", "1")
        }
    }
}, setStopDisable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("stop", "2")
    }
}, setEndEnable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        if (!(this.wfdata.isSychronizedSubflowStarted || this.wfdata.isProcessClosed)) {
            this.setBtnStatusByName("end", "1")
        }
    }
}, setEndDisable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("end", "2")
    }
}, setViewProcessHidden: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("viewprocess", "0")
    }
}, setStartSubProcHidden: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        this.setBtnStatusByName("startSubProc", "0")
    }
}, setStartSubProcDisable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        $w(this.toolBarName).setDisplay("startSubProc");
        $w(this.toolBarName).setDisabled("startSubProc")
    }
}, setStartSubProcEnable: function () {
    var a = $w(this.toolBarName);
    if (typeof a != "undefined" && a != null) {
        if (this.wfdata.isPermitContinue && this.wfdata.isConfigedSubflow) {
            this.setBtnStatusByName("startSubProc", "1")
        }
    }
}, initSwordToolBar: function () {
    var j = $(document.body).getElements("div[class=wrapper]")[0];
    var g = new Element("div", {sword: "SwordToolBar", showType: this.toolBarShowType, name: this.toolBarName, id: "SwordToolBar"});
    if ($chk(j)) {
        $(j).grab(g, "top")
    } else {
        g.inject($$("body")[0], "top")
    }
    this.options.btnlist.each(function (l, k) {
        this.createButton(k).inject(g, "bottom")
    }.bind(this));
    var h = [];
    this.wfdata.bizBtnList.each(function (m, k) {
        var l = new Element("div", {name: "_" + m.ywanmc, pclass: "find", caption: m.ywanmc, enabled: "true"});
        l.inject(g, "bottom");
        h.include("_" + m.ywanmc)
    }.bind(this));
    var c = this.createXtButton();
    if ($chk(c)) {
        c.inject(g, "bottom")
    }
    var b = pc.widgetFactory.create("SwordToolBar");
    g.pNode = g;
    b.initParam(g);
    pc.widgets.set(this.toolBarName, b);
    var a = b.pNode().getElement("div[name='container']");
    var f = a.getElement("div[name='box']");
    f.getChildren().each(function (m, l) {
        var k = null;
        try {
            k = getTybddyName()
        } catch (n) {
            k = null
        }
        if ($chk(k) && k == m.get("name")) {
        } else {
            if (h.contains(m.get("name"))) {
                m.addEvent("click", function () {
                    if (m.get("enabled") == "true") {
                        var o = {titleName: "", width: 700, height: 450, top: 50, isMin: "false", isNormal: "true", isMax: "true"};
                        o.param = {win: window};
                        var p = h.indexOf(m.get("name"));
                        swordAlertIframe("/sword?tid=Pre_CommProxy_bizButtonInvokeTid&RES_KEY_SERVICENAME=" + this.wfdata.bizBtnList[p].serviceName + "&BIZ_PROC_ID=" + this.wfdata.BIZ_PROC_ID, o, null)
                    }
                }.bind(this))
            } else {
                m.addEvent("click", function () {
                    if (m.get("enabled") == "true") {
                        var o = this.getFunction(l);
                        var p = this.options.btnclickparam[l];
                        var q = this.pNode().get(p);
                        o.run(q, this)
                    }
                }.bind(this))
            }
        }
    }.bind(this));
    this.setEnabledStatus(h)
}, createXtButton: function () {
    try {
        return getTybddyDiv()
    } catch (a) {
        return null
    }
}, createButton: function (b) {
    var a = this.options.btncaptions[b];
    if ($chk(this.options.btnNames)) {
        if ($chk(this.options.btnNames[b]) && this.options.btnNames[b] != "null" && this.options.btnNames[b] != "" && this.options.btnNames[b] != null) {
            a = this.options.btnNames[b]
        }
    }
    return new Element("div", {name: this.options.btnlist[b], pclass: this.options.pclass[b], caption: a})
}, addButton: function (c) {
    if ($chk(c)) {
        if (!$chk(c.name)) {
            swordAlert("添加按钮的name属性不能为空");
            return
        }
        if (this.isBizButtonExist(c.name)) {
            return
        }
        var g = new Element("div", {name: "_" + c.name, pclass: $chk(c.pclass) ? c.pclass : "save", caption: $chk(c.caption) ? c.caption : "保存", enabled: $defined(c.enabled) ? c.enabled : "true"});
        var a = $w(this.toolBarName).pNode().getElement("div[name='container']");
        var f = a.getElement("div[name='box']");
        var b = $w(this.toolBarName).creatDefualtButton(g, g.name, null, g.get("pclass"), g.get("caption"), g.get("enabled"), "true");
        b.addEvent("click", function () {
            if (b.get("enabled") == "true") {
                if ($chk(c.submitName)) {
                    if ($chk($w(c.submitName))) {
                        $w(c.submitName).submit()
                    }
                } else {
                    if ($chk(c.tid)) {
                        var h = "";
                        var j = "false";
                        if ($chk(c.titleName)) {
                            h = c.titleName
                        }
                        if ($chk(c.isPopupIframe)) {
                            j = c.isPopupIframe
                        }
                        this.invokeBizTid(c.name, c.tid, h, j)
                    }
                }
            }
        }.bind(this));
        f.adopt(b)
    }
}, invokeBizTid: function (b, g, f, h) {
    if (h == "false") {
        var c = {ctrl: "WorkFlowCTRL_bizButtonInvokeTid", tid: g, data: this.wfdata, onSuccess: function (j) {
        }};
        jsDelegate(c)
    } else {
        var a = "/sword?tid=Pre_CommProxy_bizButtonInvokeTid&RES_KEY_SERVICENAME=" + g + "&BIZ_PROC_ID=" + this.wfdata.BIZ_PROC_ID;
        pc.getWidget("bizUnitsTab").addTabItem({id: b, title: f, tabContentType: "iframe", src: AddBizCode2URL(a), isCloseBtn: "true"})
    }
}, isBizButtonExist: function (b) {
    var a = $w(this.toolBarName).pNode().getElement("div[name='container']");
    if ($chk(a.getElement("div[name='box']").getElement("div[name='_" + b + "']"))) {
        return true
    } else {
        return false
    }
}, setBizButtonEnable: function (a) {
    $w(this.toolBarName).setEnabled("_" + a);
    $w(this.toolBarName).setDisplay("_" + a)
}, setBizButtonDisable: function (a) {
    $w(this.toolBarName).setDisabled("_" + a)
}, setBizButtonHide: function (a) {
    $w(this.toolBarName).setHide("_" + a)
}, setBizButtonDisplay: function (a) {
    $w(this.toolBarName).setDisplay("_" + a)
}, initData: function () {
    var a = pc.getResData(this.dataname, pc.initData);
    if ($defined(a) && $defined(a.data)) {
        var c = a.data;
        if ($defined(c.workflowFlag)) {
            this.wfdata.workflowFlag = c.workflowFlag.value
        }
        if ($chk(c.btnStatus) && $chk(c.btnStatus.value)) {
            this.options.btnStatus = c.btnStatus.value;
            this.wfdata.btnStatus = c.btnStatus.value
        }
        if ($chk(c.btnNames) && $chk(c.btnNames.value)) {
            var b;
            b = c.btnNames.value.replace("[", "");
            b = c.btnNames.value.replace("]", "");
            this.options.btnNames = b.split(",")
        }
        if ($chk(c.bizBtnList) && $chk(c.bizBtnList.value)) {
            this.wfdata.bizBtnList = JSON.decode(c.bizBtnList.value)
        }
        if ($defined(c.BIZ_PROC_ID)) {
            this.wfdata.BIZ_PROC_ID = c.BIZ_PROC_ID.value
        }
        if ($defined(c.BIZ_ACT_ID)) {
            this.wfdata.BIZ_ACT_ID = c.BIZ_ACT_ID.value
        }
        if ($defined(c.BIZ_PREACT_ID)) {
            this.wfdata.BIZ_PREACT_ID = c.BIZ_PREACT_ID.value
        }
        if ($defined(c.wfWsh)) {
            this.wfdata.wfWsh = c.wfWsh.value
        }
        if ($defined(c.wfTaxItemID)) {
            this.wfdata.wfTaxItemID = c.wfTaxItemID.value
        }
        if ($defined(c.oneOfMultiTaskTag)) {
            this.wfdata.oneOfMultiTaskTag = c.oneOfMultiTaskTag.value
        }
        if ($defined(c.wfTaskState)) {
            this.wfdata.wfTaskState = c.wfTaskState.value
        }
        if ($defined(c.subSendFlag)) {
            this.wfdata.subSendFlag = c.subSendFlag.value
        }
        if ($defined(c.glLcswsxDm)) {
            this.wfdata.glLcswsxDm = c.glLcswsxDm.value
        }
        if ($chk(c.gllcsfxs)) {
            this.wfdata.gllcsfxs = c.gllcsfxs.value
        }
        this.wfdata.batchMainWidget = this.options.batchMainWidget;
        if ($chk(c.isShowApproveHistory) || this.options.isShowApproveHistory == true || this.options.isShowApproveHistory == "true") {
            this.wfdata.isShowApproveHistory = true
        }
        if ($chk(c.isConfigedSubflow)) {
            if (c.isConfigedSubflow.value == "true" || c.isConfigedSubflow.value == true) {
                this.wfdata.isConfigedSubflow = true
            }
        }
        this.copyResData2Wfdata(c)
    }
}, setWfData: function (b) {
    this.wfdata.message = "";
    var a = pc.getResData(this.dataname, b);
    if ($defined(a) && $defined(a.data)) {
        var c = a.data;
        this.copyResData2Wfdata(c);
        if ($defined(c.wfPerformerSelector)) {
            this.wfdata.wfPerformerSelector = c.wfPerformerSelector.value
        }
        if ($defined(c.wfDepartSelector)) {
            this.wfdata.wfDepartSelector = c.wfDepartSelector.value
        }
        if ($defined(c.wfRoleSelector)) {
            this.wfdata.wfRoleSelector = c.wfRoleSelector.value
        }
        if ($defined(c.glLcswsxDm)) {
            this.wfdata.glLcswsxDm = c.glLcswsxDm.value
        }
    }
}, copyResData2Wfdata: function (a) {
    if ($chk(a.isShowSpForm) && $chk(a.isShowSpForm.value)) {
        if (a.isShowSpForm.value == "true" || a.isShowSpForm.value == true) {
            this.wfdata.isShowSpForm = true
        } else {
            this.wfdata.isShowSpForm = false
        }
    }
    if ($chk(a.processInsId) && $chk(a.processInsId.value)) {
        this.wfdata.processInsId = a.processInsId.value;
        this.wfdata.isStarted = "1"
    }
    if ($defined(a.actInsId)) {
        this.wfdata.actInsId = a.actInsId.value
    }
    if ($defined(a.subSendFlag)) {
        this.wfdata.subSendFlag = a.subSendFlag.value
    }
    if ($defined(a.parentProcessInsId)) {
        this.wfdata.parentProcessInsId = a.parentProcessInsId.value
    }
    if ($defined(a.parentActInsId)) {
        this.wfdata.parentActInsId = a.parentActInsId.value
    }
    if ($defined(a.lcdyid)) {
        this.wfdata.lcdyid = a.lcdyid.value
    }
    if ($defined(a.actDefId)) {
        this.wfdata.actDefId = a.actDefId.value
    }
    if ($defined(a.workItemId)) {
        this.wfdata.workItemId = a.workItemId.value
    }
    if ($defined(a.parentWorkItemId)) {
        this.wfdata.parentWorkItemId = a.parentWorkItemId.value
    }
    if ($defined(a.message)) {
        this.wfdata.message = a.message.value
    }
    if ($defined(a.operatorOrgCode)) {
        this.wfdata.operatorOrgCode = a.operatorOrgCode.value
    }
    if ($defined(a.nextActDefId)) {
        this.wfdata.nextActDefId = a.nextActDefId.value
    }
    if ($defined(a.isFinalTask)) {
        this.wfdata.isFinalTask = a.isFinalTask.value
    }
    if ($defined(a.SWJG_DM)) {
        this.wfdata.SWJG_DM = a.SWJG_DM.value
    }
    if ($defined(a.returnCode)) {
        this.wfdata.returnCode = a.returnCode.value
    }
    if ($defined(a.sjmc)) {
        this.wfdata.sjmc = a.sjmc.value
    }
    if ($defined(a.sjlx)) {
        this.wfdata.sjlx = a.sjlx.value
    }
    if ($defined(a.sjbl)) {
        this.wfdata.sjbl = a.sjbl.value
    }
    if ($defined(a.sjslid)) {
        this.wfdata.sjslid = a.sjslid.value
    }
    if ($defined(a.isMultiEventStartPro)) {
        if (a.isMultiEventStartPro.value == "true" || a.isMultiEventStartPro.value == true) {
            this.wfdata.isMultiEventStartPro = true
        } else {
            this.wfdata.isMultiEventStartPro = false
        }
    }
    if ($defined(a.canSend)) {
        this.wfdata.canSend = a.canSend.value
    }
    if ($defined(a.sednMessage)) {
        this.wfdata.sednMessage = a.sednMessage.value
    }
    if ($defined(a.sjState)) {
        this.wfdata.sjState = a.sjState.value
    }
    if ($defined(a.sjgzid)) {
        this.wfdata.sjgzid = a.sjgzid.value
    }
    if ($defined(a.sjType)) {
        this.wfdata.sjType = a.sjType.value
    }
    if ($defined(a.isTaskMerger) && a.isTaskMerger.value == "1") {
        this.wfdata.isTaskMerger = a.isTaskMerger.value;
        this.wfdata.isStarted = "1"
    }
    if ($defined(a.zndm)) {
        this.wfdata.zndm = a.zndm.value
    }
    if ($defined(a.jsdm)) {
        this.wfdata.jsdm = a.jsdm.value
    }
    if ($defined(a.isConfigedSubflow)) {
        this.wfdata.isConfigedSubflow = a.isConfigedSubflow.value
    }
    if ($defined(a.nextWorkitemId)) {
        this.wfdata.nextWorkitemId = a.nextWorkitemId.value
    }
}, initSubmitComponent: function () {
    var a = this.options.btnlist.indexOf("start");
    var b = this.options.pNode.get(this.options.btnclickparam[a]);
    if (this.options.startType == "2") {
        if (!$defined(b)) {
            swordAlert("请配置流程启动要提交的组件");
            return
        }
        var c = $w(b);
        if (!$defined(c)) {
            swordAlert("未找到流程启动要提交的组件" + b);
            return
        }
        this.wfdata.isInvokeTid = true;
        c.setCtrl(this.ctrls.start);
        c.pushData(this.dataname, JSON.encode(this.wfdata));
        c.addEvent("onSuccess", function (g, f) {
            this.setWfData(f);
            this.resumeEvents(c, "onSuccess");
            if (this.wfdata.isStarted) {
                c.setCtrl(null)
            }
        }.bind(this))
    }
}, startWithoutSave: function (a) {
    if (!$defined(a)) {
        swordAlert("请配置流程启动要提交的组件");
        return
    }
    var b = $w(a);
    if (!$defined(b)) {
        swordAlert("未找到流程启动要提交的组件" + a);
        return
    }
    this.setBtnStatusByName("start", "2");
    this.wfdata.isInvokeTid = false;
    b.setCtrl(this.ctrls.start);
    b.pushData(this.dataname, JSON.encode(this.wfdata));
    b.removeEvents("onSubmitBefore");
    b.removeEvents("onSubmitAfter");
    b.removeEvents("onSuccess");
    b.addEvent("onSuccess", function (f, c) {
        this.setWfData(c);
        if (this.wfdata.returnCode == "1") {
            this.setBtnStatusByName("start", "2");
            this.setSendEnable();
            this.setBtnStatusByName("viewprocess", "1");
            if ($chk(this.wfdata.subSendFlag)) {
                this.initSendSubShow(this.wfdata.subSendFlag)
            }
            this.setBizButtonsEnabled()
        }
    }.bind(this));
    b.submit();
    if (b.isContinue == false) {
        this.setBtnStatusByName("start", "1")
    }
    this.resumeEvents(b, "onSuccess");
    this.resumeEvents(b, "onSubmitAfter");
    this.resumeEvents(b, "onSubmitBefore");
    b.setCtrl(null)
}, saveAndStart: function (a) {
    if (!$defined(a)) {
        swordAlert("请配置流程启动要提交的组件");
        return
    }
    var b = $w(a);
    if (!$defined(b)) {
        swordAlert("未找到流程启动要提交的组件" + a);
        return
    }
    b.submit()
}, startAndSave: function (f) {
    if (!$defined(f)) {
        swordAlert("请配置流程启动要提交的组件");
        return
    }
    var g = $w(f);
    if (!$defined(g)) {
        swordAlert("未找到流程启动要提交的组件" + f);
        return
    }
    this.wfdata.isInvokeTid = true;
    g.setCtrl(this.ctrls.start);
    g.pushData(this.dataname, JSON.encode(this.wfdata));
    var b = g.getFunc(g.options.onSubmitBefore);
    var a = g.getFunc(g.options.onSuccess);
    g.removeEvents("onSubmitBefore");
    g.addEvent("onSubmitBefore", function (k, j) {
        this.setBtnStatusByName("start", "2");
        for (var h = 0; h < b.length; h++) {
            b[h].run([k, j])
        }
        if (g.isContinue == false) {
            this.setBtnStatusByName("start", "1")
        }
    }.bind(this));
    g.removeEvents("onSuccess");
    g.addEvent("onSuccess", function (k, j) {
        this.setWfData(j);
        if (this.wfdata.returnCode == "1") {
            this.setBtnStatusByName("start", "2");
            this.setBtnStatusByName("fallback", "2");
            this.setSendEnable();
            this.setBtnStatusByName("viewprocess", "1");
            this.setBizButtonsEnabled();
            if ($chk(this.wfdata.subSendFlag)) {
                this.initSendSubShow(this.wfdata.subSendFlag)
            }
            for (var h = 0; h < a.length; h++) {
                a[h].run([k, j])
            }
        }
    }.bind(this));
    var c = g;
    if (this.options.saveclicksubmit) {
        if ($defined(this.options.saveclicksubmit)) {
            c = $w(this.options.saveclicksubmit)
        }
    }
    c.submit()
}, startAndSaveAndSend: function (a) {
    if (!$defined(a)) {
        swordAlert("请配置流程启动要提交的组件");
        return
    }
    var b = $w(a);
    if (!$defined(b)) {
        swordAlert("未找到流程启动要提交的组件" + a);
        return
    }
    this.wfdata.isInvokeTid = false;
    b.setCtrl(this.ctrls.start);
    b.pushData(this.dataname, JSON.encode(this.wfdata));
    b.removeEvents("onSubmitAfter");
    b.removeEvents("onSuccess");
    b.addEvent("onSuccess", function (g, f) {
        this.setWfData(f);
        if (this.wfdata.returnCode == "1") {
            this.setBtnStatusByName("start", "2");
            this.setBtnStatusByName("viewprocess", "1");
            b.removeEvents("onSubmitBefore");
            var c = this.options.btnlist.indexOf("start");
            this.pNode().set(this.options.tidinvokeparam[c], false);
            this.flowPredictWithSubmit(b);
            b.removeEvents("onSubmitAfter")
        }
    }.bind(this));
    b.submit();
    this.resumeEvents(b, "onSubmitBefore");
    this.resumeEvents(b, "onSubmitAfter");
    this.resumeEvents(b, "onSuccess");
    b.setCtrl(null)
}, flowSave: function (c) {
    if (!$defined(c)) {
        swordAlert("请配置保存按钮要提交的组件");
        return
    }
    var f = $w(c);
    if (!$defined(f)) {
        swordAlert("未找到保存按钮要提交的组件" + c);
        return
    }
    f.pushData(this.dataname, JSON.encode(this.wfdata));
    if (this.wfdata.oneOfMultiTaskTag != "1") {
        var a = f.getFunc(f.options.onSuccess);
        f.removeEvents("onSuccess");
        f.addEvent("onSuccess", function (j, h) {
            if (!this.isProcStarted()) {
                this.setStartEnable()
            }
            for (var g = 0; g < a.length; g++) {
                a[g].run([j, h])
            }
        }.bind(this))
    }
    var b = f;
    if (this.options.saveclicksubmit) {
        if ($defined(this.options.saveclicksubmit)) {
            b = $w(this.options.saveclicksubmit)
        }
    }
    b.submit()
}, flowStart: function (a) {
    if (this.options.startType == "1") {
        this.startWithoutSave(a)
    }
    if (this.options.startType == "2") {
        this.saveAndStart(a)
    }
    if (this.options.startType == "3") {
        this.startAndSave(a)
    }
    if (this.options.startType == "4") {
        this.startAndSaveAndSend(a)
    }
}, flowAssign: function (f) {
    var b = this.options.btnlist.indexOf("assign");
    var a = this.pNode().get(this.options.tidinvokeparam[b]);
    if ($defined(a)) {
        if (a == true || a == "true") {
            this.wfdata.isInvokeTid = true
        } else {
            this.wfdata.isInvokeTid = false
        }
    } else {
        this.wfdata.isInvokeTid = false
    }
    var c = window.showModalDialog("/workflow/htmls/wfAssignSelect.html", this.wfdata, "dialogHeight: 410px; dialogWidth: 410px; dialogTop: 120px; dialogLeft: " + (window.screen.availWidth / 2 - 200) + "px; edge: Raised; center: yes; help: yes; resizable: yes; status: yes;");
    if ($defined(c)) {
        this.wfdata.userList = JSON.decode(c);
        this.submit(f, this.ctrls.assign)
    }
}, flowBack: function (b) {
    var a = {titleName: "回退确认", width: 500, height: 270, isMin: "false", isNormal: "false", isMax: "false"};
    a.param = {win: window, swordWorkflowName: this.options.name, submitName: this.pNode().get("backsubmit")};
    swordAlertIframe(AddBizCode2URL("/sword?tid=Pre_WorkflowInitPageProxy_initFlowbackConfirmPage"), a, null)
}, flowBackCommand: function (f, a) {
    if ($chk(a)) {
        this.wfdata.htly = a
    }
    if ($chk(f)) {
        var g = pc.getWidget(f);
        if (!$defined(g)) {
            swordAlert("未找到流程回退要提交的组件" + f);
            return
        }
        var l = g.getFunc(g.options.onSuccess);
        var k = g.getFunc(g.options.onSubmitAfter);
        g.removeEvents("onSubmitAfter");
        g.removeEvents("onSuccess");
        var c = this.options.btnlist.indexOf("fallback");
        var b = this.pNode().get(this.options.tidinvokeparam[c]);
        if ($defined(b)) {
            if (b == true || b == "true") {
                this.wfdata.isInvokeTid = true
            } else {
                this.wfdata.isInvokeTid = false
            }
        } else {
            this.wfdata.isInvokeTid = false
        }
        g.addEvent("onSuccess", function (o, n) {
            this.setWfData(n);
            this.showMessage();
            if (this.wfdata.returnCode == "1") {
                this.options.btnlist.each(function (q, p) {
                    if (q != "viewprocess") {
                        this.setBtnStatusByName(q, "2")
                    }
                }.bind(this));
                this.wfdata.isPermitContinue = false
            }
            for (var m = 0; m < l.length; m++) {
                l[m].run([o, n])
            }
            for (var m = 0; m < k.length; m++) {
                k[m].run([o, n])
            }
            window.top.refreshDbsy()
        }.bind(this));
        g.setCtrl(this.ctrls.back);
        g.pushData(this.dataname, JSON.encode(this.wfdata));
        var j = g;
        if ($defined(this.options.backclicksubmit)) {
            j = pc.getWidget(this.options.backclicksubmit)
        }
        j.submit()
    } else {
        var h = {ctrl: this.ctrls.back, data: this.wfdata, onSuccess: function (m) {
            this.setWfData(m);
            this.showMessage();
            if (this.wfdata.returnCode == "1") {
                this.options.btnlist.each(function (o, n) {
                    if (o != "viewprocess") {
                        this.setBtnStatusByName(o, "2")
                    }
                }.bind(this));
                this.wfdata.isPermitContinue = false
            }
        }.bind(this)};
        wfDelegate(h)
    }
}, flowSignin: function (a) {
    this.submit(a, this.ctrls.signin)
}, resumeEvents: function (f, b) {
    f.removeEvents(b);
    var a = f.getFunc(f.options[b]);
    for (var c = 0; c < a.length; c++) {
        f.addEvent(b, a[c])
    }
}, flowPredictWithSubmit: function (f) {
    var c = this.options.btnlist.indexOf("send");
    var a = this.pNode().get(this.options.tidinvokeparam[c]);
    if ($defined(a)) {
        if (a == true || a == "true") {
            this.wfdata.isInvokeTid = true
        } else {
            this.wfdata.isInvokeTid = false
        }
    } else {
        this.wfdata.isInvokeTid = false
    }
    f.setCtrl(this.ctrls.predict);
    f.pushData(this.dataname, JSON.encode(this.wfdata));
    var b = f.getFunc(f.options.onSubmitBefore);
    f.removeEvents("onSubmitBefore");
    f.addEvent("onSubmitBefore", function (j, h) {
        this.setSendDisable();
        for (var g = 0; g < b.length; g++) {
            b[g].run([j, h])
        }
        if (f.isContinue == false) {
            this.setSendEnable()
        }
    }.bind(this));
    f.removeEvents("onSuccess");
    f.removeEvents("onSubmitAfter");
    f.addEvent("onSuccess", function (g, z) {
        this.dataContainer.combine(f.dataContainer);
        this.setWfData(z);
        if (this.options.isShowSelector == "false") {
            var l = pc.getResData("defaultNextActDefId", z).value;
            if ("END" != l) {
                var y = pc.getResData("allNextActUser", z).data.data.value;
                var t = JSON.decode(y);
                var q = null;
                for (var v = 0; v < t.length; v++) {
                    if (l == t[v].nextActDefID) {
                        q = t[v];
                        break
                    }
                }
                var u = q.orgcode;
                var n = pc.getResData(l + u, z).trs;
                var p = [];
                n.each(function (C, B) {
                    var D = C.tds;
                    var A = new Hash();
                    A.set("userId", D.swryDm.value);
                    try {
                        A.set("swjgDm", D.swjgDm.value);
                        A.set("gwDm", D.gwDm.value);
                        if ($chk(D.actDefId) && $chk(D.actDefId.value)) {
                            A.set("actDefId", D.actDefId.value)
                        }
                    } catch (E) {
                    }
                    p.include(A)
                });
                this.wfdata.userList = p
            }
            this.flowSendWithSubmit(f)
        } else {
            var m = pc.getResData("sfgd", z);
            if ($chk(m)) {
                this.setSendEnable();
                var j = pc.getResData("servicename", z);
                var h = "/sword?tid=" + j.value;
                var r = pc.getResData("BIZ_PROC_ID", z);
                h = h + "&BIZ_PROC_ID=" + r.value;
                var s = pc.getResData("wfTaxItemID", z);
                h = h + "&wfTaxItemID=" + s.value;
                var x = pc.getResData("slTaxItemID", z);
                h = h + "&slTaxItemID=" + x.value;
                var k = {titleName: "选择归档办理人", width: 700, height: 450, isMin: "false", isNormal: "false", isMax: "false"};
                k.param = {win: window, data: z, swordWorkflowName: this.options.name};
                swordAlertIframe(AddBizCode2URL(h), k, null)
            } else {
                var o = pc.getResData("isOpen", z);
                if ($chk(o)) {
                    var k = {titleName: "选择子流程第一环节办理人", width: 700, height: 450, isMin: "false", isNormal: "false", isMax: "false"};
                    k.param = {win: window, data: z, swordWorkflowName: this.options.name};
                    swordAlertIframe(AddBizCode2URL("/sword?tid=Pre_WorkflowInitPageProxy_initSubProcSelectPage"), k, null)
                } else {
                    var w = pc.getResData("nextActDefList", z, "dataName").data;
                    var k = {titleName: "选择下一环节办理人", width: 700, height: 450, isMin: "false", isNormal: "true", isMax: "true", onClose: function () {
                        this.onBoxClosing()
                    }.bind(this)};
                    k.param = {win: window, data: z, swordWorkflowName: this.options.name, submitName: this.pNode().get("sendsubmit")};
                    if (w.length > 1) {
                        swordAlertIframe(AddBizCode2URL("/sword?tid=Pre_WorkflowInitPageProxy_initMulitParticipantSelectPage"), k, null)
                    } else {
                        swordAlertIframe(AddBizCode2URL("/sword?tid=Pre_WorkflowInitPageProxy_initParticipantSelectPage"), k, null)
                    }
                }
            }
        }
    }.bind(this));
    f.submit()
}, flowPredictWithoutSubmit: function () {
    this.setSendDisable();
    var a = {ctrl: this.ctrls.predict, data: this.wfdata, onSuccess: function (j) {
        this.setWfData(j);
        var n = pc.getResData("sfgd", j);
        if ($chk(n)) {
            this.setSendEnable();
            var f = pc.getResData("servicename", j);
            var k = "/sword?tid=" + f.value;
            var c = pc.getResData("BIZ_PROC_ID", j);
            k = k + "&BIZ_PROC_ID=" + c.value;
            var m = pc.getResData("wfTaxItemID", j);
            k = k + "&wfTaxItemID=" + m.value;
            var g = pc.getResData("slTaxItemID", j);
            k = k + "&slTaxItemID=" + g.value;
            var l = {titleName: "选择归档办理人", width: 700, height: 450, isMin: "false", isNormal: "false", isMax: "false"};
            l.param = {win: window, data: j, swordWorkflowName: this.options.name};
            swordAlertIframe(AddBizCode2URL(k), l, null)
        } else {
            var b = pc.getResData("isOpen", j);
            if ($chk(b)) {
                var l = {titleName: "选择子流程第一环节办理人", width: 700, height: 450, isMin: "false", isNormal: "false", isMax: "false"};
                l.param = {win: window, data: j, swordWorkflowName: this.options.name};
                swordAlertIframe(AddBizCode2URL("/sword?tid=Pre_WorkflowInitPageProxy_initSubProcSelectPage"), l, null)
            } else {
                if (this.wfdata.isFinalTask != "true") {
                    if ($chk(this.wfdata.wfPerformerSelector) || $chk(this.wfdata.wfRoleSelector)) {
                        this.flowSendWithoutSubmit()
                    } else {
                        var h = pc.getResData("nextActDefList", j, "dataName").data;
                        var l = {titleName: "选择下一环节办理人", width: 700, height: 450, isMin: "false", isNormal: "false", isMax: "false", onClose: function () {
                            this.onBoxClosing()
                        }.bind(this)};
                        l.param = {win: window, data: j, swordWorkflowName: this.options.name, submitName: this.pNode().get("sendsubmit")};
                        if (h.lenght > 1) {
                            swordAlertIframe(("/sword?tid=Pre_WorkflowInitPageProxy_initMulitParticipantSelectPage"), l, null)
                        } else {
                            swordAlertIframe(("/sword?tid=Pre_WorkflowInitPageProxy_initParticipantSelectPage"), l, null)
                        }
                    }
                } else {
                    this.flowSendWithoutSubmit()
                }
            }
        }
    }.bind(this)};
    wfDelegate(a)
}, flowSendWithSubmit: function (g) {
    var a = g.getFunc(g.options.onSuccess);
    var f = g.getFunc(g.options.onSubmitAfter);
    g.removeEvents("onSubmitBefore");
    g.removeEvents("onSuccess");
    var b = this.wfdata.isClickNext;
    g.addEvent("onSuccess", function (k, j) {
        this.setWfData(j);
        if (b != "1") {
            this.showMessage()
        }
        if (this.wfdata.returnCode == "1") {
            this.options.btnlist.each(function (m, l) {
                if (m != "viewprocess") {
                    this.setBtnStatusByName(m, "2")
                }
            }.bind(this));
            this.wfdata.isPermitContinue = false;
            if (this.wfdata.subSendFlag == "resumeAndSubmit") {
                this.wfdata.subSendFlag = "";
                this.wfdata.isFinalTask = "false";
                this.flowPredictWithoutSubmit()
            }
        }
        for (var h = 0; h < a.length; h++) {
            a[h].run([k, j])
        }
        for (var h = 0; h < f.length; h++) {
            f[h].run([k, j])
        }
        this.clear();
        window.top.refreshDbsy();
        if (b == "1") {
            this.flowNext()
        }
    }.bind(this));
    g.setCtrl(this.ctrls.send);
    g.dataContainer.combine(this.dataContainer);
    g.pushData(this.dataname, JSON.encode(this.wfdata));
    var c = g;
    if ($defined(this.options.sendclicksubmit)) {
        c = pc.getWidget(this.options.sendclicksubmit)
    }
    c.submit()
}, flowStartSubFlowSubmit: function () {
    var a = {tid: "Core_ProcessService_startSubProcess", data: {WFDATA: this.wfdata}, onSuccess: function (b) {
        this.setWfData(b);
        var c = pc.getResData(this.dataname, b);
        if (this.wfdata.returnCode == "1") {
            this.setStartSubProcDisable();
            this.setSendEnable();
            if ($chk(c) && $chk(c.data)) {
                if ($chk(c.data.zxfs) && c.data.zxfs.value == "0") {
                    this.wfdata.isPermitContinue = false;
                    this.wfdata.isSychronizedSubflowStarted = true;
                    this.options.btnlist.each(function (g, f) {
                        if (g != "viewprocess") {
                            this.setBtnStatusByName(g, "2")
                        }
                    }.bind(this))
                }
            }
        }
        if (typeof subProcSuccessFun != "undefined" && subProcSuccessFun instanceof Function) {
            subProcSuccessFun()
        }
        this.showMessage()
    }.bind(this)};
    jsDelegate(a)
}, flowSendWithoutSubmit: function () {
    var a = this.wfdata.isClickNext;
    var b = {ctrl: this.ctrls.send, data: this.wfdata, onSuccess: function (c) {
        this.setWfData(c);
        if (this.wfdata.returnCode == "1") {
            this.options.btnlist.each(function (g, f) {
                if (g != "viewprocess") {
                    this.setBtnStatusByName(g, "2")
                }
            }.bind(this));
            this.wfdata.isPermitContinue = false
        }
        if (this.wfdata.subSendFlag == "resumeAndSubmit") {
            this.wfdata.subSendFlag = "";
            this.wfdata.isFinalTask = "false";
            this.flowPredictWithoutSubmit()
        }
        if (a != "1") {
            this.showMessage()
        }
        window.top.refreshDbsy();
        if (a == "1") {
            this.flowNext()
        }
    }.bind(this)};
    wfDelegate(b)
}, flowSend: function (a) {
    if (typeof predictExtFun != "undefined" && predictExtFun instanceof Function) {
        if (!predictExtFun()) {
            return
        }
    }
    if (this.wfdata.canSend == "false") {
        swordAlert(this.wfdata.sendMessage);
        return
    }
    if ($defined(a)) {
        var b = pc.getWidget(a);
        if (!$defined(b)) {
            swordAlert("未找到流程推送要提交的组件" + a);
            return
        }
        this.flowPredictWithSubmit(b)
    } else {
        this.flowPredictWithoutSubmit()
    }
}, flowNextPredict: function () {
    var a = this.options.pNode.get("sendSubmit");
    if (this.wfdata.canSend == "false") {
        swordAlert(this.wfdata.sendMessage);
        return
    }
    if ($defined(a)) {
        var b = pc.getWidget(a);
        if (!$defined(b)) {
            swordAlert("未找到流程推送要提交的组件" + a);
            return
        }
        this.flowNextPredictWithSubmit(b)
    } else {
        this.flowNextPredictWithoutSubmit()
    }
}, flowNextPredictWithSubmit_bak: function (f) {
    this.setSendDisable();
    var b = this.options.btnlist.indexOf("send");
    var a = this.pNode().get(this.options.tidinvokeparam[b]);
    if ($defined(a)) {
        if (a == true || a == "true") {
            this.wfdata.isInvokeTid = true
        } else {
            this.wfdata.isInvokeTid = false
        }
    } else {
        this.wfdata.isInvokeTid = false
    }
    var c = {ctrl: this.ctrls.flowNextPredict, data: this.wfdata, onSuccess: function (n) {
        this.dataContainer.combine(f.dataContainer);
        var p = pc.getResData("result", n).value;
        if (p == "1") {
            this.wfdata.isClickNext = "1";
            var m = pc.getResData("gwDm", n).value;
            var g = pc.getResData("swryDm", n).value;
            var h = pc.getResData("swjgDm", n).value;
            var o = [];
            var j = new Hash();
            j.set("userId", g);
            j.set("swjgDm", h);
            j.set("gwDm", m);
            o.include(j);
            this.wfdata.userList = o;
            var k = this.wfdata;
            this.flowSendWithSubmit(f)
        } else {
            var l = pc.getResData("errMsg", n).value;
            swordAlert(l);
            this.setSendEnable();
            this.wfdata.isClickNext = "0"
        }
    }.bind(this)};
    wfDelegate(c)
}, flowNextPredictWithSubmit: function (f) {
    var c = this.options.btnlist.indexOf("send");
    var a = this.pNode().get(this.options.tidinvokeparam[c]);
    if ($defined(a)) {
        if (a == true || a == "true") {
            this.wfdata.isInvokeTid = true
        } else {
            this.wfdata.isInvokeTid = false
        }
    } else {
        this.wfdata.isInvokeTid = false
    }
    f.setCtrl(this.ctrls.flowNextPredict);
    f.pushData(this.dataname, JSON.encode(this.wfdata));
    var b = f.getFunc(f.options.onSubmitBefore);
    f.removeEvents("onSubmitBefore");
    f.addEvent("onSubmitBefore", function (j, h) {
        this.setSendDisable();
        for (var g = 0; g < b.length; g++) {
            b[g].run([j, h])
        }
        if (f.isContinue == false) {
            this.setSendEnable()
        }
    }.bind(this));
    f.removeEvents("onSuccess");
    f.removeEvents("onSubmitAfter");
    f.addEvent("onSuccess", function (o, n) {
        this.dataContainer.combine(f.dataContainer);
        var q = pc.getResData("result", n).value;
        if (q == "1") {
            this.wfdata.isClickNext = "1";
            var m = pc.getResData("gwDm", n).value;
            var g = pc.getResData("swryDm", n).value;
            var h = pc.getResData("swjgDm", n).value;
            var p = [];
            var j = new Hash();
            j.set("userId", g);
            j.set("swjgDm", h);
            j.set("gwDm", m);
            p.include(j);
            this.wfdata.userList = p;
            var k = this.wfdata;
            this.flowSendWithSubmit(f)
        } else {
            var l = pc.getResData("errMsg", n).value;
            swordAlert(l);
            this.setSendEnable();
            this.wfdata.isClickNext = "0"
        }
    }.bind(this));
    f.submit()
}, flowNextPredictWithoutSubmit: function () {
    this.setSendDisable();
    this.wfdata.isInvokeTid = false;
    var a = {ctrl: this.ctrls.flowNextPredict, data: this.wfdata, onSuccess: function (h) {
        var c = pc.getResData("result", h).value;
        if (c == "1") {
            this.wfdata.isClickNext = "1";
            var b = pc.getResData("gwDm", h).value;
            var l = pc.getResData("swryDm", h).value;
            var k = pc.getResData("swjgDm", h).value;
            var g = [];
            var f = new Hash();
            f.set("userId", l);
            f.set("swjgDm", k);
            f.set("gwDm", b);
            g.include(f);
            this.wfdata.userList = g;
            this.flowSendWithoutSubmit()
        } else {
            var j = pc.getResData("errMsg", h).value;
            swordAlert(j);
            this.setSendEnable();
            this.wfdata.isClickNext = "0"
        }
    }.bind(this)};
    wfDelegate(a)
}, flowNext: function () {
    if (this.wfdata.nextWorkitemId == undefined || this.wfdata.nextWorkitemId == "") {
        swordAlert("推送成功！下一个环节是分支汇聚节点，需要所有分支都完成后才能办理，暂时无法进入下一个环节办理界面！");
        return
    }
    this.wfdata.isClickNext = "0";
    var a = "/sword?tid=Pre_WorkItemProxy_flowNext&nextWorkitemId=" + this.wfdata.nextWorkitemId;
    window.location.href = a
}, flowSuspend: function (a) {
    this.submit(a, this.ctrls.suspend)
}, flowActivation: function (a) {
    this.submit(a, this.ctrls.activation)
}, flowSubStart: function (b) {
    var a = {ctrl: this.ctrls.subProcsubmit, data: this.wfdata, onSuccess: function (f) {
        this.setWfData(f);
        var c = {titleName: "选择下一环节办理人", width: 700, height: 450, isMin: "false", isNormal: "false", isMax: "false"};
        c.param = {win: window, data: f, swordWorkflowName: this.options.name};
        swordAlertIframe(AddBizCode2URL("/sword?tid=Pre_WorkflowInitPageProxy_initSubProcSelectPage"), c, null)
    }.bind(this)};
    wfDelegate(a)
}, flowStop: function (a) {
    swordConfirm("请确实是否需要作废此流程，点击确认，该流程将被作废！", {onOk: function () {
        var c = {BIZ_PROC_ID: this.wfdata.BIZ_PROC_ID, workItemId: this.wfdata.workItemId, isTaskMerger: this.wfdata.isTaskMerger, opertType: "terminated", from: "toolbar"};
        var b = {tid: "Core_ProcessService_getAllProcInfoTreeByBizlcslId", data: c, onSuccess: function (f) {
        }, onAfterLoadData: function (k) {
            if ($chk(pc.getResData("subProcPage", k))) {
                var l = pc.getResData("subProcPage", k).value;
                this.setWfData(k);
                swordAlertIframe(AddBizCode2URL(l), {titleName: "流程树信息", param: {win: window, swordWorkflowName: this.options.name}, data: pageContainer.getResData("allProcInfoTreeList", k), width: 760, height: 450, isNormal: false, isMin: false, isMax: false})
            } else {
                if ($defined(a)) {
                    var g = pc.getWidget(a);
                    if (!$defined(g)) {
                        swordAlert("未找到流程回退要提交的组件" + a);
                        return
                    }
                    var f = g.getFunc(g.options.onSuccess);
                    var n = g.getFunc(g.options.onSubmitAfter);
                    g.removeEvents("onSubmitAfter");
                    g.removeEvents("onSuccess");
                    var j = this.options.btnlist.indexOf("stop");
                    var h = this.pNode().get(this.options.tidinvokeparam[j]);
                    if ($defined(h)) {
                        if (h == true || h == "true") {
                            this.wfdata.isInvokeTid = true
                        } else {
                            this.wfdata.isInvokeTid = false
                        }
                    } else {
                        this.wfdata.isInvokeTid = false
                    }
                    g.addEvent("onSuccess", function (q, p) {
                        this.setWfData(p);
                        this.showMessage();
                        if (this.wfdata.returnCode == "1") {
                            this.options.btnlist.each(function (s, r) {
                                if (s != "viewprocess") {
                                    this.setBtnStatusByName(s, "2")
                                }
                            }.bind(this));
                            this.wfdata.isPermitContinue = false;
                            this.wfdata.isProcessClosed = true
                        }
                        for (var o = 0; o < f.length; o++) {
                            f[o].run([q, p])
                        }
                        for (var o = 0; o < n.length; o++) {
                            n[o].run([q, p])
                        }
                    }.bind(this));
                    g.setCtrl(this.ctrls.stop);
                    g.pushData(this.dataname, JSON.encode(this.wfdata));
                    g.submit()
                } else {
                    var m = {ctrl: this.ctrls.stop, data: this.wfdata, onSuccess: function (o) {
                        this.setWfData(o);
                        if (this.wfdata.returnCode == "1") {
                            this.options.btnlist.each(function (q, p) {
                                if (q != "viewprocess") {
                                    this.setBtnStatusByName(q, "2")
                                }
                            }.bind(this));
                            this.wfdata.isPermitContinue = false;
                            this.wfdata.isProcessClosed = true
                        }
                        this.showMessage()
                    }.bind(this)};
                    wfDelegate(m)
                }
            }
        }.bind(this)};
        jsDelegate(b)
    }.bind(this)})
}, flowEnd: function (a) {
    swordConfirm("请确实是否需要结束此流程，点击确认，该流程将被结束！", {onOk: function () {
        if ($defined(a)) {
            var f = pc.getWidget(a);
            if (!$defined(f)) {
                swordAlert("未找到流程回退要提交的组件" + a);
                return
            }
            var b = f.getFunc(f.options.onSuccess);
            var j = f.getFunc(f.options.onSubmitAfter);
            f.removeEvents("onSubmitAfter");
            f.removeEvents("onSuccess");
            var c = this.options.btnlist.indexOf("end");
            var g = this.pNode().get(this.options.tidinvokeparam[c]);
            if ($defined(g)) {
                if (g == true || g == "true") {
                    this.wfdata.isInvokeTid = true
                } else {
                    this.wfdata.isInvokeTid = false
                }
            } else {
                this.wfdata.isInvokeTid = false
            }
            f.addEvent("onSuccess", function (m, l) {
                this.setWfData(l);
                this.showMessage();
                if (this.wfdata.returnCode == "1") {
                    this.options.btnlist.each(function (o, n) {
                        if (o != "viewprocess") {
                            this.setBtnStatusByName(o, "2")
                        }
                    }.bind(this));
                    this.wfdata.isPermitContinue = false;
                    this.wfdata.isProcessClosed = true
                }
                for (var k = 0; k < b.length; k++) {
                    b[k].run([m, l])
                }
                for (var k = 0; k < j.length; k++) {
                    j[k].run([m, l])
                }
            }.bind(this));
            f.setCtrl(this.ctrls.end);
            f.pushData(this.dataname, JSON.encode(this.wfdata));
            f.submit()
        } else {
            var h = {ctrl: this.ctrls.end, data: this.wfdata, onSuccess: function (k) {
                this.setWfData(k);
                if (this.wfdata.returnCode == "1") {
                    this.options.btnlist.each(function (m, l) {
                        if (m != "viewprocess") {
                            this.setBtnStatusByName(m, "2")
                        }
                    }.bind(this));
                    this.wfdata.isPermitContinue = false;
                    this.wfdata.isProcessClosed = true
                }
                this.showMessage()
            }.bind(this)};
            wfDelegate(h)
        }
    }.bind(this)})
}, flowViewprocess: function (b) {
    if (this.wfdata.processInsId == "") {
        swordAlert("流程还未启动!");
        return
    }
    var a = {titleName: "查看流程图", width: 700, height: 450, isMin: "false", isNormal: "true", isMax: "true"};
    a.param = {data: this.wfdata};
    swordAlertIframe(("/sword?ctrl=WorkFlowCTRL_initProcInsfImg&processInsId=" + this.wfdata.processInsId + "&isHistory=" + this.wfdata.isFinalTask), a, null)
}, submit: function (c, b) {
    if ($defined(c)) {
        var f = $w(c);
        if (!$defined(f)) {
            swordAlert("未找到流程回退要提交的组件" + c);
            return
        }
        f.setCtrl(b);
        f.pushData(this.dataname, JSON.encode(this.wfdata));
        f.addEvent("onSuccess", function (h, g) {
            this.setWfData(g);
            this.showMessage()
        }.bind(this));
        f.submit()
    } else {
        var a = {ctrl: b, data: this.wfdata, onSuccess: function (g) {
            this.setWfData(g);
            this.showMessage()
        }.bind(this)};
        wfDelegate(a)
    }
}, showMessage: function () {
    if (this.wfdata.message != "") {
        swordAlert(this.wfdata.message);
        this.wfdata.message = ""
    }
}, pushWfData: function (a) {
    $w(a).pushData(this.dataname, JSON.encode(this.wfdata))
}, clear: function () {
    this.dataContainer.empty()
}, isProcStarted: function () {
    if (this.wfdata.isStarted == "0") {
        return false
    } else {
        return true
    }
}, onBoxClosing: function () {
    if (this.wfdata.boxClosingEventFlag != "ok") {
        this.setSendEnable()
    }
    this.wfdata.boxClosingEventFlag = ""
}, initSPForm: function () {
    if (this.options.isShowSpForm || this.wfdata.isShowSpForm == true || this.wfdata.isShowSpForm == "true") {
        this.wfdata.isShowSpForm = true;
        var f = this.pNode().get("sendsubmit");
        if (!$chk(f)) {
            swordAlert("该页面配置显示审批表单,请配置推送对应的提交组件!");
            return
        }
        this.createOpinionForm();
        this.createDiplomaHistory();
        var a;
        if ($chk(this.pNode().get("savesubmit"))) {
            a = $w(this.pNode().get("savesubmit"));
            var b = new Element("div").set("widgetName", "opinionForm").inject(a.options.pNode);
            $w(f).load = null
        }
        var c = $w(f);
        var b = new Element("div").set("widgetName", "opinionForm").inject(c.options.pNode);
        $w(f).load = null;
        this.initDiplomaHistory(this.wfdata.BIZ_PROC_ID)
    } else {
        if (this.wfdata.isShowApproveHistory == true) {
            if (this.wfdata.isStarted == "1") {
                this.createDiplomaHistory();
                this.initDiplomaHistory(this.wfdata.BIZ_PROC_ID)
            }
        }
    }
}, createDiplomaHistory: function () {
    var f = new Element("div", {sword: "SwordGrid", name: "diplomaHistoryGrid", caption: "文书审批流转历史", dataX: "100%", autoHeight: "false", showConsole: "false", dragWidth: "false"});
    this.pNode().adopt(f);
    var n = new Element("div", {name: "hdmc", caption: "审批环节", type: "", x: "15%", sort: "false"}).inject(f, "bottom");
    var m = new Element("div", {name: "spr", caption: "审批人", type: "", x: "15%", sort: "false"}).inject(f, "bottom");
    var k = new Element("div", {name: "spjg", caption: "审批结果", type: "select", x: "10%", sort: "false", disable: "true"}).inject(f, "bottom");
    var o = new Element("div", {code: "1", caption: "同意"}).inject(k, "bottom");
    var g = new Element("div", {code: "0", caption: "不同意"}).inject(k, "bottom");
    var j = new Element("div", {name: "spyj", caption: "审批意见", type: "", x: "40%", sort: "false"}).inject(f, "bottom");
    var h = new Element("div", {name: "spsj", caption: "审批时间", type: "", x: "15%", sort: "false"}).inject(f, "bottom");
    var l = pc.widgetFactory.create("SwordGrid");
    f.pNode = f;
    l.initParam(f);
    pc.widgets.set("diplomaHistoryGrid", l)
}, initSendSubShow: function (a) {
    if (a == "6") {
        this.setSendEnable();
        this.setStartSubProcDisable()
    } else {
        if (a == "5") {
            this.setSendDisable();
            this.setStartSubProcDisable()
        } else {
            if (a == "4") {
                this.setStartSubProcHidden()
            } else {
                if (a == "3") {
                    this.setStartSubProcEnable()
                } else {
                    if (a == "2") {
                        this.setStartSubProcHidden()
                    } else {
                        if (a == "1") {
                            this.setSendDisable();
                            this.setStartSubProcEnable()
                        } else {
                            this.setStartSubProcHidden()
                        }
                    }
                }
            }
        }
    }
}, initDiplomaHistory: function (c) {
    var b = {BIZ_PROC_ID: c, workItemId: this.wfdata.workItemId, isTaskMerger: this.wfdata.isTaskMerger};
    var a = {tid: "Core_TyslService_initSpFormAndGrid", data: b, onSuccess: function (f) {
    }, onAfterLoadData: function (f) {
        if ($chk($w("opinionForm")) && $chk($w("opinionForm").getValue("htly"))) {
            $w("opinionForm").displayItem("htly")
        }
    }};
    jsDelegate(a)
}, createOpinionForm: function () {
    var b = new Element("div", {sword: "SwordForm", name: "opinionForm", caption: this.options.spCaption + "意见", layout: "layer0", panel: "true", size: "{'TdWidth':'600px'}"});
    this.pNode().adopt(b);
    var f = new Element("div", {name: "htly", caption: "回退理由", type: "label", show: "false"}).inject(b, "bottom");
    var n = new Element("div", {name: "result", caption: this.options.spCaption + "结果", type: "radio", col: -1, defValue: "1,1"}).inject(b, "bottom");
    var l = new Element("div", {code: "1", caption: "同意"}).inject(n, "bottom");
    var g = new Element("div", {code: "0", caption: "不同意"}).inject(n, "bottom");
    var c = new Element("div", {name: "opinion", caption: this.options.spCaption + "意见", type: "textarea", defValue: "同意", css: "width:600px"}).inject(b, "bottom");
    var k = new Element("div", {name: "spymc", caption: this.options.spCaption + "人", type: "label"}).inject(b, "bottom");
    var a = new Element("div", {name: "spsj", caption: this.options.spCaption + "时间", type: "label"}).inject(b, "bottom");
    var j = new Element("div", {name: "spswjgmc", caption: this.options.spCaption + "税务机关", type: "label"}).inject(b, "bottom");
    var k = new Element("div", {name: "spy", caption: "审批人", type: "hidden"}).inject(b, "bottom");
    var m = new Element("div", {name: "spjg", caption: "审批结果", type: "hidden", value: "1"}).inject(b, "bottom");
    var j = new Element("div", {name: "spswjg", caption: "审批税务机关", type: "hidden"}).inject(b, "bottom");
    var j = new Element("div", {name: "lcslid", caption: "流程实例ID", defValue: this.wfdata.BIZ_PROC_ID, type: "hidden"}).inject(b, "bottom");
    var j = new Element("div", {name: "hdslid", caption: "活动实例ID", defValue: this.wfdata.BIZ_ACT_ID, type: "hidden"}).inject(b, "bottom");
    var h = pc.widgetFactory.create("SwordForm");
    b.pNode = b;
    h.initParam(b);
    pc.widgets.set("opinionForm", h);
    $w("opinionForm").getWidget("result").options.onClickBefore = "checkIsAgree()";
    $w("opinionForm").getFieldEl("htly").getParent().set({align: "left", "text-align": "left"});
    $w("opinionForm").getFieldEl("spymc").getParent().set({align: "left", "text-align": "left"});
    $w("opinionForm").getFieldEl("spsj").getParent().set({align: "left", "text-align": "left"});
    $w("opinionForm").getFieldEl("spswjgmc").getParent().set({align: "left", "text-align": "left"})
}, creatFlzlGrid: function () {
    var j = new Element("div", {sword: "SwordGrid", name: "flzlGrid", caption: "附送资料", dataX: "100%", autoHeight: "false", showConsole: "false"}).inject($$("body")[0], "bottom");
    var g = new Element("div", {name: "name", caption: "资料名称", type: "", x: "30%", sort: "false"}).inject(j, "bottom");
    var f = new Element("div", {name: "fs", caption: "份数", type: "", x: "15%", sort: "false"}).inject(j, "bottom");
    var l = new Element("div", {name: "cllx", caption: "处理类型", type: "", x: "15%", sort: "false"}).inject(j, "bottom");
    var k = new Element("div", {name: "bz", caption: "备注", type: "", x: "40%", sort: "false"}).inject(j, "bottom");
    var h = pc.widgetFactory.create("SwordGrid");
    j.pNode = j;
    h.initParam(j);
    pc.widgets.set("flzlGrid", h)
}});
function checkIsAgree(b, a) {
    $w("opinionForm").setValue("opinion", a);
    $w("opinionForm").setValue("spjg", b);
    if (typeof agreeExtFun != "undefined" && agreeExtFun instanceof Function) {
        agreeExtFun()
    }
}
function wfDelegate(b) {
    var a = pc.getReq({tid: $defined(b.tid) ? b.tid : "", ctrl: $defined(b.ctrl) ? b.ctrl : "", async: false, widgets: [
        {sword: "attr", name: "WFDATA", value: JSON.encode(b.data)}
    ]});
    if (b.widgetDatas) {
        b.widgetDatas.each(function (c) {
            var f = c.name;
            if (f) {
                if (!$w(f).validate()) {
                    return
                }
            }
        });
        a.data.extend(b.widgetDatas)
    }
    b.req = a;
    pc.postReq(b)
}
function wfConfirmSelectedUsers(g, b, f) {
    $w(b).wfdata.boxClosingEventFlag = "ok";
    if ($chk(g)) {
        var a = JSON.decode(g);
        var c = a.isFinal;
        $w(b).wfdata.nextActDefId = a.nextActDefId;
        if ("true" != c) {
            $w(b).wfdata.userList = a.hostUsers
        }
        if ($chk(f)) {
            $w(b).flowSendWithSubmit($w(f))
        } else {
            $w(b).flowSendWithoutSubmit()
        }
    }
}
function wfConfirmSubProcSelectedUsers(b, a) {
    if ($chk(b)) {
        $w(a).wfdata.userList = JSON.decode(b).hostUsers;
        $w(a).flowStartSubFlowSubmit()
    }
}
function wfCancelSelectedUsers(a) {
    $w(a).wfdata.boxClosingEventFlag = "cancel";
    $w(a).clear()
}
function wfConfirmFlowback(b, c, a) {
    $w(b).flowBackCommand(c, a)
}
function wfInvalidProcessOnSuccess(a) {
    $w(a).options.btnlist.each(function (c, b) {
        if (c != "viewprocess") {
            $w(a).setBtnStatusByName(c, "2")
        }
    });
    swordAlert("作废成功!")
}
function getSpjg() {
    if ($chk($w("opinionForm"))) {
        return $w("opinionForm").getValue("spjg")
    } else {
        SwordAlert("此页面没有审批表单，此方法不能使用！")
    }
}
function isExistsSubProcess(a) {
};